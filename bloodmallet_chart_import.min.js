"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function bloodmallet_chart_import() {
  var e = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
      t = "#343a40",
      o = "#f8f9fa",
      a = "#828282",
      l = "1.1rem",
      r = !1,
      i = "https://bloodmallet.com/chart/get/",
      n = {
    cn: "cn_CN",
    en: "en_US",
    de: "de_DE",
    es: "es_ES",
    fr: "fr_FR",
    it: "it_IT",
    ko: "ko_KR",
    pt: "pt_BR",
    ru: "ru_RU",
    "zh-hans": "cn_CN"
  },
      s = {
    Kyrian: {
      id: 1,
      color: "#69ccf0"
    },
    Venthyr: {
      id: 2,
      color: "#c41f3b"
    },
    "Night Fae": {
      id: 3,
      color: "#a330c9"
    },
    Necrolord: {
      id: 4,
      color: "#abd473"
    }
  },
      d = {
    unholy: "#abd473",
    frost: "#69ccf0",
    blood: "#c41f3b"
  },
      c = "Î” Damage per second",
      h = "% Damage per second";

  function u(e) {
    var t = e.chart_id,
        o = e.data_type,
        a = e.fight_style,
        l = e.wow_class,
        n = e.wow_spec;

    try {
      if (m(e)) return;
    } catch (e) {
      r;
    }

    var s = a;
    s += "/" + l, s += "/" + n;
    var d = "";
    d = t ? i + t : i + o + "/" + s;
    var c = new XMLHttpRequest();
    c.open("GET", d, !0), c.onload = function (t) {
      if (4 === c.readyState) if (200 === c.status) {
        JSON.parse(c.responseText);
        e.html_element.dataset.loadedData = c.responseText;
      } else console.error(c.statusText);
    }, c.onerror = function (e) {
      console.error("Fetching data from bloodmallet.com encountered an error, ", e);
    }, c.send(null);
  }

  function m(e) {
    return JSON.parse(e.html_element.dataset.loadedData);
  }

  function p(e, t, o, a) {
    var l = e.data_type,
        i = e.limit,
        n = e.chart_engine,
        h = !1;

    try {
      h = m(e);
    } catch (l) {
      return void (a < 30 && setTimeout(p, 200, e, t, o, a + 1));
    }

    if (e.data = h, o.update({
      accessibility: {
        enable: !1
      }
    }, !1), !0 === h.error || "error" === h.status) return function (e, t) {
      var o = e;

      if (o.innerHTML = "", "error" === t.status) {
        var _e = document.createElement("p");

        _e.innerText = t.message, o.appendChild(_e);
      } else {
        var _e2 = document.createElement("p");

        _e2.innerText = "An error occured during simulation.", o.appendChild(_e2);

        var _a = document.createElement("ul"),
            _l = document.createElement("li");

        _l.textContent = "Title: " + (t.title ? t.title : "~"), _a.appendChild(_l);

        var _r = document.createElement("li");

        _r.textContent = "Spec: " + t.wow_spec + " " + t.wow_class, _a.appendChild(_r);

        var _i = document.createElement("li");

        _i.textContent = "Type: " + t.simulation_type, _a.appendChild(_i);

        var _n = document.createElement("li");

        _n.textContent = "Fight style: " + t.fight_style, _a.appendChild(_n);

        var _s = document.createElement("li");

        _s.textContent = "ID: " + t.id, _a.appendChild(_s);

        var _d = document.createElement("li");

        _d.textContent = "Custom profile:", _a.appendChild(_d), _d.appendChild(document.createElement("br"));

        var _c = document.createElement("textarea");

        _c.value = t.custom_profile, _c.placeholder = "No custom profile", _c.style.width = "100%", _c.classList.add("form-control"), _d.appendChild(_c);

        var _h = document.createElement("li");

        _h.textContent = "Log:", _a.appendChild(_h), _h.appendChild(document.createElement("br"));

        var _u = document.createElement("textarea");

        _u.value = t.log, _u.placeholder = "No log available", _u.style.width = "100%", _u.classList.add("form-control"), _h.appendChild(_u), o.appendChild(_a);
      }
    }(t, h);
    if (wow_class = h.simc_settings.class, wow_spec = h.simc_settings.spec, fight_style = h.simc_settings.fight_style, e.data_type = l = h.data_type, ("legendaries" === e.data_type || "tier_set" === e.data_type) && (e.value_style = "absolute"), w(e, h), "secondary_distributions" === l) return function (e, t, o) {
      r;
      var a = t.id,
          l = (e.chart_id, e.fight_style),
          i = e.wow_class,
          n = e.wow_spec,
          s = (e.chart_engine, !1);
      s = m(e), i = s.simc_settings.class, n = s.simc_settings.spec, l = s.simc_settings.fight_style;
      var d = x(e),
          c = !1;
      if ("highcharts" == e.chart_engine) try {
        c = Highcharts.chart(a, d);
      } catch (e) {
        return console.log("When trying to create a highcharts chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(e);
      } else if ("highcharts_old" == e.chart_engine) try {
        var _e3 = d;
        _e3.chart.renderTo = a, c = new Highcharts.Chart(_e3);
      } catch (e) {
        return console.log("When trying to create a highcharts_old chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(e);
      }
      o = void 0, o = c;
      var h;
      h = Object.keys(s.data)[0];

      var u = s.data[h][s.sorted_data_keys[h][0]],
          p = s.data[h][s.sorted_data_keys[h][s.sorted_data_keys[h].length - 1]],
          f = g(100, 0, 100),
          _ = g(0, 0, 100),
          y = {
        name: Intl.NumberFormat().format(u) + " DPS",
        color: "rgb(" + f[0] + "," + f[1] + "," + f[2] + ")",
        data: []
      };

      var _arr = Object.keys(s.data[h]);

      for (var _i2 = 0; _i2 < _arr.length; _i2++) {
        var _t = _arr[_i2];

        var _o = void 0,
            _a2 = s.data[h][_t],
            _l2 = g(_a2, p, u),
            _r2 = 1,
            _i3 = "#232227",
            _n2 = 5;

        if (u === _a2 && (_r2 = 3, _n2 = 8, _i3 = e.font_color), _t.indexOf("70") > -1) switch (_o = {
          enabled: !0,
          allowOverlap: !0
        }, _t.indexOf("70")) {
          case 0:
            _o.format = "Crit", _o.verticalAlign = "top";
            break;

          case 3:
            _o.format = "Haste";
            break;

          case 6:
            _o.format = "Mastery", _o.verticalAlign = "top";
            break;

          case 9:
            _o.format = "Versatility", _o.verticalAlign = "top";
        }
        var _d2 = s.secondary_sum;

        var _c2 = parseInt(_t.split("_")[0]),
            _m = parseInt(_t.split("_")[1]),
            _f = parseInt(_t.split("_")[2]),
            _2 = parseInt(_t.split("_")[3]);

        y.data.push({
          x: Math.sqrt(3) / 2 * (_c2 + 1 / 3 * _m),
          y: Math.sqrt(2 / 3) * _m,
          z: _f + .5 * _c2 + .5 * _m,
          name: _t,
          color: "rgb(" + _l2[0] + "," + _l2[1] + "," + _l2[2] + ")",
          dps: _a2,
          dps_max: u,
          dps_min: p,
          stat_crit: _c2 * _d2 / 100,
          stat_haste: _m * _d2 / 100,
          stat_mastery: _f * _d2 / 100,
          stat_vers: _2 * _d2 / 100,
          stat_sum: _d2,
          marker: {
            radius: _n2,
            lineColor: _i3,
            lineWidth: _r2
          },
          dataLabels: _o
        });
      }

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      o.addSeries(y, !1), o.addSeries({
        name: Intl.NumberFormat().format(p) + " DPS",
        color: "rgb(" + _[0] + "," + _[1] + "," + _[2] + ")"
      }, !1);
      var b = s.timestamp,
          w = b.split("-")[0],
          v = b.split("-")[1],
          C = b.split("-")[2].split(" ")[0],
          k = b.split(" ")[1].split(":")[0],
          O = b.split(":")[1],
          A = "Last updated ",
          L = new Date() - new Date(Date.UTC(w, v - 1, C, k, O)),
          T = Math.floor(L / 24 / 3600 / 1e3);
      T > 0 && (A += "".concat(T, "d "));
      var E = Math.floor(L / 3600 / 1e3) - 24 * T;
      A += "".concat(E, "h ago"), o.redraw(), function (e) {
        function t(t) {
          var a = (t = o.pointer.normalize(t)).chartX,
              l = t.chartY,
              r = o.options.chart.options3d.alpha,
              i = o.options.chart.options3d.beta,
              n = 5;

          function s(e) {
            e = o.pointer.normalize(e), o.update({
              chart: {
                options3d: {
                  alpha: r + (e.chartY - l) / n,
                  beta: i + (a - e.chartX) / n
                }
              }
            }, void 0, void 0, !1);
          }

          o.unbindDragMouse = e.addEvent(document, "mousemove", s), o.unbindDragTouch = e.addEvent(document, "touchmove", s), e.addEvent(document, "mouseup", o.unbindDragMouse), e.addEvent(document, "touchend", o.unbindDragTouch);
        }

        e.addEvent(o.container, "mousedown", t), e.addEvent(o.container, "touchstart", t);
      }(Highcharts);
    }(e, t, o);
    if ("talent_target_scaling" === l) return function (e, t, o) {
      r;
      var a = t.id,
          l = (e.chart_id, e.fight_style),
          i = e.wow_class,
          n = e.wow_spec,
          s = (e.chart_engine, m(e));
      document.getElementById("post_chart").hidden = !1, i = s.profile.character.class, n = s.profile.character.spec, l = s.simc_settings.fight_style;
      var d = x(e),
          c = !1;
      if ("highcharts" == e.chart_engine) try {
        c = Highcharts.chart(a, d);
      } catch (e) {
        return console.log("When trying to create a highcharts chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(e);
      } else if ("highcharts_old" == e.chart_engine) try {
        var _e4 = d;
        _e4.chart.renderTo = a, c = new Highcharts.Chart(_e4);
      } catch (e) {
        return console.log("When trying to create a highcharts_old chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(e);
      }
      o = void 0, o = c;

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = s.sorted_data_keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _t2 = _step.value;

          var _a3 = s.data[_t2],
              _l3 = Object.keys(_a3);

          var _r3 = -1;

          _r3 = e.talent_target_scaling_min_target_count > -1 ? e.talent_target_scaling_min_target_count : Math.min.apply(Math, _toConsumableArray(_l3.map(function (e) {
            return parseInt(e);
          })));

          var _i4 = -1;

          _i4 = e.talent_target_scaling_max_target_count > -1 ? e.talent_target_scaling_max_target_count : Math.max.apply(Math, _toConsumableArray(_l3.map(function (e) {
            return parseInt(e);
          })));
          var _n3 = [];

          for (var _e5 = _r3; _e5 <= _i4; _e5++) {
            _l3.indexOf(_e5.toString()) >= -1 ? _n3.push([_e5, _a3[_e5]]) : _n3.push([_e5, null]);
          }

          var _d3 = {
            name: _t2,
            data: _n3
          };
          o.addSeries(_d3, !1), o.update({
            xAxis: {
              min: _r3 - .5,
              max: _i4 + .5
            }
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      o.redraw();
    }(e, t, o);
    l = h.data_type;
    var u = h;
    var y,
        b,
        v = {};
    y = Object.keys(u).indexOf("sorted_data_keys") > -1 && "windfury_totem" === l && "absolute" === e.value_style ? u.sorted_data_keys_2.slice(0, i) : Object.keys(u).indexOf("sorted_data_keys") > -1 ? u.sorted_data_keys.slice(0, i) : Object.keys(u.data), b = ["races", "talents", "soulbinds", "tier_set", "windfury_totem"].includes(l) ? 0 : ["legendaries", "soulbind_nodes", "covenants", "domination_shards"].includes(l) ? u.data.baseline : u.data.baseline[u.simulated_steps[u.simulated_steps.length - 1]];

    var _arr2 = Object.keys(u.data);

    for (var _i5 = 0; _i5 < _arr2.length; _i5++) {
      var _e12 = _arr2[_i5];
      "{" === _e12[0] && "}" === _e12[_e12.length - 1] && (v[_e12] = u.data[_e12]);
    }

    var C,
        k = [];

    if (k = "soulbinds" === l ? void 0 : "tier_set" === l ? ["4p", "2p", "no tier"] : u.simulated_steps, "trinkets" === l) {
      if (void 0 !== e.html_element.dataset.filterItemlevels) {
        var _t4 = e.html_element.dataset.filterItemlevels.split(";");

        k = k.filter(function (e) {
          return -1 === _t4.indexOf(e.toString());
        });
      }

      if (y = y.filter(function (e) {
        return k.some(function (t) {
          return void 0 !== u.data[e][t];
        });
      }), void 0 !== e.html_element.dataset.filterActivePassive) {
        var _t5 = e.html_element.dataset.filterActivePassive.split(";");

        var _o2 = [];
        _t5.map(function (e) {
          "active" === e ? _o2.push(!0) : "passive" === e && _o2.push(!1);
        }), y = y.filter(function (e) {
          return -1 === _o2.indexOf(u.data_active[e]);
        });
      }

      if (void 0 !== e.html_element.dataset.filterSources) {
        var _t6 = e.html_element.dataset.filterSources.split(";");

        y = y.filter(function (e) {
          return -1 === _t6.indexOf(u.data_sources[e]);
        });
      }

      var _t3 = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = y[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _e6 = _step2.value;

          var _o3 = void 0;

          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = k[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _t7 = _step3.value;
              (void 0 === _o3 && void 0 !== u.data[_e6][_t7] || void 0 !== u.data[_e6][_t7] && u.data[_e6][_t7] > _o3) && (_o3 = u.data[_e6][_t7]);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          _t3.push([_e6, _o3]);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      _t3.sort(function (e, t) {
        return t[1] - e[1];
      }), y = _t3.map(function (e) {
        return e[0];
      });
    }

    for (o.setTitle({
      text: u.title
    }, {
      text: u.subtitle
    }, !1); o.series[0];) {
      o.series[0].remove(!1);
    }

    if (C = ["talents"].indexOf(l) > -1 ? y.map(function (t) {
      var o = [];

      for (var _a4 = 0; _a4 < t.length; _a4++) {
        o.push(_(e, (_a4 + 1).toString() + t[_a4], u));
      }

      return o.join("");
    }) : ["tier_set", "talent_target-scaling"].indexOf(l) > -1 ? y.map(function (t) {
      return _(e, t, u);
    }) : y.map(function (t) {
      var o = t.indexOf("} ") > -1 ? t.slice(t.indexOf("} ") + 2, t.length) : t;
      return o = o.indexOf(" +") > -1 ? o.slice(0, o.indexOf(" +")) : o, _(e, o, u);
    }), "highcharts" == n ? o.update({
      xAxis: {
        categories: C
      }
    }, !1) : "highcharts_old" == n && o.xAxis[0].setCategories(C, !1), k) {
      var _t8 = {};

      for (var _o4 in u.data) {
        if (u.data.hasOwnProperty(_o4)) {
          var _a5 = u.data[_o4];
          _t8[_o4] = {};
          var _r4 = b;
          "conduits" === l && (_r4 = u.data.baseline[u.covenant_mapping[_o4]]);

          for (var _l4 = k.length - 1; _l4 >= 0; _l4--) {
            var _i6 = k[_l4];

            var _n4 = _a5.hasOwnProperty(e.covenant) ? _a5[e.covenant] : _a5;

            Number.isInteger(_n4) ? (_t8[_o4][_i6] = Math.max(_n4 - _r4, 0), _r4 = 0 === _t8[_o4][_i6] ? _r4 : _n4) : _n4.hasOwnProperty(_i6) ? (_t8[_o4][_i6] = Math.max(_n4[_i6] - _r4, 0), _r4 = 0 === _t8[_o4][_i6] ? _r4 : _n4[_i6]) : _t8[_o4][_i6] = 0;
          }
        }
      }

      r;
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = k[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var _a6 = _step4.value;
          var _l5 = [];

          for (var _o5 = 0; _o5 < y.length; _o5++) {
            var _r6 = y[_o5];

            var _i7 = f(e, _t8[_r6][_a6], b);

            _l5.push(_i7);
          }

          var _r5 = _a6;
          o.addSeries({
            data: _l5,
            name: _r5
          }, !1);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    } else if (["soulbind_nodes", "covenants"].includes(l)) {
      var A = [];

      for (var _t9 = 0; _t9 < y.length; _t9++) {
        var _o6 = y[_t9],
            _a7 = u.data[_o6] - b;

        A.push(f(e, _a7, b));
      }

      o.addSeries({
        data: A,
        name: "Data",
        showInLegend: !1
      }, !1);
    } else if (["legendaries"].includes(l)) {
      var _t10 = [],
          _a8 = "{" + u.profile.character.covenant + "}",
          _l6 = {};

      var _arr3 = Object.keys(v);

      for (var _i8 = 0; _i8 < _arr3.length; _i8++) {
        var _e7 = _arr3[_i8];
        _l6[_e7] = [];
      }

      _l6[_a8] = [];
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = y[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _o7 = _step5.value;
          var _r8 = b;

          if (_o7.indexOf("} ") > -1) {
            var _t11 = _o7.slice(0, _o7.indexOf("} ") + 1);

            _r8 = v[_t11], _l6[_t11].push(f(e, _r8, b));

            var _arr5 = Object.keys(_l6);

            for (var _i11 = 0; _i11 < _arr5.length; _i11++) {
              var _e8 = _arr5[_i11];
              _e8 !== _t11 && _l6[_e8].push(0);
            }
          } else {
            var _arr6 = Object.keys(_l6);

            for (var _i12 = 0; _i12 < _arr6.length; _i12++) {
              var _t12 = _arr6[_i12];
              _t12 !== _a8 ? _l6[_t12].push(0) : _l6[_t12].push(f(e, _r8, _r8));
            }
          }

          var _i10 = u.data[_o7] - _r8;

          _t10.push(f(e, _i10, _r8));
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      o.addSeries({
        data: _t10,
        name: "Legendary effect",
        showInLegend: !0,
        color: "#ff7d0a"
      }, !1);
      var _r7 = {
        night_fae: "Night Fae",
        necrolord: "Necrolord",
        venthyr: "Venthyr",
        kyrian: "Kyrian"
      };

      var _arr4 = Object.keys(_l6);

      for (var _i9 = 0; _i9 < _arr4.length; _i9++) {
        var _e9 = _arr4[_i9];
        o.addSeries({
          data: _l6[_e9],
          name: _r7[_e9.slice(1, _e9.length - 1)],
          showInLegend: !0,
          color: s[_r7[_e9.slice(1, _e9.length - 1)]].color
        }, !1);
      }
    } else if (["windfury_totem"].includes(l)) {
      var _t13 = [],
          _a9 = {
        "Blood Death Knight": "#c41f3b",
        "Frost Death Knight": "#c41f3b",
        "Unholy Death Knight": "#c41f3b",
        "Havoc Demon Hunter": "#a330c9",
        "Vengeance Demon Hunter": "#a330c9",
        "Feral Druid": "#ff7d0a",
        "Guardian Druid": "#ff7d0a",
        "Survival Hunter": "#abd473",
        "Brewmaster Monk": "#00ff96",
        "Windwalker Monk": "#00ff96",
        "Protection Paladin": "#f58cba",
        "Retribution Paladin": "#f58cba",
        "Assassination Rogue": "#fff569",
        "Outlaw Rogue": "#fff569",
        "Subtlety Rogue": "#fff569",
        "Enhancement Shaman": "#0070de",
        "Arms Warrior": "#c79c6e",
        "Fury Warrior": "#c79c6e",
        "Protection Warrior": "#c79c6e"
      };
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = y[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var _o8 = _step6.value;

          var _l7 = u.data["{" + _o8 + "}"],
              _r9 = u.data[_o8] - _l7;

          _t13.push({
            y: f(e, _r9, _l7),
            color: _a9[_o8]
          });
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      o.addSeries({
        data: _t13,
        name: "Windfury Totem",
        showInLegend: !1
      }, !1);
    } else if (["domination_shards"].includes(l)) {
      var _arr7 = Object.keys(d);

      for (var _i13 = 0; _i13 < _arr7.length; _i13++) {
        var _t15 = _arr7[_i13];
        var _a11 = [];
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = y[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var _o10 = _step8.value;
            var _l9 = _o10,
                _r10 = b;

            if (_o10.indexOf(" +") > -1 && (_l9 = _o10.split(" +")[0], _r10 = u.data[_l9]), u.shard_type[_l9] === _t15) {
              var _t16 = u.data[_o10] - _r10;

              _a11.push(f(e, _t16, _r10));
            } else _a11.push(f(e, 0, _r10));
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }

        o.addSeries({
          data: _a11,
          name: _t15 + (y[0].indexOf(" +") > -1 ? " set" : ""),
          showInLegend: !0,
          color: d[_t15]
        }, !1);
      }

      if (y[0].indexOf(" +") > -1) {
        var _t14 = [];
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = y[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var _o9 = _step7.value;

            var _a10 = _o9.split(" +")[0],
                _l8 = u.data[_a10] - b;

            _t14.push(f(e, _l8, b));
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }

        o.addSeries({
          data: _t14,
          name: "shard",
          showInLegend: !0,
          color: "#ff7d0a"
        }, !1);
      }
    } else if (["soulbinds"].includes(l)) {
      var _iteratorNormalCompletion9 = true;
      var _didIteratorError9 = false;
      var _iteratorError9 = undefined;

      try {
        for (var _iterator9 = Object.keys(s).sort().reverse()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
          var _t17 = _step9.value;
          var _a12 = s[_t17].id;
          var _l10 = [];
          var _iteratorNormalCompletion10 = true;
          var _didIteratorError10 = false;
          var _iteratorError10 = undefined;

          try {
            for (var _iterator10 = y[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
              var _e10 = _step10.value;
              var _t18 = 0;
              u.covenant_mapping[_e10][0] === _a12 && (_t18 = Math.max.apply(Math, _toConsumableArray(Object.values(u.data[_e10])))), _l10.push(_t18);
            }
          } catch (err) {
            _didIteratorError10 = true;
            _iteratorError10 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
                _iterator10.return();
              }
            } finally {
              if (_didIteratorError10) {
                throw _iteratorError10;
              }
            }
          }

          o.addSeries({
            data: _l10,
            name: O(_t17, u, e),
            showInLegend: !0,
            color: s[_t17].color
          }, !1);
        }
      } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
            _iterator9.return();
          }
        } finally {
          if (_didIteratorError9) {
            throw _iteratorError9;
          }
        }
      }

      o.yAxis[0].options.title.text = c, o.yAxis[1].options.title.text = c;
    } else {
      A = [];

      for (var _e11 = 0; _e11 < y.length; _e11++) {
        var _t19 = y[_e11],
            _o11 = u.data[_t19];
        A.push(_o11);
      }

      o.addSeries({
        data: A,
        name: "DPS",
        showInLegend: !1
      }, !1);
    }

    ["trinkets"].indexOf(l) > -1 ? o.legend.title.attr({
      text: "Itemlevel"
    }) : "races" !== l && "domination_shards" !== l || o.legend.title.attr({
      text: ""
    }), "highcharts_old" == n && o.reflow(), t.style.height = 200 + 30 * y.length + "px", "highcharts" == n && o.setSize(void 0, t.style.height), "wowdb" == e.tooltip_engine ? setTimeout(function () {
      !function (e) {
        r;

        try {
          CurseTips["wowdb-tooltip"].watchElements(document.getElementById(e).getElementsByTagName("a"));
        } catch (e) {
          console.log("Setting wowdb (CurseTips) tooltips failed. Error: ", e);
        }
      }(t.id), o.redraw();
    }, 1) : "wowhead" == e.tooltip_engine ? setTimeout(function () {
      window.$WowheadPower.refreshLinks(), o.redraw();
    }, 1) : setTimeout(function () {
      o.redraw();
    }, 1);
  }

  function f(e, t, o) {
    return "absolute" === e.value_style ? t : "relative" === e.value_style ? Math.round(1e4 * t / o) / 100 : void console.error("Unknown value-style", e.value_style);
  }

  function g(e, t, o) {
    var a = [0, 255, 255],
        l = [255, 255, 0],
        r = [255, 0, 0],
        i = 0,
        n = 0;

    for (var _e13 = 0; _e13 < 3; _e13++) {
      i += Math.abs(r[_e13] - l[_e13]), n += Math.abs(l[_e13] - a[_e13]);
    }

    var s = t + (o - t) * (n / (n + i));

    if (e >= s) {
      var _t20 = (e - s) / (o - s);

      return [Math.floor(r[0] * _t20 + l[0] * (1 - _t20)), Math.floor(r[1] * _t20 + l[1] * (1 - _t20)), Math.floor(r[2] * _t20 + l[2] * (1 - _t20))];
    }

    {
      var _o12 = (e - t) / (s - t);

      return [Math.floor(l[0] * _o12 + a[0] * (1 - _o12)), Math.floor(l[1] * _o12 + a[1] * (1 - _o12)), Math.floor(l[2] * _o12 + a[2] * (1 - _o12))];
    }
  }

  function _(e, t, o) {
    if ("wowhead" != e.tooltip_engine && "wowdb" != e.tooltip_engine) return O(t, o, e);
    if (["races", "windfury_totem"].includes(e.data_type)) return O(t, o, e);

    if (["tier_set", "talent_target_scaling"].includes(e.data_type)) {
      var _a13 = '<a href="#' + ("override-profile-" + o.sorted_data_keys.indexOf(t)) + '">';

      return _a13 += O(t, o, e), _a13 += "</a>", _a13;
    }

    if (["soulbinds"].includes(e.data_type)) {
      var _a14 = '<a href="#' + t + '">';

      return _a14 += O(t, o, e), _a14 += "</a>", _a14;
    }

    if ("wowhead" == e.tooltip_engine) {
      var _a15 = document.createElement("a");

      if (_a15.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", o.hasOwnProperty("item_ids") && o.item_ids.hasOwnProperty(t)) {
        if (_a15.href += "item=" + o.item_ids[t] + "/" + b(t), void 0 !== o.simulated_steps) {
          var _e14 = o.simulated_steps[o.simulated_steps.length - 1];
          "string" == typeof _e14 && _e14.indexOf("_") > -1 && (_e14 = _e14.split("_")[1]), _a15.href += "&ilvl=" + _e14;
        }
      } else if (o.hasOwnProperty("spell_ids") && o.spell_ids.hasOwnProperty(t)) _a15.href += "spell=" + o.spell_ids[t] + "/" + b(t);else if ("talents" === e.data_type) {
        if ("0" === t[1]) return t[1];
        _a15.href += "spell=" + o.talent_data[t[0]][t[1]].spell_id;
      }

      return "talents" === e.data_type ? _a15.appendChild(document.createTextNode(t[1])) : _a15.appendChild(document.createTextNode(O(t, o, e))), _a15.outerHTML;
    }

    if ("wowdb" == e.tooltip_engine) {
      var _a16,
          _l11 = document.createElement("a");

      _l11.href = "http://www.wowdb.com/";

      try {
        _l11.href += "items/" + o.item_ids[t];
      } catch (e) {
        r;
      }

      if (_l11.href.indexOf("items") > -1) {
        var _e15 = o.simulated_steps[o.simulated_steps.length - 1];
        "string" == typeof _e15 && _e15.indexOf("_") > -1 && (_e15 = _e15.split("_")[1]), _l11.href += "?itemLevel=" + _e15;
      }

      try {
        _l11.href += "spells/" + o.spell_ids[t];
      } catch (e) {
        r;
      }

      if ("talents" === e.data_type) {
        if ("0" === t[1]) return t[1];
        _l11.href += "spells/" + o.talent_data[t[0]][t[1]].spell_id;
      }

      return _l11.dataset.tooltipHref = _l11.href, _a16 = "talents" === e.data_type ? t[1] : O(t, o, e), _l11.appendChild(document.createTextNode(_a16)), _l11.outerHTML;
    }
  }

  function y(e) {
    e.setTitle({
      text: "Wrong chart setup"
    }, {
      text: "Missing 'data-chart-id', 'data-wow-class' or 'data-wow-spec'. See <a href=\"https://github.com/Bloodmallet/bloodmallet_web_frontend/wiki/How-to-import-charts\">wiki</a>"
    });
  }

  function b(e) {
    return e.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }

  function x(r) {
    if ("highcharts" == r.chart_engine || "highcharts_old" == r.chart_engine) {
      var _i14 = "https://bloodmallet.com/";
      if (void 0 !== r.chart_id ? _i14 += "chart/" + r.chart_id : void 0 !== r.wow_class && void 0 !== r.wow_spec && void 0 !== r.data_type && (_i14 += "chart/" + r.wow_class + "/" + r.wow_spec + "/" + r.data_type), "secondary_distributions" === r.data_type) return {
        accessibility: {
          enabled: !1
        },
        credits: {
          enabled: !1
        },
        chart: {
          renderTo: "scatter_plot_chart",
          type: "scatter3d",
          backgroundColor: null,
          animation: !1,
          height: 800,
          width: 800,
          options3d: {
            enabled: !0,
            alpha: 10,
            beta: 30,
            depth: 800,
            fitToPlot: !1
          }
        },
        legend: {
          enabled: !0,
          backgroundColor: r.background_color,
          borderColor: r.font_color,
          borderWidth: 1,
          align: "right",
          verticalAlign: "middle",
          layout: "vertical",
          itemStyle: {
            color: r.font_color
          },
          itemHoverStyle: {
            color: r.font_color
          }
        },
        plotOptions: {
          series: {
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: r.font_color,
                fontSize: r.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color,
            fontSize: r.font_size
          }
        },
        tooltip: {
          headerFormat: "",
          pointFormatter: function pointFormatter() {
            return '<table class="">                <thead>                  <tr>                    <th scope="col"></th>                    <th scope="col">Absolute</th>                    <th scope="col">Relative</th>                  </tr>                </thead>                <tbody>                  <tr>                    <th scope="row">DPS</th>                    <td>' + Intl.NumberFormat().format(this.dps) + "</td>                    <td>" + Math.round(this.dps / this.dps_max * 1e4) / 100 + '%</td>                  </tr>                  <tr>                    <th scope="row">Crit</th>                    <td>' + Intl.NumberFormat().format(this.stat_crit) + "</td>                    <td>" + this.name.split("_")[0] + '%</td>                  </tr>                  <tr>                    <th scope="row">Haste</th>                    <td>' + Intl.NumberFormat().format(this.stat_haste) + "</td>                    <td>" + this.name.split("_")[1] + '%</td>                  </tr>                  <tr>                    <th scope="row">Mastery</th>                    <td>' + Intl.NumberFormat().format(this.stat_mastery) + "</td>                    <td>" + this.name.split("_")[2] + '%</td>                  </tr>                  <tr>                    <th scope="row">Versatility</th>                    <td>' + Intl.NumberFormat().format(this.stat_vers) + "</td>                    <td>" + this.name.split("_")[3] + "%</td>                  </tr>                </tbody>              </table>";
          },
          useHTML: !0,
          borderColor: r.background_color
        },
        xAxis: {
          min: 0,
          max: 80,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        yAxis: {
          min: -10,
          max: 70,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        zAxis: {
          min: 10,
          max: 90,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          reversed: !0,
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        }
      };
      if ("talent_target_scaling" === r.data_type) return {
        accessibility: {
          enabled: !1
        },
        credits: {
          href: _i14,
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        chart: {
          backgroundColor: null,
          animation: !1
        },
        colors: e,
        legend: {
          enabled: !0,
          backgroundColor: r.background_color,
          borderColor: r.font_color,
          borderWidth: 1,
          align: "center",
          verticalAlign: "top",
          layout: "horizontal",
          itemStyle: {
            color: r.font_color
          },
          itemHoverStyle: {
            color: r.font_color
          }
        },
        plotOptions: {
          series: {
            connectNulls: !0,
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: r.font_color,
                fontSize: r.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color,
            fontSize: r.font_size
          }
        },
        xAxis: {
          tickInterval: 1,
          title: {
            text: "Target count",
            style: {
              color: o
            }
          },
          labels: {
            enabled: !0,
            style: {
              color: o
            }
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        yAxis: {
          title: {
            text: "DPS",
            style: {
              color: o
            }
          },
          labels: {
            enabled: !0,
            style: {
              color: o
            }
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        }
      };
      var _n5 = r.background_color,
          _s2 = r.axis_color,
          _d4 = r.font_color,
          _u2 = {
        accessibility: {
          enabled: !1
        },
        chart: {
          type: "bar",
          backgroundColor: t,
          style: {
            fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"'
          }
        },
        colors: e,
        credits: {
          href: _i14,
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        legend: {
          align: "right",
          backgroundColor: t,
          borderColor: a,
          borderWidth: 1,
          floating: !1,
          itemMarginBottom: 3,
          itemMarginTop: 0,
          layout: "vertical",
          reversed: !0,
          shadow: !1,
          verticalAlign: "middle",
          x: 0,
          y: 0,
          itemStyle: {
            color: o
          },
          itemHoverStyle: {
            color: o
          },
          title: {
            text: " ",
            style: {
              color: o
            }
          },
          symbolRadius: 0
        },
        plotOptions: {
          series: {
            stacking: "normal",
            borderColor: t,
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            },
            style: {
              textOutline: !1,
              fontSize: l
            },
            point: {
              events: {
                click: function click(e) {
                  var t = this.series.yAxis;
                  t.removePlotLine("helperLine"), t.addPlotLine({
                    value: this.stackY,
                    color: r.font_color,
                    width: 2,
                    id: "helperLine",
                    zIndex: 5,
                    label: {
                      text: this.series.name + " " + this.category,
                      style: {
                        color: r.font_color,
                        fontSize: l
                      },
                      align: "left",
                      verticalAlign: "bottom",
                      rotation: 0,
                      y: -5
                    }
                  });
                }
              }
            }
          }
        },
        series: [],
        title: {
          text: "Loading data...",
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        subtitle: {
          text: '...from <a href="https://bloodmallet.com">bloodmallet</a>',
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        tooltip: {
          headerFormat: "<b>{point.x}</b>",
          shared: !0,
          backgroundColor: t,
          borderColor: a,
          style: {
            color: o,
            fontSize: l
          },
          useHTML: !0
        },
        xAxis: {
          categories: [],
          labels: {
            useHTML: !0,
            style: {
              color: o,
              fontSize: l
            }
          },
          gridLineWidth: 0,
          gridLineColor: a,
          lineColor: a,
          tickColor: a
        },
        yAxis: [{
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === r.value_style ? c : h,
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }, {
          linkedTo: 0,
          opposite: !0,
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === r.value_style ? c : h,
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }]
      };
      return _u2.chart.backgroundColor = _n5, _u2.legend.backgroundColor = _n5, _u2.legend.borderColor = _s2, _u2.legend.itemStyle.color = _d4, _u2.legend.itemHoverStyle.color = _d4, _u2.title.style.color = _d4, _u2.subtitle.style.color = _d4, _u2.tooltip.formatter = function () {
        var e = document.createElement("div");
        e.style.margin = "-4px -7px -7px -7px", e.style.padding = "3px 3px 6px 3px", e.style.backgroundColor = "transparent" !== _n5 ? _n5 : t, "highcharts_old" === r.chart_engine && (e.style.margin = "-7px");
        var o = document.createElement("div");
        e.appendChild(o), o.style.marginLeft = "9px", o.style.marginRight = "9px", o.style.marginBottom = "6px", o.style.fontWeight = "700", o.innerHTML = this.x;
        var a = 0;

        for (var l = this.points.length - 1; l >= 0; l--) {
          a += this.points[l].y;

          var _t21 = void 0,
              _o13 = !1,
              _i15 = 0;

          var _iteratorNormalCompletion11 = true;
          var _didIteratorError11 = false;
          var _iteratorError11 = undefined;

          try {
            for (var _iterator11 = this.points[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
              var _e17 = _step11.value;
              0 !== _e17.y && 0 !== _i15 && _i15 !== _e17.y ? _o13 = !0 : 0 !== _e17.y && 0 === _i15 && (_i15 = _e17.y);
            }
          } catch (err) {
            _didIteratorError11 = true;
            _iteratorError11 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion11 && _iterator11.return != null) {
                _iterator11.return();
              }
            } finally {
              if (_didIteratorError11) {
                throw _iteratorError11;
              }
            }
          }

          if ("talents" !== r.data_type) {
            var _e16 = new DOMParser().parseFromString(this.x, "text/html").body.firstChild.innerText;

            if (!r.data.data.hasOwnProperty(_e16)) {
              var _t22 = void 0;

              var _arr8 = Object.keys(r.data.data);

              for (var _i16 = 0; _i16 < _arr8.length; _i16++) {
                var _o15 = _arr8[_i16];
                _o15.slice(_o15.indexOf("} ") + 2) === _e16 && (_t22 = _o15);
              }

              void 0 !== _t22 && (_e16 = _t22);
            }

            void 0 === _e16 && (_e16 = this.x);

            var _o14 = L(_e16, r.data, r);

            r.data.data.hasOwnProperty(_o14) && (_t21 = r.data.data[_o14].hasOwnProperty(this.points[l].series.name));
          }

          if (0 !== this.points[l].y || _t21) {
            var _t23 = document.createElement("div");

            e.appendChild(_t23);

            var _o16 = document.createElement("span");

            _t23.appendChild(_o16), _o16.style.marginLeft = "9px", _o16.style.borderLeft = "9px solid " + this.points[l].series.color, _o16.style.paddingLeft = "4px", Number.isInteger(this.points[l].series.name) && _o16.appendChild(document.createTextNode(this.points[l].series.name + ":"));
            var _i17 = "";
            ["soulbinds", "races", "talents"].includes(r.data_type) ? _i17 = "" : "relative" === r.value_style && (_i17 = "%"), _t23.appendChild(document.createTextNode("Â Â " + Intl.NumberFormat().format(a) + _i17));
          }
        }

        return e.outerHTML;
      }, _u2.tooltip.backgroundColor = "transparent" !== _n5 ? _n5 : t, _u2.tooltip.borderColor = _s2, _u2.tooltip.style.color = _d4, _u2.xAxis.labels.style.color = _d4, _u2.xAxis.gridLineColor = _s2, _u2.xAxis.lineColor = _s2, _u2.xAxis.tickColor = _s2, _u2.yAxis[0].labels.style.color = _s2, _u2.yAxis[0].stackLabels.style.color = _d4, _u2.yAxis[0].gridLineColor = _s2, _u2.yAxis[0].lineColor = _s2, _u2.yAxis[0].tickColor = _s2, _u2.yAxis[0].title.style.color = _s2, _u2.yAxis[1].labels.style.color = _s2, _u2.yAxis[1].stackLabels.style.color = _d4, _u2.yAxis[1].gridLineColor = _s2, _u2.yAxis[1].lineColor = _s2, _u2.yAxis[1].tickColor = _s2, _u2.yAxis[1].title.style.color = _s2, _u2.credits.style.color = _d4, _u2;
    }
  }

  function w(e, t) {
    if (!["bloodmallet.com", "127.0.0.1:8000"].includes(window.location.host)) return;

    if (["trinkets", "covenants", "conduits", "soulbind_nodes", "windfury_totem"].includes(e.data_type)) {
      var _e18 = document.getElementById("value_style_switch");

      null != _e18 && (_e18.hidden = !1);
    }

    var o = document.getElementById("meta-info");
    null != o && (o.hidden = !1);

    for (var _e19 in t.simc_settings) {
      var _o17 = document.createTextNode(t.simc_settings[_e19]),
          _a17 = document.getElementById("c_" + _e19);

      null != _a17 && (_a17.innerText = "", _a17.appendChild(_o17));
    }

    var a = document.createElement("a");
    a.href = "https://github.com/simulationcraft/simc/commit/" + t.simc_settings.simc_hash, a.innerText = t.simc_settings.simc_hash.substring(0, 7);
    var l = document.getElementById("c_simc_hash");

    if (null != l && (l.innerText = "", l.appendChild(a)), Object.keys(t).indexOf("profile") > -1) {
      for (var _e20 in t.profile.character) {
        try {
          var _o19 = document.getElementById("c_" + _e20);

          if (null != _o19) {
            var _a19 = void 0;

            _o19.innerHTML = "", _a19 = "soulbind" === _e20 ? document.createTextNode(t.profile.character[_e20].replaceAll(",", " ").replaceAll("/", " ")) : document.createTextNode(t.profile.character[_e20].split(" ").map(function (e) {
              return e[0].toUpperCase() + e.substring(1);
            }).join(" ")), _o19.appendChild(_a19);
          }
        } catch (e) {}
      }

      var _o18 = void 0 !== t.profile.character.talents ? t.profile.character.talents : "0000000";

      var _a18 = document.getElementById("c_talents");

      null != _a18 && (_a18.innerHTML = "", _a18.appendChild(k(_o18, "base")));

      for (var _o20 in t.profile.items) {
        var _a20 = document.createElement("a");

        _a20.href = "", _a20.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", _a20.href += "item=" + t.profile.items[_o20].id;
        var _l12 = [];

        try {
          _l12.push("bonus=" + t.profile.items[_o20].bonus_id.split("/").join(":"));
        } catch (e) {}

        try {
          t.profile.items[_o20].hasOwnProperty("ilevel") && _l12.push("ilvl=" + t.profile.items[_o20].ilevel);
        } catch (e) {}

        _l12.length > 0 && (_a20.href += "?" + _l12.join("&")), _a20.dataset.whIconSize = "medium";

        var _r11 = document.getElementById("c_" + _o20);

        null != _r11 && (_r11.innerHTML = "", _r11.appendChild(_a20));
      }
    } else {
      var _e21 = document.getElementById("character-profile-label");

      null != _e21 && (_e21.hidden = !0);
    }

    if (["tier_set", "talent_target_scaling"].indexOf(e.data_type) > -1) {
      var _e22 = document.getElementById("post_chart");

      null != _e22 && (_e22.hidden = !1);

      var _o21 = document.getElementById("talent-information-div");

      if (null != _o21 && "" === _o21.textContent) {
        var _arr9 = Object.keys(t.data_profile_overrides);

        for (var _i18 = 0; _i18 < _arr9.length; _i18++) {
          var _e23 = _arr9[_i18];

          var _a21 = t.data_profile_overrides[_e23],
              _l13 = t.sorted_data_keys.indexOf(_e23);

          var _r12 = document.createElement("h3");

          _r12.appendChild(document.createTextNode(_e23)), _r12.id = "override-profile-" + _l13, _o21.appendChild(_r12);
          var _i19 = "";
          var _iteratorNormalCompletion12 = true;
          var _didIteratorError12 = false;
          var _iteratorError12 = undefined;

          try {
            for (var _iterator12 = _a21[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
              var _e24 = _step12.value;
              _e24.startsWith("talents=") && (_i19 = _e24.split("=")[1]);
            }
          } catch (err) {
            _didIteratorError12 = true;
            _iteratorError12 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion12 && _iterator12.return != null) {
                _iterator12.return();
              }
            } finally {
              if (_didIteratorError12) {
                throw _iteratorError12;
              }
            }
          }

          var _n6 = k(_i19, _e23);

          _o21.appendChild(_n6);
        }
      }
    }

    if ("soulbinds" === e.data_type) {
      var _o22 = document.getElementById("post_chart");

      _o22.hidden = !1, _o22.innerHTML = "", Object.keys(t.covenant_ids).forEach(function (a) {
        var l = t.covenant_ids[a];
        var r = document.createElement("h3");
        r.appendChild(document.createTextNode(O(a, t, e))), _o22.appendChild(r);
        var i = 0;
        var n = t.sorted_data_keys;
        var _iteratorNormalCompletion13 = true;
        var _didIteratorError13 = false;
        var _iteratorError13 = undefined;

        try {
          for (var _iterator13 = n[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
            var _a22 = _step13.value;

            if (t.covenant_mapping[_a22].indexOf(l) > -1) {
              i += 1;

              var _l14 = document.createElement("h4");

              _l14.appendChild(document.createTextNode(i + ". " + O(_a22, t, e))), _l14.classList += "ml-3", _l14.id = _a22, _o22.appendChild(_l14);

              var _r13 = document.createElement("p");

              _r13.classList += "ml-5";
              var _n7 = [];

              var _s3 = A(t.data[_a22], Math.max.apply(Math, _toConsumableArray(Object.values(t.data[_a22])))).split("+");

              var _iteratorNormalCompletion14 = true;
              var _didIteratorError14 = false;
              var _iteratorError14 = undefined;

              try {
                for (var _iterator14 = _s3[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                  var _o23 = _step14.value;

                  var _a23 = document.createElement("a");

                  _a23.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", t.hasOwnProperty("spell_ids") && t.spell_ids.hasOwnProperty(_o23) && (_a23.href += "spell=" + t.spell_ids[_o23] + "/" + b(_o23)), _a23.appendChild(document.createTextNode(O(_o23, t, e))), _n7.push(_a23);
                }
              } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion14 && _iterator14.return != null) {
                    _iterator14.return();
                  }
                } finally {
                  if (_didIteratorError14) {
                    throw _iteratorError14;
                  }
                }
              }

              for (var _e25 = 0; _e25 < _n7.length; _e25++) {
                0 !== _e25 && _r13.appendChild(document.createTextNode(", ")), _r13.appendChild(_n7[_e25]);
              }

              _o22.appendChild(_r13);
            }
          }
        } catch (err) {
          _didIteratorError13 = true;
          _iteratorError13 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion13 && _iterator13.return != null) {
              _iterator13.return();
            }
          } finally {
            if (_didIteratorError13) {
              throw _iteratorError13;
            }
          }
        }
      }), setTimeout(function () {
        Object.keys(t.covenant_ids).forEach(function (a) {
          var l = t.covenant_ids[a];
          var r = document.createElement("h3");
          r.appendChild(document.createTextNode(O(a, t, e))), _o22.appendChild(r);
          var i = 0;
          var n = t.sorted_data_keys;
          var _iteratorNormalCompletion15 = true;
          var _didIteratorError15 = false;
          var _iteratorError15 = undefined;

          try {
            var _loop = function _loop() {
              var r = _step15.value;

              if (t.covenant_mapping[r].indexOf(l) > -1) {
                i += 1;

                var _l15 = document.createElement("h4");

                _l15.appendChild(document.createTextNode(i + ". " + O(r, t, e))), _l15.classList += "ml-3", _l15.id = r, _o22.appendChild(_l15);

                var _n8 = Object.values(t.data[r]).sort(function (e, t) {
                  return t - e;
                }),
                    _d5 = _n8.map(function (e) {
                  return A(t.data[r], e);
                }),
                    _c3 = document.createElement("div"),
                    _h2 = Highcharts.chart(_c3, x(e));

                _h2.title.attr({
                  text: ""
                }), _h2.subtitle.attr({
                  text: ""
                });

                var _u3 = _d5.map(function (o) {
                  return o.split("+").reduce(function (o, a) {
                    var l = document.createElement("a");
                    return l.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", l.href += "spell=" + t.spell_ids[a] + "/" + b(a), o + l.outerHTML;
                  }, "");
                });

                _h2.update({
                  xAxis: {
                    categories: _u3,
                    labels: {
                      step: 1
                    }
                  }
                }, !1), _h2.addSeries({
                  data: _n8,
                  color: s[a].color,
                  showInLegend: !1
                }, !1), _o22.appendChild(_c3), _h2.redraw(), setTimeout(function () {
                  _c3.style.height = 200 + 30 * _d5.length + "px", _h2.setSize(void 0, _c3.style.height);
                }, 100);
              }
            };

            for (var _iterator15 = n[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
              _loop();
            }
          } catch (err) {
            _didIteratorError15 = true;
            _iteratorError15 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion15 && _iterator15.return != null) {
                _iterator15.return();
              }
            } finally {
              if (_didIteratorError15) {
                throw _iteratorError15;
              }
            }
          }
        });
      }, 5);
    }

    if ("trinkets" === e.data_type) {
      var _e26 = document.getElementById("filter-itemlevels-options");

      if (null != _e26) {
        _e26.innerHTML = "";

        var _o25 = document.getElementById("chart");

        var _iteratorNormalCompletion16 = true;
        var _didIteratorError16 = false;
        var _iteratorError16 = undefined;

        try {
          for (var _iterator16 = t.simulated_steps[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
            var _a24 = _step16.value;

            var _t24 = "step_" + _a24,
                _l16 = document.createElement("div");

            _l16.className += " form-check";

            var _r14 = document.createElement("input");

            _r14.className += " form-check-input", _r14.className += " filter-itemlevels", _r14.type = "checkbox", _r14.id = _t24, _r14.value = _a24, void 0 === _o25.dataset.filterItemlevels ? _r14.checked = !0 : _r14.checked = -1 === _o25.dataset.filterItemlevels.split(";").indexOf(_a24.toString()), _l16.appendChild(_r14);

            var _i20 = document.createElement("label");

            _i20.className = " form-check-label", _i20.htmlFor = _t24, _i20.appendChild(document.createTextNode(_a24)), _l16.appendChild(_i20), _e26.appendChild(_l16), _r14.addEventListener("change", function (e, t) {
              v(e.target.value, e.target.checked), bloodmallet_chart_import();
            });
          }
        } catch (err) {
          _didIteratorError16 = true;
          _iteratorError16 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion16 && _iterator16.return != null) {
              _iterator16.return();
            }
          } finally {
            if (_didIteratorError16) {
              throw _iteratorError16;
            }
          }
        }
      }

      var _o24 = document.getElementById("filter-sources-options");

      if (null != _o24) {
        _o24.innerHTML = "";

        var _e27 = Object.values(t.data_sources).filter(function (e, t, o) {
          return o.indexOf(e) === t;
        }).sort();

        var _iteratorNormalCompletion17 = true;
        var _didIteratorError17 = false;
        var _iteratorError17 = undefined;

        try {
          for (var _iterator17 = _e27[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
            var _t25 = _step17.value;

            var _e28 = "step_" + _t25.replaceAll(" ", "_"),
                _a25 = document.createElement("div");

            _a25.className += " form-check";

            var _l17 = document.createElement("input");

            _l17.className += " form-check-input", _l17.className += " filter-sources", _l17.type = "checkbox", _l17.id = _e28, _l17.value = _t25, void 0 === chart.dataset.filterSources ? _l17.checked = !0 : _l17.checked = -1 === chart.dataset.filterSources.split(";").indexOf(_t25.toString()), _a25.appendChild(_l17);

            var _r15 = document.createElement("label");

            _r15.className = " form-check-label", _r15.htmlFor = _e28, _r15.appendChild(document.createTextNode(_t25)), _a25.appendChild(_r15), _o24.appendChild(_a25), _l17.addEventListener("change", function (e, t) {
              C(e.target.value, e.target.checked), bloodmallet_chart_import();
            });
          }
        } catch (err) {
          _didIteratorError17 = true;
          _iteratorError17 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion17 && _iterator17.return != null) {
              _iterator17.return();
            }
          } finally {
            if (_didIteratorError17) {
              throw _iteratorError17;
            }
          }
        }
      }
    }

    try {
      $WowheadPower.refreshLinks();
    } catch (e) {}
  }

  function v(e, t) {
    var o = document.getElementById("chart"),
        a = o.dataset.filterItemlevels;
    t ? o.dataset.filterItemlevels = a.split(";").filter(function (t) {
      return t !== e;
    }).join(";") : void 0 === a || 0 === a.length ? o.dataset.filterItemlevels = e : o.dataset.filterItemlevels = a + ";" + e;
  }

  function C(e, t) {
    var o = document.getElementById("chart"),
        a = o.dataset.filterSources;
    t ? o.dataset.filterSources = a.split(";").filter(function (t) {
      return t !== e;
    }).join(";") : void 0 === a || 0 === a.length ? o.dataset.filterSources = e : o.dataset.filterSources = a + ";" + e;
  }

  function k(e, t) {
    var o = document.createElement("iframe");
    return o.title = t, o.width = 760, o.height = 475, o.src = "https://www.raidbots.com/simbot/render/talents/" + e + "?width=750", o;
  }

  function O(e, t, o) {
    var a = "";

    try {
      a = t.translations[e][n[o.language]];
    } catch (t) {
      r, a = e;
    }

    return void 0 === a && (a = e), a;
  }

  function A(e, t) {
    return Object.keys(e).find(function (o) {
      return e[o] === t;
    });
  }

  function L(e, t, o) {
    var _arr10 = Object.keys(t.translations);

    for (var _i21 = 0; _i21 < _arr10.length; _i21++) {
      var _a26 = _arr10[_i21];
      if (n[o.language] === A(t.translations[_a26], e)) return _a26;
    }

    return e;
  }

  this.init_charts = new function () {
    var e = document.querySelectorAll("div.bloodmallet_chart"),
        l = [];

    for (var _t26 = 0; _t26 < e.length; _t26++) {
      var _o26 = e[_t26];
      if (l.indexOf(_o26.id) > -1) return void console.error("Multiple Elements use the same ID ('" + _o26.id + "'). Aborting bloodmallet_chart_import.js.");
      l.push(_o26.id);
    }

    for (var _l18 = 0; _l18 < e.length; _l18++) {
      var _i22 = void 0;

      try {
        _i22 = e[_l18].id;
      } catch (e) {
        return void console.error("Each .bloodmallet_chart needs an ID. Aborting bloodmallet_chart_import.js.");
      }

      var _n9 = document.getElementById(e[_l18].id);

      if (_n9) {
        var _e29 = {
          chart_id: void 0,
          wow_class: void 0,
          wow_spec: void 0,
          data_type: "trinkets",
          fight_style: "castingpatchwerk",
          covenant: "Kyrian",
          axis_color: a,
          background_color: t,
          font_color: o,
          limit: 7,
          chart_engine: "highcharts",
          tooltip_engine: "wowhead",
          language: "en",
          value_style: "absolute",
          talent_target_scaling_min_target_count: -1,
          talent_target_scaling_max_target_count: -1,
          html_element: _n9
        };

        try {
          void 0 !== bloodmallet.style.axis_color && (_e29.axis_color = bloodmallet.style.axis_color), void 0 !== bloodmallet.style.background_color && (_e29.background_color = bloodmallet.style.background_color), void 0 !== bloodmallet.style.font_color && (_e29.font_color = bloodmallet.style.font_color), void 0 !== bloodmallet.settings.entries && (_e29.limit = bloodmallet.settings.entries), void 0 !== bloodmallet.settings.chart_engine && (_e29.chart_engine = bloodmallet.settings.chart_engine), void 0 !== bloodmallet.settings.tooltip_engine && (_e29.tooltip_engine = bloodmallet.settings.tooltip_engine), void 0 !== bloodmallet.settings.language && (_e29.language = bloodmallet.settings.language), void 0 !== bloodmallet.settings.value_style && (_e29.value_style = bloodmallet.settings.value_style);
        } catch (e) {
          r;
        }

        _n9.getAttribute("data-entries") && (_e29.limit = _n9.getAttribute("data-entries")), _n9.getAttribute("data-fight-style") && (_e29.fight_style = _n9.getAttribute("data-fight-style")), _n9.getAttribute("data-type") && (_e29.data_type = _n9.getAttribute("data-type")), _n9.getAttribute("data-covenant") && (_e29.covenant = _n9.getAttribute("data-covenant")), _n9.getAttribute("data-background-color") && (_e29.background_color = _n9.getAttribute("data-background-color")), _n9.getAttribute("data-font-color") && (_e29.font_color = _n9.getAttribute("data-font-color")), _n9.getAttribute("data-axis-color") && (_e29.axis_color = _n9.getAttribute("data-axis-color")), _n9.getAttribute("data-tooltip-engine") && (_e29.tooltip_engine = _n9.getAttribute("data-tooltip-engine")), _n9.getAttribute("data-chart-engine") && (_e29.chart_engine = _n9.getAttribute("data-chart-engine")), _n9.getAttribute("data-language") && (_e29.language = _n9.getAttribute("data-language")), _n9.getAttribute("data-value-style") && (_e29.value_style = _n9.getAttribute("data-value-style")), _n9.getAttribute("data-talent-target-scaling-min-target-count") && (_e29.talent_target_scaling_min_target_count = parseInt(_n9.getAttribute("data-talent-target-scaling-min-target-count"))), _n9.getAttribute("data-talent-target-scaling-max-target-count") && (_e29.talent_target_scaling_max_target_count = parseInt(_n9.getAttribute("data-talent-target-scaling-max-target-count")));

        var _l19 = !0;

        _n9.getAttribute("data-chart-id") ? _e29.chart_id = _n9.getAttribute("data-chart-id") : (_n9.getAttribute("data-wow-class") || (console.error("Required 'data-chart-id' or 'data-wow-class' attribute wasn't found in " + _i22 + "."), _l19 = !1), _e29.wow_class = _n9.getAttribute("data-wow-class"), _n9.getAttribute("data-wow-spec") || (console.error("Required 'data-chart-id' or 'data-wow-spec' attribute wasn't found in " + _i22 + "."), _l19 = !1), _e29.wow_spec = _n9.getAttribute("data-wow-spec"));

        var _s4 = x(_e29),
            _d6 = !1;

        if ("highcharts" == _e29.chart_engine) try {
          _d6 = Highcharts.chart(_i22, _s4);
        } catch (e) {
          return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        } else if ("highcharts_old" == _e29.chart_engine) try {
          var _e30 = _s4;
          _e30.chart.renderTo = _i22, _d6 = new Highcharts.Chart(_e30);
        } catch (e) {
          return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        }
        _l19 ? u(_e29) : y(_d6), setTimeout(p, 1, _e29, _n9, _d6, 0);
      }
    }
  }();
}

document.addEventListener("DOMContentLoaded", function () {
  bloodmallet_chart_import();
});