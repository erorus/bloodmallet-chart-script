"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function bloodmallet_chart_import() {
  var e = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
      t = "#343a40",
      o = "#f8f9fa",
      a = "#828282",
      l = "1.1rem",
      i = !1,
      r = "https://bloodmallet.com/chart/get/",
      n = {
    cn: "cn_CN",
    en: "en_US",
    de: "de_DE",
    es: "es_ES",
    fr: "fr_FR",
    it: "it_IT",
    ko: "ko_KR",
    pt: "pt_BR",
    ru: "ru_RU",
    "zh-hans": "cn_CN"
  },
      s = {
    Kyrian: {
      id: 1,
      color: "#69ccf0"
    },
    Venthyr: {
      id: 2,
      color: "#c41f3b"
    },
    "Night Fae": {
      id: 3,
      color: "#a330c9"
    },
    Necrolord: {
      id: 4,
      color: "#abd473"
    }
  },
      d = {
    1: 145,
    2: 158,
    3: 171,
    4: 184,
    5: 200,
    6: 213,
    7: 226,
    8: 239,
    9: 252,
    10: 265,
    11: 278
  },
      c = {
    unholy: "#abd473",
    frost: "#69ccf0",
    blood: "#c41f3b"
  };

  function h(e) {
    i && console.log("load_data");
    var t = e.chart_id,
        o = e.data_type,
        a = e.fight_style,
        l = e.wow_class,
        n = e.wow_spec;

    try {
      if (u(e)) return;
    } catch (e) {
      i && (console.log("Data needs to be loaded."), console.log(e));
    }

    var s = o;
    s.indexOf("azerite") > -1 && (s = "azerite_traits");
    var d = a;
    d += "/" + l, d += "/" + n;
    var c = "";
    c = t ? r + t : r + s + "/" + d;
    var h = new XMLHttpRequest();
    i && console.log("Fetching data from: " + c), h.open("GET", c, !0), h.onload = function (t) {
      if (4 === h.readyState) if (200 === h.status) {
        var _t = JSON.parse(h.responseText);

        e.html_element.dataset.loadedData = h.responseText, i && (console.log(_t), console.log("Load and save finished."));
      } else console.error(h.statusText);
    }, h.onerror = function (e) {
      console.error("Fetching data from bloodmallet.com encountered an error, ", e);
    }, h.send(null);
  }

  function u(e) {
    return JSON.parse(e.html_element.dataset.loadedData);
  }

  function m(e, t, o, a) {
    i && console.log("update_chart");
    var l = e.data_type,
        r = e.limit,
        n = e.chart_engine,
        h = !1;

    try {
      h = u(e);
    } catch (l) {
      return void (a < 30 && setTimeout(m, 200, e, t, o, a + 1));
    }

    if (!0 === h.error || "error" === h.status) return function (e, t) {
      var o = e;

      if (o.innerHTML = "", "error" === t.status) {
        var _e = document.createElement("p");

        _e.innerText = t.message, o.appendChild(_e);
      } else {
        var _e2 = document.createElement("p");

        _e2.innerText = "An error occured during simulation.", o.appendChild(_e2);

        var _a = document.createElement("ul"),
            _l = document.createElement("li");

        _l.textContent = "Title: " + (t.title ? t.title : "~"), _a.appendChild(_l);

        var _i = document.createElement("li");

        _i.textContent = "Spec: " + t.wow_spec + " " + t.wow_class, _a.appendChild(_i);

        var _r = document.createElement("li");

        _r.textContent = "Type: " + t.simulation_type, _a.appendChild(_r);

        var _n = document.createElement("li");

        _n.textContent = "Fight style: " + t.fight_style, _a.appendChild(_n);

        var _s = document.createElement("li");

        _s.textContent = "ID: " + t.id, _a.appendChild(_s);

        var _d = document.createElement("li");

        _d.textContent = "Custom profile:", _a.appendChild(_d), _d.appendChild(document.createElement("br"));

        var _c = document.createElement("textarea");

        _c.readOnly = !0, _c.value = t.custom_profile, _c.placeholder = "No custom profile", _c.style.width = "100%", _d.appendChild(_c);

        var _h = document.createElement("li");

        _h.textContent = "Log:", _a.appendChild(_h), _h.appendChild(document.createElement("br"));

        var _u = document.createElement("textarea");

        _u.readOnly = !0, _u.value = t.log, _u.placeholder = "No log available", _u.style.width = "100%", _h.appendChild(_u), o.appendChild(_a);
      }
    }(t, h);
    if (wow_class = h.simc_settings.class, wow_spec = h.simc_settings.spec, fight_style = h.simc_settings.fight_style, e.data_type = l = h.data_type, function (e, t) {
      if (!["bloodmallet.com", "127.0.0.1:8000"].includes(window.location.host)) return;
      i && console.log("provide_meta_data");
      ["trinkets", "covenants", "conduits", "soulbind_nodes", "legendaries", "soulbinds"].includes(e.data_type) && (document.getElementById("value_style_switch").hidden = !1);
      document.getElementById("meta-info").hidden = !1;

      for (var _e3 in t.simc_settings) {
        var _o = document.createTextNode(t.simc_settings[_e3]),
            _a2 = document.getElementById("c_" + _e3);

        _a2.innerText = "", _a2.appendChild(_o);
      }

      var o = document.createElement("a");
      o.href = "https://github.com/simulationcraft/simc/commit/" + t.simc_settings.simc_hash, o.innerText = t.simc_settings.simc_hash.substring(0, 7);
      var a = document.getElementById("c_simc_hash");
      a.innerText = "", a.appendChild(o);

      for (var _e4 in t.profile.character) {
        try {
          var _o2 = document.getElementById("c_" + _e4);

          _o2.innerHTML = "";

          var _a3 = void 0;

          _a3 = "soulbind" === _e4 ? document.createTextNode(t.profile.character[_e4].replaceAll(",", " ").replaceAll("/", " ")) : document.createTextNode(t.profile.character[_e4].split(" ").map(function (e) {
            return e[0].toUpperCase() + e.substring(1);
          }).join(" ")), _o2.appendChild(_a3);
        } catch (e) {}
      }

      var l = void 0 !== t.profile.character.talents ? t.profile.character.talents : "0000000";
      var r = document.getElementById("c_talents");
      r.innerHTML = "";

      for (var _o3 = 0; _o3 < l.length; _o3++) {
        var _a4 = l[_o3];

        var _i2 = document.createElement("a");

        _i2.href = "", _i2.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/";

        try {
          _i2.href += "spell=" + t.talent_data[parseInt(_o3) + 1][parseInt(_a4)].spell_id;
        } catch (e) {
          continue;
        }

        _i2.dataset.whIconSize = "medium", r.appendChild(_i2);
      }

      for (var _o4 in t.profile.items) {
        var _a5 = document.createElement("a");

        _a5.href = "", _a5.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", _a5.href += "item=" + t.profile.items[_o4].id;
        var _l2 = [];

        try {
          _l2.push("bonus=" + t.profile.items[_o4].bonus_id.split("/").join(":"));
        } catch (e) {}

        try {
          t.profile.items[_o4].hasOwnProperty("ilevel") && _l2.push("ilvl=" + t.profile.items[_o4].ilevel);
        } catch (e) {}

        _l2.length > 0 && (_a5.href += "?" + _l2.join("&")), _a5.dataset.whIconSize = "medium";

        var _i3 = document.getElementById("c_" + _o4);

        _i3.innerHTML = "", _i3.appendChild(_a5);
      }

      "talents" === e.data_type && (document.getElementById("talent-warning").hidden = !1, function (e, t) {
        i && console.log("build_talent_table");
        document.getElementById("talent-table").hidden = !1;
        var o = [];

        for (var _e5 = 1; _e5 < 8; _e5++) {
          for (var _t2 = 1; _t2 < 4; _t2++) {
            o.push(_e5.toString() + _t2.toString());
          }
        }

        for (var _i4 = 0; _i4 < o.length; _i4++) {
          var _a6 = _o5[_i4];

          var _o5 = document.getElementById(_a6);

          try {
            var _l3 = document.createElement("h5"),
                _r2 = t.talent_data[_a6.slice(0, 1)][_a6.slice(1, 2)];

            _l3.innerHTML = I(e, _r2.name, _a6, t), _o5.innerHTML = "", _o5.appendChild(_l3), _o5.appendChild(L("Mean", H(_a6, t))), _o5.appendChild(L("Min", M(_a6, t)[1], M(_a6, t)[0])), _o5.appendChild(L("Max", N(_a6, t)[1], N(_a6, t)[0]));

            var _n2 = z(_a6, t),
                _s2 = _n2.slice(0, _a6.slice(0, 1) - 1) + "0" + _n2.slice(_a6.slice(0, 1), 8),
                _d2 = t.data[_n2],
                _c2 = t.data[_s2];

            _o5.appendChild(L("Max dps", P(_c2, _d2), _n2)), _n2 = z(_a6, t);

            var _h2 = P(t.data[t.sorted_data_keys[0]], t.data[_n2]);

            _o5.appendChild(L("Max dps minus global best", _h2, _n2));
          } catch (e) {
            _o5.innerHTML = "-", i && console.warn(e);
          }
        }

        $(function () {
          $('[data-toggle="tooltip"]').tooltip();
        });
      }(e, t));

      if ("soulbinds" === e.data_type) {
        var _o6 = document.getElementById("post_chart");

        _o6.hidden = !1, _o6.innerHTML = "", Object.keys(t.covenant_ids).forEach(function (a) {
          var l = t.covenant_ids[a];
          var i = document.createElement("h3");
          i.appendChild(document.createTextNode(S(a, t, e))), _o6.appendChild(i);
          var r = 0;
          var n = w(e, _(e, t), t);
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = n[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _a7 = _step.value;

              if (t.covenant_mapping[_a7].indexOf(l) > -1) {
                r += 1;

                var _l4 = document.createElement("h4");

                _l4.appendChild(document.createTextNode(r + ". " + S(_a7, t, e))), _l4.classList += "ml-3", _l4.id = _a7, _o6.appendChild(_l4);

                var _i5 = document.createElement("p");

                _i5.classList += "ml-5";
                var _n3 = [];
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = y(e, _a7, t)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _o7 = _step2.value;

                    if (t.data.hasOwnProperty(_o7)) {
                      var _a8 = document.createElement("a");

                      _a8.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", t.hasOwnProperty("spell_ids") && t.spell_ids.hasOwnProperty(_o7) && (_a8.href += "spell=" + t.spell_ids[_o7] + "/" + C(_o7)), _a8.appendChild(document.createTextNode(S(_o7, t, e))), _n3.push(_a8);
                    }
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }

                for (var _e6 = 0; _e6 < _n3.length; _e6++) {
                  0 !== _e6 && _i5.appendChild(document.createTextNode(", ")), _i5.appendChild(_n3[_e6]);
                }

                _o6.appendChild(_i5);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      }

      if ("trinkets" === e.data_type) {
        var _e7 = document.getElementById("filter-itemlevels-options");

        _e7.innerHTML = "";

        var _o8 = document.getElementById("chart");

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = t.simulated_steps[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _a10 = _step3.value;

            var _t3 = "step_" + _a10,
                _l6 = document.createElement("div");

            _l6.className += " form-check";

            var _i6 = document.createElement("input");

            _i6.className += " form-check-input", _i6.className += " filter-itemlevels", _i6.type = "checkbox", _i6.id = _t3, _i6.value = _a10, void 0 === _o8.dataset.filterItemlevels ? _i6.checked = !0 : _i6.checked = -1 === _o8.dataset.filterItemlevels.split(";").indexOf(_a10.toString()), _l6.appendChild(_i6);

            var _r3 = document.createElement("label");

            _r3.className = " form-check-label", _r3.htmlFor = _t3, _r3.appendChild(document.createTextNode(_a10)), _l6.appendChild(_r3), _e7.appendChild(_l6), _i6.addEventListener("change", function (e, t) {
              E(e.target.value, e.target.checked), bloodmallet_chart_import();
            });
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        var _a9 = document.getElementById("filter-sources-options");

        _a9.innerHTML = "";

        var _l5 = Object.values(t.data_sources).filter(function (e, t, o) {
          return o.indexOf(e) === t;
        }).sort();

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = _l5[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _e8 = _step4.value;

            var _t4 = "step_" + _e8.replaceAll(" ", "_"),
                _l7 = document.createElement("div");

            _l7.className += " form-check";

            var _i7 = document.createElement("input");

            _i7.className += " form-check-input", _i7.className += " filter-sources", _i7.type = "checkbox", _i7.id = _t4, _i7.value = _e8, void 0 === _o8.dataset.filterSources ? _i7.checked = !0 : _i7.checked = -1 === _o8.dataset.filterSources.split(";").indexOf(_e8.toString()), _l7.appendChild(_i7);

            var _r4 = document.createElement("label");

            _r4.className = " form-check-label", _r4.htmlFor = _t4, _r4.appendChild(document.createTextNode(_e8)), _l7.appendChild(_r4), _a9.appendChild(_l7), _i7.addEventListener("change", function (e, t) {
              T(e.target.value, e.target.checked), bloodmallet_chart_import();
            });
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      try {
        $WowheadPower.refreshLinks();
      } catch (e) {}
    }(e, h), "secondary_distributions" === l) return function (e, t, o) {
      i && console.log("update_secondary_distribution_chart");
      var a = t.id,
          l = (e.chart_id, e.fight_style),
          r = e.wow_class,
          n = e.wow_spec,
          s = (e.chart_engine, !1);
      s = u(e), r = s.simc_settings.class, n = s.simc_settings.spec, l = s.simc_settings.fight_style;
      var d = A(e),
          c = !1;
      if ("highcharts" == e.chart_engine) try {
        c = Highcharts.chart(a, d);
      } catch (e) {
        return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
      } else if ("highcharts_old" == e.chart_engine) try {
        var _e9 = d;
        _e9.chart.renderTo = a, c = new Highcharts.Chart(_e9);
      } catch (e) {
        return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
      }
      o = void 0, o = c;
      var h = void 0;
      h = Object.keys(s.data)[0];

      var m = s.data[h][s.sorted_data_keys[h][0]],
          p = s.data[h][s.sorted_data_keys[h][s.sorted_data_keys[h].length - 1]],
          _ = x(100, 0, 100),
          g = x(0, 0, 100),
          f = {
        name: Intl.NumberFormat().format(m) + " DPS",
        color: "rgb(" + _[0] + "," + _[1] + "," + _[2] + ")",
        data: []
      };

      var _arr = Object.keys(s.data[h]);

      for (var _i8 = 0; _i8 < _arr.length; _i8++) {
        var _t5 = _arr[_i8];

        var _o9 = s.data[h][_t5],
            _a11 = x(_o9, p, m),
            _l8 = 1,
            _i9 = "#232227",
            _r5 = 5;

        m === _o9 && (_l8 = 3, _r5 = 8, _i9 = e.font_color);

        var _n4 = void 0;

        if (_t5.indexOf("70") > -1) switch (_n4 = {
          enabled: !0,
          allowOverlap: !0
        }, _t5.indexOf("70")) {
          case 0:
            _n4.format = "Crit", _n4.verticalAlign = "top";
            break;

          case 3:
            _n4.format = "Haste";
            break;

          case 6:
            _n4.format = "Mastery", _n4.verticalAlign = "top";
            break;

          case 9:
            _n4.format = "Versatility", _n4.verticalAlign = "top";
        }
        var _d3 = s.secondary_sum;

        var _c3 = parseInt(_t5.split("_")[0]),
            _u2 = parseInt(_t5.split("_")[1]),
            _2 = parseInt(_t5.split("_")[2]),
            _g = parseInt(_t5.split("_")[3]);

        f.data.push({
          x: Math.sqrt(3) / 2 * (_c3 + 1 / 3 * _u2),
          y: Math.sqrt(2 / 3) * _u2,
          z: _2 + .5 * _c3 + .5 * _u2,
          name: _t5,
          color: "rgb(" + _a11[0] + "," + _a11[1] + "," + _a11[2] + ")",
          dps: _o9,
          dps_max: m,
          dps_min: p,
          stat_crit: _c3 * _d3 / 100,
          stat_haste: _u2 * _d3 / 100,
          stat_mastery: _2 * _d3 / 100,
          stat_vers: _g * _d3 / 100,
          stat_sum: _d3,
          marker: {
            radius: _r5,
            lineColor: _i9,
            lineWidth: _l8
          },
          dataLabels: _n4
        });
      }

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      o.addSeries(f, !1), o.addSeries({
        name: Intl.NumberFormat().format(p) + " DPS",
        color: "rgb(" + g[0] + "," + g[1] + "," + g[2] + ")"
      }, !1);
      var b = s.timestamp,
          y = b.split("-")[0],
          w = b.split("-")[1],
          v = b.split("-")[2].split(" ")[0],
          k = b.split(" ")[1].split(":")[0],
          C = b.split(":")[1],
          E = "Last updated ",
          T = new Date() - new Date(Date.UTC(y, w - 1, v, k, C)),
          L = Math.floor(T / 24 / 3600 / 1e3);
      L > 0 && (E += "".concat(L, "d "));
      var O = Math.floor(T / 3600 / 1e3) - 24 * L;
      E += "".concat(O, "h ago"), o.redraw(), function (e) {
        function t(t) {
          var a = (t = o.pointer.normalize(t)).chartX,
              l = t.chartY,
              i = o.options.chart.options3d.alpha,
              r = o.options.chart.options3d.beta,
              n = 5;

          function s(e) {
            e = o.pointer.normalize(e), o.update({
              chart: {
                options3d: {
                  alpha: i + (e.chartY - l) / n,
                  beta: r + (a - e.chartX) / n
                }
              }
            }, void 0, void 0, !1);
          }

          o.unbindDragMouse = e.addEvent(document, "mousemove", s), o.unbindDragTouch = e.addEvent(document, "touchmove", s), e.addEvent(document, "mouseup", o.unbindDragMouse), e.addEvent(document, "touchend", o.unbindDragTouch);
        }

        e.addEvent(o.container, "mousedown", t), e.addEvent(o.container, "touchstart", t);
      }(Highcharts);
    }(e, t, o);
    "azerite_traits" === h.data_type ? -1 === l.indexOf("azerite_items") && (l = "azerite_traits_stacking") : l = h.data_type;
    var g = h;
    var f, b;
    if (l.indexOf("azerite_traits") > -1) {
      if ("azerite_traits_stacking" === l) "all" === e.azerite_tier ? f = g.sorted_data_keys_2.slice(0, r) : "1" === e.azerite_tier || "3" === e.azerite_tier ? f = g.sorted_azerite_tier_3_trait_stacking.slice(0, r) : "2" === e.azerite_tier && (f = g.sorted_azerite_tier_2_trait_stacking.slice(0, r)), b = g.data.baseline[g.simulated_steps[0]];else {
        if ("azerite_traits_itemlevel" !== l) return void console.log("Chart found, but unknown data-type detected.");
        "all" === e.azerite_tier ? f = g.sorted_data_keys.slice(0, r) : "1" === e.azerite_tier || "3" === e.azerite_tier ? f = g.sorted_azerite_tier_3_itemlevel.slice(0, r) : "2" === e.azerite_tier && (f = g.sorted_azerite_tier_2_itemlevel.slice(0, r)), b = g.data.baseline[g.simulated_steps[g.simulated_steps.length - 1]];
      }
    } else f = "soulbinds" === l ? "nodes" === e.chart_mode ? g["sorted_data_keys_" + C(e.covenant).replace("-", "_") + "_" + e.conduit_rank].slice(0, r) : g.sorted_data_keys[e.conduit_rank].slice(0, r) : g.sorted_data_keys.slice(0, r), b = ["races", "talents"].includes(l) ? 0 : ["soulbinds"].includes(l) && "nodes" === e.chart_mode ? g.data.baseline[e.covenant] : ["legendaries", "soulbind_nodes", "soulbinds", "covenants", "domination_shards"].includes(l) ? g.data.baseline : g.data.baseline[g.simulated_steps[g.simulated_steps.length - 1]];
    i && (console.log(f), console.log("Baseline dps: " + b));
    var O = [];

    if (O = "soulbinds" == l && "soulbinds" === e.chart_mode ? void 0 : g.simulated_steps, i && console.log("simulated_steps: " + O), "soulbinds" === l && "nodes" !== e.chart_mode && (f = w(e, _(e, g), g)), "trinkets" === l) {
      if (void 0 !== e.html_element.dataset.filterItemlevels) {
        var _t6 = e.html_element.dataset.filterItemlevels.split(";");

        O = O.filter(function (e) {
          return -1 === _t6.indexOf(e.toString());
        });
      }

      if (void 0 !== e.html_element.dataset.filterActivePassive) {
        var _t7 = e.html_element.dataset.filterActivePassive.split(";");

        var _o10 = [];
        _t7.map(function (e) {
          "active" === e ? _o10.push(!0) : "passive" === e && _o10.push(!1);
        }), f = f.filter(function (e) {
          return -1 === _o10.indexOf(g.data_active[e]);
        });
      }

      if (void 0 !== e.html_element.dataset.filterSources) {
        var _t8 = e.html_element.dataset.filterSources.split(";");

        f = f.filter(function (e) {
          return -1 === _t8.indexOf(g.data_sources[e]);
        });
      }
    }

    for (o.setTitle({
      text: g.title
    }, {
      text: g.subtitle
    }, !1); o.series[0];) {
      o.series[0].remove(!1);
    }

    var D = void 0;

    if (D = "talents" === l ? f.map(function (t) {
      var o = [];

      for (var _a12 = 0; _a12 < t.length; _a12++) {
        o.push(k(e, (_a12 + 1).toString() + t[_a12], g));
      }

      return o.join("");
    }) : f.map(function (t) {
      return k(e, t, g);
    }), i && console.log(D), "highcharts" == n ? o.update({
      xAxis: {
        categories: D
      }
    }, !1) : "highcharts_old" == n && o.xAxis[0].setCategories(D, !1), O) {
      var _t9 = {};

      for (var _o11 in g.data) {
        if (g.data.hasOwnProperty(_o11)) {
          var _a13 = g.data[_o11];
          _t9[_o11] = {};
          var _i10 = b;
          "conduits" === l ? _i10 = g.data.baseline[g.covenant_mapping[_o11]] : "soulbinds" === l && "nodes" === e.chart_mode && (_i10 = g.data.baseline[e.covenant]);

          for (var _l9 = O.length - 1; _l9 >= 0; _l9--) {
            var _r6 = O[_l9];

            var _n5 = _a13.hasOwnProperty(e.covenant) ? _a13[e.covenant] : _a13;

            Number.isInteger(_n5) ? (_t9[_o11][_r6] = _n5 - _i10, _i10 = _n5) : _n5.hasOwnProperty(_r6) ? (_t9[_o11][_r6] = _n5[_r6] - _i10, _i10 = _n5[_r6]) : _t9[_o11][_r6] = 0;
          }
        }
      }

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = O[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _a14 = _step5.value;
          var _i11 = [];

          for (var _o12 = 0; _o12 < f.length; _o12++) {
            var _l10 = f[_o12];

            _i11.push(v(e, _t9[_l10][_a14], b));
          }

          var _r7 = _a14;
          ["azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(l) > -1 ? _r7 = _a14.split("_")[1] : "azerite_traits_stacking" === l ? _r7 = _a14.split("_")[0] : "soulbinds" === l && "nodes" === e.chart_mode && (_r7 = d[_r7]), o.addSeries({
            data: _i11,
            name: _r7
          }, !1);
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    } else if (["legendaries", "soulbind_nodes", "covenants"].includes(l)) {
      var B = [];

      for (var _t10 = 0; _t10 < f.length; _t10++) {
        var _o13 = f[_t10],
            _a15 = g.data[_o13] - b;

        B.push(v(e, _a15, b));
      }

      o.addSeries({
        data: B,
        name: "Data",
        showInLegend: !1
      }, !1);
    } else if (["domination_shards"].includes(l)) {
      var _arr2 = Object.keys(c);

      for (var _i12 = 0; _i12 < _arr2.length; _i12++) {
        var _t11 = _arr2[_i12];
        var _a16 = [];

        for (var _o14 = 0; _o14 < f.length; _o14++) {
          var _l11 = f[_o14];

          if (g.shard_type[_l11] === _t11) {
            console.log(_l11);

            var _t12 = g.data[_l11] - b;

            _a16.push(v(e, _t12, b));
          } else _a16.push(v(e, 0, b));
        }

        o.addSeries({
          data: _a16,
          name: _t11,
          showInLegend: !0,
          color: c[_t11]
        }, !1);
      }
    } else if (["soulbinds"].includes(l) && "soulbinds" === e.chart_mode) {
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = Object.keys(s).sort().reverse()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var _t13 = _step6.value;
          var _a17 = s[_t13].id;
          var _l12 = [];

          for (var _t14 = 0; _t14 < f.length; _t14++) {
            var _o15 = f[_t14],
                _i13 = 0;
            g.covenant_mapping[_o15][0] === _a17 && (_i13 = p(e, _o15, g)), _l12.push(_i13);
          }

          o.addSeries({
            data: _l12,
            name: S(_t13, g, e),
            showInLegend: !0,
            color: s[_t13].color
          }, !1);
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    } else {
      B = [];

      for (var _t15 = 0; _t15 < f.length; _t15++) {
        var _o16 = f[_t15],
            _a18 = g.data[_o16];
        "soulbinds" === l && (_a18 = g.data[_o16][e.conduit_rank]), B.push(_a18);
      }

      o.addSeries({
        data: B,
        name: "DPS",
        showInLegend: !1
      }, !1);
    }

    ["trinkets", "azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(l) > -1 ? o.legend.title.attr({
      text: "Itemlevel"
    }) : "races" === l || "domination_shards" === l ? o.legend.title.attr({
      text: ""
    }) : "azerite_traits_stacking" === l ? o.legend.title.attr({
      text: "Trait count"
    }) : "soulbinds" === l && "nodes" === e.chart_mode && o.legend.title.attr({
      text: "Conduit Rank"
    }), o.redraw(), "highcharts_old" == n && o.reflow(), t.style.height = 200 + 30 * f.length + "px", "highcharts" == n && o.setSize(t.style.width, t.style.height), "wowdb" == e.tooltip_engine && setTimeout(function () {
      !function (e) {
        i && console.log("readd_wowdb_tooltips");

        try {
          CurseTips["wowdb-tooltip"].watchElements(document.getElementById(e).getElementsByTagName("a"));
        } catch (e) {
          console.log("Setting wowdb (CurseTips) tooltips failed. Error: ", e);
        }
      }(t.id);
    }, 1);
  }

  function p(e, t, o) {
    var a = g(t, o),
        l = f(e, t, o),
        i = o.data.baseline[a],
        r = b(e, t, l, o),
        n = r.indexOf(Math.max.apply(Math, _toConsumableArray(r)));
    return i + r[n];
  }

  function _(e, t) {
    return t.sorted_data_keys[e.conduit_rank].filter(function (o) {
      return t.renowns[o][0] <= e.renown;
    });
  }

  function g(e, t) {
    return covenant = Object.entries(t.covenant_ids).filter(function (o) {
      return o[1] === t.covenant_mapping[e][0];
    })[0][0];
  }

  function f(e, t, o) {
    return o.paths[t].slice(0, o.paths[t].length).map(function (a) {
      return a.filter(function (a, l) {
        return o.renowns[t][l] <= e.renown;
      });
    });
  }

  function b(e, t, o, a) {
    var l = g(t, a),
        i = a.data.baseline[l];
    return o.map(function (t) {
      var o = t.map(function (e, t) {
        return [e, t];
      }).filter(function (e) {
        return "Potency Conduit" === e[0];
      }).map(function (e) {
        return e[1];
      });
      return t.map(function (t, r) {
        var n = 0;

        try {
          n = a.data[t][l] - i;
        } catch (e) {}

        if ("Potency Conduit" === t) {
          var _t16 = "sorted_data_keys_" + C(l).replace("-", "_") + "_" + e.conduit_rank;

          n = a.data[a[_t16].filter(function (e) {
            return a.conduits.indexOf(e) > -1;
          })[o.indexOf(r)]][l][e.conduit_rank] - i;
        }

        return n;
      }).reduce(function (e, t) {
        return e + t;
      }, 0);
    });
  }

  function y(e, t, o) {
    var a = f(e, t, o),
        l = b(e, t, a, o),
        i = a[l.indexOf(Math.max.apply(Math, _toConsumableArray(l)))],
        r = i.map(function (e, t) {
      return [e, t];
    }).filter(function (e) {
      return "Potency Conduit" === e[0];
    }).map(function (e) {
      return e[1];
    });
    return i.map(function (t, a) {
      if ("Potency Conduit" === t) {
        var _t17 = "sorted_data_keys_" + C(covenant).replace("-", "_") + "_" + e.conduit_rank;

        return o[_t17].filter(function (e) {
          return o.conduits.indexOf(e) > -1;
        })[r.indexOf(a)];
      }

      return t;
    });
  }

  function w(e, t, o) {
    return t.map(function (t) {
      return [t, p(e, t, o)];
    }).sort(function (e, t) {
      return t[1] - e[1];
    }).map(function (e) {
      return e[0];
    });
  }

  function v(e, t, o) {
    return "absolute" === e.value_style ? t : "relative" === e.value_style ? Math.round(1e4 * t / o) / 100 : void console.error("Unknown value-style", e.value_style);
  }

  function x(e, t, o) {
    i && console.log("create_color");
    var a = [0, 255, 255],
        l = [255, 255, 0],
        r = [255, 0, 0],
        n = 0,
        s = 0;

    for (var _e10 = 0; _e10 < 3; _e10++) {
      n += Math.abs(r[_e10] - l[_e10]), s += Math.abs(l[_e10] - a[_e10]);
    }

    var d = t + (o - t) * (s / (s + n));

    if (e >= d) {
      var _t18 = (e - d) / (o - d);

      return [Math.floor(r[0] * _t18 + l[0] * (1 - _t18)), Math.floor(r[1] * _t18 + l[1] * (1 - _t18)), Math.floor(r[2] * _t18 + l[2] * (1 - _t18))];
    }

    {
      var _o17 = (e - t) / (d - t);

      return [Math.floor(l[0] * _o17 + a[0] * (1 - _o17)), Math.floor(l[1] * _o17 + a[1] * (1 - _o17)), Math.floor(l[2] * _o17 + a[2] * (1 - _o17))];
    }
  }

  function k(e, t, o) {
    if (i && (console.log("get_category_name"), console.log(t)), "wowhead" != e.tooltip_engine && "wowdb" != e.tooltip_engine) return S(t, o, e);
    if (["races"].includes(e.data_type)) return S(t, o, e);

    if (["soulbinds"].includes(e.data_type) && "soulbinds" === e.chart_mode) {
      var _a19 = '<a href="#' + t + '">';

      return _a19 += S(t, o, e), _a19 += "</a>";
    }

    if ("wowhead" == e.tooltip_engine) {
      var _a20 = document.createElement("a");

      if (_a20.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", o.hasOwnProperty("item_ids") && o.item_ids.hasOwnProperty(t)) {
        if (_a20.href += "item=" + o.item_ids[t] + "/" + C(t), o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
          _a20.href += "?azerite-powers=" + o.class_id;

          for (var _e11 = 0; _e11 < o.used_azerite_traits_per_item[t].length; _e11++) {
            var _l13 = o.used_azerite_traits_per_item[t][_e11];
            _a20.href += ":" + _l13.id;
          }
        }

        if (void 0 !== o.simulated_steps) {
          var _e12 = o.simulated_steps[o.simulated_steps.length - 1];
          "string" == typeof _e12 && _e12.indexOf("_") > -1 && (_e12 = _e12.split("_")[1]), _a20.href += "&ilvl=" + _e12;
        }
      } else if (o.hasOwnProperty("spell_ids") && o.spell_ids.hasOwnProperty(t)) _a20.href += "spell=" + o.spell_ids[t] + "/" + C(t);else if ("talents" === e.data_type) {
        if ("0" === t[1]) return t[1];
        _a20.href += "spell=" + o.talent_data[t[0]][t[1]].spell_id;
      }

      return "talents" === e.data_type ? _a20.appendChild(document.createTextNode(t[1])) : _a20.appendChild(document.createTextNode(S(t, o, e))), _a20.outerHTML;
    }

    if ("wowdb" == e.tooltip_engine) {
      var _a21 = document.createElement("a");

      _a21.href = "http://www.wowdb.com/";

      try {
        _a21.href += "items/" + o.item_ids[t];
      } catch (e) {
        i && (console.log(e), console.log("We're probably looking at a spell."));
      }

      if (_a21.href.indexOf("items") > -1) {
        var _e13 = o.simulated_steps[o.simulated_steps.length - 1];

        if ("string" == typeof _e13 && _e13.indexOf("_") > -1 && (_e13 = _e13.split("_")[1]), _a21.href += "?itemLevel=" + _e13, o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
          _a21.href += "&azerite=", _a21.href += o.class_id + ":0";

          for (var _e14 = 0; _e14 < o.used_azerite_traits_per_item[t].length; _e14++) {
            var _l15 = o.used_azerite_traits_per_item[t][_e14];
            _a21.href += ":" + _l15.id;
          }
        }
      }

      try {
        _a21.href += "spells/" + o.spell_ids[t];
      } catch (e) {
        i && (console.log(e), console.log("We're probably looking at an item."));
      }

      if ("talents" === e.data_type) {
        if ("0" === t[1]) return t[1];
        _a21.href += "spells/" + o.talent_data[t[0]][t[1]].spell_id;
      }

      _a21.dataset.tooltipHref = _a21.href;

      var _l14 = void 0;

      return _l14 = "talents" === e.data_type ? t[1] : S(t, o, e), _a21.appendChild(document.createTextNode(_l14)), _a21.outerHTML;
    }
  }

  function C(e) {
    return e.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }

  function A(r) {
    if (i && console.log("update_chart_style"), "highcharts" == r.chart_engine || "highcharts_old" == r.chart_engine) {
      if ("secondary_distributions" === r.data_type) return {
        chart: {
          renderTo: "scatter_plot_chart",
          type: "scatter3d",
          backgroundColor: null,
          animation: !1,
          height: 800,
          width: 800,
          options3d: {
            enabled: !0,
            alpha: 10,
            beta: 30,
            depth: 800,
            fitToPlot: !1
          }
        },
        legend: {
          enabled: !0,
          backgroundColor: r.background_color,
          borderColor: r.font_color,
          borderWidth: 1,
          align: "right",
          verticalAlign: "middle",
          layout: "vertical",
          itemStyle: {
            color: r.font_color
          },
          itemHoverStyle: {
            color: r.font_color
          }
        },
        plotOptions: {
          series: {
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: r.font_color,
                fontSize: r.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color,
            fontSize: r.font_size
          }
        },
        tooltip: {
          headerFormat: "",
          pointFormatter: function pointFormatter() {
            return '<table class="">                <thead>                  <tr>                    <th scope="col"></th>                    <th scope="col">Absolute</th>                    <th scope="col">Relative</th>                  </tr>                </thead>                <tbody>                  <tr>                    <th scope="row">DPS</th>                    <td>' + Intl.NumberFormat().format(this.dps) + "</td>                    <td>" + Math.round(this.dps / this.dps_max * 1e4) / 100 + '%</td>                  </tr>                  <tr>                    <th scope="row">Crit</th>                    <td>' + Intl.NumberFormat().format(this.stat_crit) + "</td>                    <td>" + this.name.split("_")[0] + '%</td>                  </tr>                  <tr>                    <th scope="row">Haste</th>                    <td>' + Intl.NumberFormat().format(this.stat_haste) + "</td>                    <td>" + this.name.split("_")[1] + '%</td>                  </tr>                  <tr>                    <th scope="row">Mastery</th>                    <td>' + Intl.NumberFormat().format(this.stat_mastery) + "</td>                    <td>" + this.name.split("_")[2] + '%</td>                  </tr>                  <tr>                    <th scope="row">Versatility</th>                    <td>' + Intl.NumberFormat().format(this.stat_vers) + "</td>                    <td>" + this.name.split("_")[3] + "%</td>                  </tr>                </tbody>              </table>";
          },
          useHTML: !0,
          borderColor: r.background_color
        },
        xAxis: {
          min: 0,
          max: 80,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        yAxis: {
          min: -10,
          max: 70,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        zAxis: {
          min: 10,
          max: 90,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          reversed: !0,
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        }
      };
      var _i14 = r.background_color,
          _n6 = r.axis_color,
          _s3 = r.font_color,
          _d4 = "https://bloodmallet.com/";
      void 0 !== r.chart_id ? _d4 += "chart/" + r.chart_id : void 0 !== r.wow_class && void 0 !== r.wow_spec && (_d4 += "#" + r.wow_class + "_" + r.wow_spec);
      var _c4 = {
        chart: {
          type: "bar",
          backgroundColor: t,
          style: {
            fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"'
          }
        },
        colors: e,
        credits: {
          href: _d4,
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        legend: {
          align: "right",
          backgroundColor: t,
          borderColor: a,
          borderWidth: 1,
          floating: !1,
          itemMarginBottom: 3,
          itemMarginTop: 0,
          layout: "vertical",
          reversed: !0,
          shadow: !1,
          verticalAlign: "middle",
          x: 0,
          y: 0,
          itemStyle: {
            color: o
          },
          itemHoverStyle: {
            color: o
          },
          title: {
            text: " ",
            style: {
              color: o
            }
          },
          symbolRadius: 0
        },
        plotOptions: {
          series: {
            stacking: "normal",
            borderColor: t,
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            },
            style: {
              textOutline: !1,
              fontSize: l
            },
            point: {
              events: {
                click: function click(e) {
                  var t = this.series.yAxis;
                  t.removePlotLine("helperLine"), t.addPlotLine({
                    value: this.stackY,
                    color: r.font_color,
                    width: 2,
                    id: "helperLine",
                    zIndex: 5,
                    label: {
                      text: this.series.name + " " + this.category,
                      style: {
                        color: r.font_color,
                        fontSize: l
                      },
                      align: "left",
                      verticalAlign: "bottom",
                      rotation: 0,
                      y: -5
                    }
                  });
                }
              }
            }
          }
        },
        series: [],
        title: {
          text: "Loading data...",
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        subtitle: {
          text: '...from <a href="https://bloodmallet.com">bloodmallet</a>',
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        tooltip: {
          headerFormat: "<b>{point.x}</b>",
          shared: !0,
          backgroundColor: t,
          borderColor: a,
          style: {
            color: o,
            fontSize: l
          },
          useHTML: !0
        },
        xAxis: {
          categories: [],
          labels: {
            useHTML: !0,
            style: {
              color: o,
              fontSize: l
            }
          },
          gridLineWidth: 0,
          gridLineColor: a,
          lineColor: a,
          tickColor: a
        },
        yAxis: [{
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === r.value_style ? "Δ Damage per second" : "% Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }, {
          linkedTo: 0,
          opposite: !0,
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === r.value_style ? "Δ Damage per second" : "% Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }]
      };
      return _c4.chart.backgroundColor = _i14, _c4.legend.backgroundColor = _i14, _c4.legend.borderColor = _n6, _c4.legend.itemStyle.color = _s3, _c4.legend.itemHoverStyle.color = _s3, _c4.title.style.color = _s3, _c4.subtitle.style.color = _s3, _c4.tooltip.formatter = function () {
        var e = document.createElement("div");
        e.style.margin = "-4px -7px -7px -7px", e.style.padding = "3px 3px 6px 3px", e.style.backgroundColor = "transparent" !== _i14 ? _i14 : t, "highcharts_old" === r.chart_engine && (e.style.margin = "-7px");
        var o = document.createElement("div");
        e.appendChild(o), o.style.marginLeft = "9px", o.style.marginRight = "9px", o.style.marginBottom = "6px", o.style.fontWeight = "700", o.innerHTML = this.x;
        var a = 0;

        for (var l = this.points.length - 1; l >= 0; l--) {
          if (a += this.points[l].y, 0 !== this.points[l].y) {
            var _t19 = document.createElement("div");

            e.appendChild(_t19);

            var _o18 = document.createElement("span");

            _t19.appendChild(_o18), _o18.style.marginLeft = "9px", _o18.style.borderLeft = "9px solid " + this.points[l].series.color, _o18.style.paddingLeft = "4px", Number.isInteger(this.points[l].series.name) && _o18.appendChild(document.createTextNode(this.points[l].series.name + ":")), _t19.appendChild(document.createTextNode("  " + Intl.NumberFormat().format(a) + ("relative" === r.value_style ? "%" : "")));
          }
        }

        return e.outerHTML;
      }, _c4.tooltip.backgroundColor = "transparent" !== _i14 ? _i14 : t, _c4.tooltip.borderColor = _n6, _c4.tooltip.style.color = _s3, _c4.xAxis.labels.style.color = _s3, _c4.xAxis.gridLineColor = _n6, _c4.xAxis.lineColor = _n6, _c4.xAxis.tickColor = _n6, _c4.yAxis[0].labels.style.color = _n6, _c4.yAxis[0].stackLabels.style.color = _s3, _c4.yAxis[0].gridLineColor = _n6, _c4.yAxis[0].lineColor = _n6, _c4.yAxis[0].tickColor = _n6, _c4.yAxis[0].title.style.color = _n6, _c4.yAxis[1].labels.style.color = _n6, _c4.yAxis[1].stackLabels.style.color = _s3, _c4.yAxis[1].gridLineColor = _n6, _c4.yAxis[1].lineColor = _n6, _c4.yAxis[1].tickColor = _n6, _c4.yAxis[1].title.style.color = _n6, _c4.credits.style.color = _s3, _c4;
    }
  }

  function E(e, t) {
    var o = document.getElementById("chart"),
        a = o.dataset.filterItemlevels;
    t ? o.dataset.filterItemlevels = a.split(";").filter(function (t) {
      return t !== e;
    }).join(";") : void 0 === a || 0 === a.length ? o.dataset.filterItemlevels = e : o.dataset.filterItemlevels = a + ";" + e;
  }

  function T(e, t) {
    var o = document.getElementById("chart"),
        a = o.dataset.filterSources;
    t ? o.dataset.filterSources = a.split(";").filter(function (t) {
      return t !== e;
    }).join(";") : void 0 === a || 0 === a.length ? o.dataset.filterSources = e : o.dataset.filterSources = a + ";" + e;
  }

  function L(e, t, o) {
    var a = document.createElement("div");
    a.innerHTML = e + ": ";
    var l = document.createElement("span");

    if (l.innerHTML = t + "%", l.classList += O(t >= 0 ? t : 3 - t), void 0 !== o) {
      l.title = "Talent combination: " + o, l.setAttribute("data-toggle", "tooltip"), l.setAttribute("data-placement", "bottom");

      var _e15 = document.createElement("span");

      _e15.classList += "priest-color", _e15.innerHTML = " (?)", l.appendChild(_e15);
    }

    return a.appendChild(l), a;
  }

  function O(e) {
    return i && console.log("get_value_color"), e < 5 ? "mage-color" : e > 10 && e <= 12 ? "druid-color" : e > 12 ? "death_knight-color" : "monk-color";
  }

  function z(e, t) {
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = t.sorted_data_keys[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var _o19 = _step7.value;
        if (_o19[e.slice(0, 1) - 1] === e.slice(1, 2)) return _o19;
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
          _iterator7.return();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    return !1;
  }

  function I(e, t, o, a) {
    var l = '<a href="https://';
    return "en" === e.language || "EN" === e.language ? l += "www" : l += e.language.toLowerCase(), l += ".wowhead.com/spell=", l += a.talent_data[o.slice(0, 1)][o.slice(1, 2)].spell_id, l += '"', l += ">", l += S(t, a, e), l += "</a>";
  }

  function S(e, t, o) {
    i && console.log("get_translated_name " + e);
    var a = "";

    try {
      a = t.translations[e][n[o.language]];
    } catch (t) {
      i && (console.log("No translation for ".concat(e, " found.")), console.log(t)), a = e;
    }

    return i && console.log("Translated name: " + a), void 0 === a && (a = e), a;
  }

  function M(e, t) {
    var o = e.slice(0, 1),
        a = e.slice(1, 2),
        l = 100,
        i = "";
    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
      for (var _iterator8 = t.sorted_data_keys[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
        var _e16 = _step8.value;

        if (_e16[o - 1] === a) {
          var _a22 = t.data[_e16],
              _r8 = t.data[_e16.slice(0, o - 1) + "0" + _e16.slice(o, 8)];

          l > P(_r8, _a22) && (l = P(_r8, _a22), i = _e16);
        }
      }
    } catch (err) {
      _didIteratorError8 = true;
      _iteratorError8 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
          _iterator8.return();
        }
      } finally {
        if (_didIteratorError8) {
          throw _iteratorError8;
        }
      }
    }

    return [i, l];
  }

  function N(e, t) {
    var o = e.slice(0, 1),
        a = e.slice(1, 2),
        l = -100,
        i = "";
    var _iteratorNormalCompletion9 = true;
    var _didIteratorError9 = false;
    var _iteratorError9 = undefined;

    try {
      for (var _iterator9 = t.sorted_data_keys[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
        var _e17 = _step9.value;

        if (_e17[o - 1] === a) {
          var _a23 = t.data[_e17],
              _r9 = t.data[_e17.slice(0, o - 1) + "0" + _e17.slice(o, 8)];

          l < P(_r9, _a23) && (l = P(_r9, _a23), i = _e17);
        }
      }
    } catch (err) {
      _didIteratorError9 = true;
      _iteratorError9 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
          _iterator9.return();
        }
      } finally {
        if (_didIteratorError9) {
          throw _iteratorError9;
        }
      }
    }

    return [i, l];
  }

  function H(e, t) {
    i && console.log("get_average_gain");
    var o = [];
    var _iteratorNormalCompletion10 = true;
    var _didIteratorError10 = false;
    var _iteratorError10 = undefined;

    try {
      for (var _iterator10 = t.sorted_data_keys[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
        var _a24 = _step10.value;
        _a24[e.slice(0, 1) - 1] === e.slice(1, 2) && o.push(_a24);
      }
    } catch (err) {
      _didIteratorError10 = true;
      _iteratorError10 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
          _iterator10.return();
        }
      } finally {
        if (_didIteratorError10) {
          throw _iteratorError10;
        }
      }
    }

    var a = 0;

    for (var _i15 = 0; _i15 < o.length; _i15++) {
      var _l16 = _o20[_i15];
      var _o20 = t.data[_l16];
      a += P(t.data[_l16.slice(0, e.slice(0, 1) - 1) + "0" + _l16.slice(e.slice(0, 1), 8)], _o20);
    }

    return Math.round(a / o.length * 100) / 100;
  }

  function P(e, t) {
    return i && console.log("get_percentage_gain"), Math.round(100 * (100 * t / e - 100)) / 100;
  }

  this.init_charts = new function () {
    i && console.log("init_charts");
    var e = document.querySelectorAll("div.bloodmallet_chart"),
        l = [];

    for (var _t20 = 0; _t20 < e.length; _t20++) {
      var _o21 = e[_t20];
      if (l.indexOf(_o21.id) > -1) return void console.error("Multiple Elements use the same ID ('" + _o21.id + "'). Aborting bloodmallet_chart_import.js.");
      l.push(_o21.id);
    }

    for (var _l17 = 0; _l17 < e.length; _l17++) {
      var _r10 = void 0;

      try {
        _r10 = e[_l17].id;
      } catch (e) {
        return void console.error("Each .bloodmallet_chart needs an ID. Aborting bloodmallet_chart_import.js.");
      }

      var _n7 = document.getElementById(e[_l17].id);

      if (_n7) {
        var _e18 = {
          chart_id: void 0,
          wow_class: void 0,
          wow_spec: void 0,
          data_type: "trinkets",
          azerite_tier: "all",
          conduit_rank: "7",
          fight_style: "castingpatchwerk",
          chart_mode: "soulbinds",
          covenant: "Kyrian",
          renown: "35",
          axis_color: a,
          background_color: t,
          font_color: o,
          limit: 7,
          chart_engine: "highcharts",
          tooltip_engine: "wowhead",
          language: "en",
          value_style: "absolute",
          html_element: _n7
        };

        try {
          void 0 !== bloodmallet.style.axis_color && (_e18.axis_color = bloodmallet.style.axis_color), void 0 !== bloodmallet.style.background_color && (_e18.background_color = bloodmallet.style.background_color), void 0 !== bloodmallet.style.font_color && (_e18.font_color = bloodmallet.style.font_color), void 0 !== bloodmallet.settings.entries && (_e18.limit = bloodmallet.settings.entries), void 0 !== bloodmallet.settings.chart_engine && (_e18.chart_engine = bloodmallet.settings.chart_engine), void 0 !== bloodmallet.settings.tooltip_engine && (_e18.tooltip_engine = bloodmallet.settings.tooltip_engine), void 0 !== bloodmallet.settings.language && (_e18.language = bloodmallet.settings.language), void 0 !== bloodmallet.settings.value_style && (_e18.value_style = bloodmallet.settings.value_style);
        } catch (e) {
          i && console.log("Applying page wide settings failed or no page wide settings were found.");
        }

        _n7.getAttribute("data-entries") && (_e18.limit = _n7.getAttribute("data-entries")), _n7.getAttribute("data-fight-style") && (_e18.fight_style = _n7.getAttribute("data-fight-style")), _n7.getAttribute("data-type") && (_e18.data_type = _n7.getAttribute("data-type")), _n7.getAttribute("data-chart-mode") && (_e18.chart_mode = _n7.getAttribute("data-chart-mode")), _n7.getAttribute("data-covenant") && (_e18.covenant = _n7.getAttribute("data-covenant")), _n7.getAttribute("data-renown") && (_e18.renown = _n7.getAttribute("data-renown")), _n7.getAttribute("data-azerite-tier") && (_e18.azerite_tier = _n7.getAttribute("data-azerite-tier")), _n7.getAttribute("data-conduit-rank") && (_e18.conduit_rank = _n7.getAttribute("data-conduit-rank")), _n7.getAttribute("data-background-color") && (_e18.background_color = _n7.getAttribute("data-background-color")), _n7.getAttribute("data-font-color") && (_e18.font_color = _n7.getAttribute("data-font-color")), _n7.getAttribute("data-axis-color") && (_e18.axis_color = _n7.getAttribute("data-axis-color")), _n7.getAttribute("data-tooltip-engine") && (_e18.tooltip_engine = _n7.getAttribute("data-tooltip-engine")), _n7.getAttribute("data-chart-engine") && (_e18.chart_engine = _n7.getAttribute("data-chart-engine")), _n7.getAttribute("data-language") && (_e18.language = _n7.getAttribute("data-language")), _n7.getAttribute("data-value-style") && (_e18.value_style = _n7.getAttribute("data-value-style"));

        var _l18 = !0;

        _n7.getAttribute("data-chart-id") ? _e18.chart_id = _n7.getAttribute("data-chart-id") : (_n7.getAttribute("data-wow-class") || (console.error("Required 'data-chart-id' or 'data-wow-class' attribute wasn't found in " + _r10 + "."), _l18 = !1), _e18.wow_class = _n7.getAttribute("data-wow-class"), _n7.getAttribute("data-wow-spec") || (console.error("Required 'data-chart-id' or 'data-wow-spec' attribute wasn't found in " + _r10 + "."), _l18 = !1), _e18.wow_spec = _n7.getAttribute("data-wow-spec"));

        var _s4 = A(_e18),
            _d5 = !1;

        if ("highcharts" == _e18.chart_engine) try {
          _d5 = Highcharts.chart(_r10, _s4);
        } catch (e) {
          return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        } else if ("highcharts_old" == _e18.chart_engine) try {
          var _e19 = _s4;
          _e19.chart.renderTo = _r10, _d5 = new Highcharts.Chart(_e19);
        } catch (e) {
          return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        }
        _l18 ? h(_e18) : _d5.setTitle({
          text: "Wrong chart setup"
        }, {
          text: "Missing 'data-chart-id', 'data-wow-class' or 'data-wow-spec'. See <a href=\"https://github.com/Bloodmallet/bloodmallet_web_frontend/wiki/How-to-import-charts\">wiki</a>"
        }), setTimeout(m, 1, _e18, _n7, _d5, 0);
      }
    }
  }();
}

document.addEventListener("DOMContentLoaded", function () {
  bloodmallet_chart_import();
});