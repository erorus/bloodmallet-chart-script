"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function bloodmallet_chart_import() {
  var e = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
      t = "#343a40",
      o = "#f8f9fa",
      a = "#828282",
      l = "1.1rem",
      r = !1,
      i = "https://bloodmallet.com/chart/get/",
      n = {
    cn: "cn_CN",
    en: "en_US",
    de: "de_DE",
    es: "es_ES",
    fr: "fr_FR",
    it: "it_IT",
    ko: "ko_KR",
    pt: "pt_BR",
    ru: "ru_RU",
    "zh-hans": "cn_CN"
  },
      s = {
    Kyrian: {
      id: 1,
      color: "#69ccf0"
    },
    Venthyr: {
      id: 2,
      color: "#c41f3b"
    },
    "Night Fae": {
      id: 3,
      color: "#a330c9"
    },
    Necrolord: {
      id: 4,
      color: "#abd473"
    }
  },
      d = {
    unholy: "#abd473",
    frost: "#69ccf0",
    blood: "#c41f3b"
  },
      c = "Î” Damage per second",
      h = "% Damage per second";

  function u(e) {
    var t = e.chart_id,
        o = e.data_type,
        a = e.fight_style,
        l = e.wow_class,
        n = e.wow_spec;

    try {
      if (m(e)) return;
    } catch (e) {
      r;
    }

    var s = a;
    s += "/" + l, s += "/" + n;
    var d = "";
    d = t ? i + t : i + o + "/" + s;
    var c = new XMLHttpRequest();
    c.open("GET", d, !0), c.onload = function (t) {
      if (4 === c.readyState) if (200 === c.status) {
        JSON.parse(c.responseText);
        e.html_element.dataset.loadedData = c.responseText;
      } else console.error(c.statusText);
    }, c.onerror = function (e) {
      console.error("Fetching data from bloodmallet.com encountered an error, ", e);
    }, c.send(null);
  }

  function m(e) {
    return JSON.parse(e.html_element.dataset.loadedData);
  }

  function p(e, t, o, a) {
    var l = e.data_type,
        i = e.limit,
        n = e.chart_engine,
        h = !1;

    try {
      h = m(e);
    } catch (l) {
      return void (a < 30 && setTimeout(p, 200, e, t, o, a + 1));
    }

    if (e.data = h, o.update({
      accessibility: {
        enable: !1
      }
    }, !1), !0 === h.error || "error" === h.status) return function (e, t) {
      var o = e;

      if (o.innerHTML = "", "error" === t.status) {
        var _e = document.createElement("p");

        _e.innerText = t.message, o.appendChild(_e);
      } else {
        var _e2 = document.createElement("p");

        _e2.innerText = "An error occured during simulation.", o.appendChild(_e2);

        var _a = document.createElement("ul"),
            _l = document.createElement("li");

        _l.textContent = "Title: " + (t.title ? t.title : "~"), _a.appendChild(_l);

        var _r = document.createElement("li");

        _r.textContent = "Spec: " + t.wow_spec + " " + t.wow_class, _a.appendChild(_r);

        var _i = document.createElement("li");

        _i.textContent = "Type: " + t.simulation_type, _a.appendChild(_i);

        var _n = document.createElement("li");

        _n.textContent = "Fight style: " + t.fight_style, _a.appendChild(_n);

        var _s = document.createElement("li");

        _s.textContent = "ID: " + t.id, _a.appendChild(_s);

        var _d = document.createElement("li");

        _d.textContent = "Custom profile:", _a.appendChild(_d), _d.appendChild(document.createElement("br"));

        var _c = document.createElement("textarea");

        _c.value = t.custom_profile, _c.placeholder = "No custom profile", _c.style.width = "100%", _c.classList.add("form-control"), _d.appendChild(_c);

        var _h = document.createElement("li");

        _h.textContent = "Log:", _a.appendChild(_h), _h.appendChild(document.createElement("br"));

        var _u = document.createElement("textarea");

        _u.value = t.log, _u.placeholder = "No log available", _u.style.width = "100%", _u.classList.add("form-control"), _h.appendChild(_u), o.appendChild(_a);
      }
    }(t, h);
    if (wow_class = h.simc_settings.class, wow_spec = h.simc_settings.spec, fight_style = h.simc_settings.fight_style, e.data_type = l = h.data_type, ("legendaries" === e.data_type || "tier_set" === e.data_type) && (e.value_style = "absolute"), function (e, t) {
      if (!["bloodmallet.com", "127.0.0.1:8000"].includes(window.location.host)) return;
      r;
      ["trinkets", "covenants", "conduits", "soulbind_nodes", "windfury_totem"].includes(e.data_type) && (document.getElementById("value_style_switch").hidden = !1);
      document.getElementById("meta-info").hidden = !1;

      for (var _e3 in t.simc_settings) {
        var _o = document.createTextNode(t.simc_settings[_e3]),
            _a2 = document.getElementById("c_" + _e3);

        _a2.innerText = "", _a2.appendChild(_o);
      }

      var o = document.createElement("a");
      o.href = "https://github.com/simulationcraft/simc/commit/" + t.simc_settings.simc_hash, o.innerText = t.simc_settings.simc_hash.substring(0, 7);
      var a = document.getElementById("c_simc_hash");

      if (a.innerText = "", a.appendChild(o), Object.keys(t).indexOf("profile") > -1) {
        for (var _e4 in t.profile.character) {
          try {
            var _o3 = void 0,
                _a4 = document.getElementById("c_" + _e4);

            _a4.innerHTML = "", _o3 = "soulbind" === _e4 ? document.createTextNode(t.profile.character[_e4].replaceAll(",", " ").replaceAll("/", " ")) : document.createTextNode(v(t.profile.character[_e4])), _a4.appendChild(_o3);
          } catch (e) {}
        }

        var _o2 = void 0 !== t.profile.character.talents ? t.profile.character.talents : "0000000";

        var _a3 = document.getElementById("c_talents");

        _a3.innerHTML = "", _a3.appendChild(C(_o2, "base"));

        for (var _o4 in t.profile.items) {
          var _a5 = document.createElement("a");

          _a5.href = "", _a5.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", _a5.href += "item=" + t.profile.items[_o4].id;
          var _l2 = [];

          try {
            _l2.push("bonus=" + t.profile.items[_o4].bonus_id.split("/").join(":"));
          } catch (e) {}

          try {
            t.profile.items[_o4].hasOwnProperty("ilevel") && _l2.push("ilvl=" + t.profile.items[_o4].ilevel);
          } catch (e) {}

          _l2.length > 0 && (_a5.href += "?" + _l2.join("&")), _a5.dataset.whIconSize = "medium";

          var _r2 = document.getElementById("c_" + _o4);

          _r2.innerHTML = "", _r2.appendChild(_a5);
        }
      } else document.getElementById("character-profile-label").hidden = !0;

      if (["tier_set", "talent_target_scaling"].indexOf(e.data_type) > -1) {
        document.getElementById("post_chart").hidden = !1;

        var _e5 = document.getElementById("talent-information-div");

        if ("" === _e5.textContent) {
          var _arr = Object.keys(t.data_profile_overrides);

          for (var _i2 = 0; _i2 < _arr.length; _i2++) {
            var _o5 = _arr[_i2];

            var _a6 = t.data_profile_overrides[_o5],
                _l3 = t.sorted_data_keys.indexOf(_o5);

            var _r3 = document.createElement("h3");

            _r3.appendChild(document.createTextNode(_o5)), _r3.id = "override-profile-" + _l3, _e5.appendChild(_r3);
            var _i3 = "";
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = _a6[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _e6 = _step.value;
                _e6.startsWith("talents=") && (_i3 = _e6.split("=")[1]);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            var _n2 = C(_i3, _o5);

            _e5.appendChild(_n2);
          }
        }
      }

      if ("soulbinds" === e.data_type) {
        var _o6 = document.getElementById("post_chart");

        _o6.hidden = !1, _o6.innerHTML = "", Object.keys(t.covenant_ids).forEach(function (a) {
          var l = t.covenant_ids[a];
          var r = document.createElement("h3");
          r.appendChild(document.createTextNode(k(a, t, e))), _o6.appendChild(r);
          var i = 0;
          var n = t.sorted_data_keys;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = n[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _a7 = _step2.value;

              if (t.covenant_mapping[_a7].indexOf(l) > -1) {
                i += 1;

                var _l4 = document.createElement("h4");

                _l4.appendChild(document.createTextNode(i + ". " + k(_a7, t, e))), _l4.classList += "ml-3", _l4.id = _a7, _o6.appendChild(_l4);

                var _r4 = document.createElement("p");

                _r4.classList += "ml-5";
                var _n3 = [];

                var _s2 = O(t.data[_a7], Math.max.apply(Math, _toConsumableArray(Object.values(t.data[_a7])))).split("+");

                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = _s2[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _o7 = _step3.value;

                    var _a8 = document.createElement("a");

                    _a8.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", t.hasOwnProperty("spell_ids") && t.spell_ids.hasOwnProperty(_o7) && (_a8.href += "spell=" + t.spell_ids[_o7] + "/" + y(_o7)), _a8.appendChild(document.createTextNode(k(_o7, t, e))), _n3.push(_a8);
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                      _iterator3.return();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }

                for (var _e7 = 0; _e7 < _n3.length; _e7++) {
                  0 !== _e7 && _r4.appendChild(document.createTextNode(", ")), _r4.appendChild(_n3[_e7]);
                }

                _o6.appendChild(_r4);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }), setTimeout(function () {
          Object.keys(t.covenant_ids).forEach(function (a) {
            var l = t.covenant_ids[a];
            var r = document.createElement("h3");
            r.appendChild(document.createTextNode(k(a, t, e))), _o6.appendChild(r);
            var i = 0;
            var n = t.sorted_data_keys;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              var _loop = function _loop() {
                var r = _step4.value;

                if (t.covenant_mapping[r].indexOf(l) > -1) {
                  i += 1;

                  var _l5 = document.createElement("h4");

                  _l5.appendChild(document.createTextNode(i + ". " + k(r, t, e))), _l5.classList += "ml-3", _l5.id = r, _o6.appendChild(_l5);

                  var _n4 = Object.values(t.data[r]).sort(function (e, t) {
                    return t - e;
                  }),
                      _d2 = _n4.map(function (e) {
                    return O(t.data[r], e);
                  }),
                      _c2 = document.createElement("div"),
                      _h2 = Highcharts.chart(_c2, b(e));

                  _h2.title.attr({
                    text: ""
                  }), _h2.subtitle.attr({
                    text: ""
                  });

                  var _u2 = _d2.map(function (o) {
                    return o.split("+").reduce(function (o, a) {
                      var l = document.createElement("a");
                      return l.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", l.href += "spell=" + t.spell_ids[a] + "/" + y(a), o + l.outerHTML;
                    }, "");
                  });

                  _h2.update({
                    xAxis: {
                      categories: _u2,
                      labels: {
                        step: 1
                      }
                    }
                  }, !1), _h2.addSeries({
                    data: _n4,
                    color: s[a].color,
                    showInLegend: !1
                  }, !1), _o6.appendChild(_c2), _h2.redraw(), setTimeout(function () {
                    _c2.style.height = 200 + 30 * _d2.length + "px", _h2.setSize(void 0, _c2.style.height);
                  }, 100);
                }
              };

              for (var _iterator4 = n[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                _loop();
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          });
        }, 5);
      }

      if ("trinkets" === e.data_type) {
        var _e8 = document.getElementById("filter-itemlevels-options");

        _e8.innerHTML = "";

        var _o8 = document.getElementById("chart");

        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = t.simulated_steps[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _a10 = _step5.value;

            var _t = "step_" + _a10,
                _l7 = document.createElement("div");

            _l7.className += " form-check";

            var _r5 = document.createElement("input");

            _r5.className += " form-check-input", _r5.className += " filter-itemlevels", _r5.type = "checkbox", _r5.id = _t, _r5.value = _a10, void 0 === _o8.dataset.filterItemlevels ? _r5.checked = !0 : _r5.checked = -1 === _o8.dataset.filterItemlevels.split(";").indexOf(_a10.toString()), _l7.appendChild(_r5);

            var _i4 = document.createElement("label");

            _i4.className = " form-check-label", _i4.htmlFor = _t, _i4.appendChild(document.createTextNode(_a10)), _l7.appendChild(_i4), _e8.appendChild(_l7), _r5.addEventListener("change", function (e, t) {
              x(e.target.value, e.target.checked), bloodmallet_chart_import();
            });
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        var _a9 = document.getElementById("filter-sources-options");

        _a9.innerHTML = "";

        var _l6 = Object.values(t.data_sources).filter(function (e, t, o) {
          return o.indexOf(e) === t;
        }).sort();

        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = _l6[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var _e9 = _step6.value;

            var _t2 = "step_" + _e9.replaceAll(" ", "_"),
                _l8 = document.createElement("div");

            _l8.className += " form-check";

            var _r6 = document.createElement("input");

            _r6.className += " form-check-input", _r6.className += " filter-sources", _r6.type = "checkbox", _r6.id = _t2, _r6.value = _e9, void 0 === _o8.dataset.filterSources ? _r6.checked = !0 : _r6.checked = -1 === _o8.dataset.filterSources.split(";").indexOf(_e9.toString()), _l8.appendChild(_r6);

            var _i5 = document.createElement("label");

            _i5.className = " form-check-label", _i5.htmlFor = _t2, _i5.appendChild(document.createTextNode(_e9)), _l8.appendChild(_i5), _a9.appendChild(_l8), _r6.addEventListener("change", function (e, t) {
              w(e.target.value, e.target.checked), bloodmallet_chart_import();
            });
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }
      }

      try {
        $WowheadPower.refreshLinks();
      } catch (e) {}
    }(e, h), "secondary_distributions" === l) return function (e, t, o) {
      r;
      var a = t.id,
          l = (e.chart_id, e.fight_style),
          i = e.wow_class,
          n = e.wow_spec,
          s = (e.chart_engine, !1);
      s = m(e), i = s.simc_settings.class, n = s.simc_settings.spec, l = s.simc_settings.fight_style;
      var d = b(e),
          c = !1;
      if ("highcharts" == e.chart_engine) try {
        c = Highcharts.chart(a, d);
      } catch (e) {
        return console.log("When trying to create a highcharts chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(e);
      } else if ("highcharts_old" == e.chart_engine) try {
        var _e10 = d;
        _e10.chart.renderTo = a, c = new Highcharts.Chart(_e10);
      } catch (e) {
        return console.log("When trying to create a highcharts_old chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(e);
      }
      o = void 0, o = c;
      var h;
      h = Object.keys(s.data)[0];

      var u = s.data[h][s.sorted_data_keys[h][0]],
          p = s.data[h][s.sorted_data_keys[h][s.sorted_data_keys[h].length - 1]],
          f = g(100, 0, 100),
          _ = g(0, 0, 100),
          y = {
        name: Intl.NumberFormat().format(u) + " DPS",
        color: "rgb(" + f[0] + "," + f[1] + "," + f[2] + ")",
        data: []
      };

      var _arr2 = Object.keys(s.data[h]);

      for (var _i6 = 0; _i6 < _arr2.length; _i6++) {
        var _t3 = _arr2[_i6];

        var _o9 = void 0,
            _a11 = s.data[h][_t3],
            _l9 = g(_a11, p, u),
            _r7 = 1,
            _i7 = "#232227",
            _n5 = 5;

        if (u === _a11 && (_r7 = 3, _n5 = 8, _i7 = e.font_color), _t3.indexOf("70") > -1) switch (_o9 = {
          enabled: !0,
          allowOverlap: !0
        }, _t3.indexOf("70")) {
          case 0:
            _o9.format = "Crit", _o9.verticalAlign = "top";
            break;

          case 3:
            _o9.format = "Haste";
            break;

          case 6:
            _o9.format = "Mastery", _o9.verticalAlign = "top";
            break;

          case 9:
            _o9.format = "Versatility", _o9.verticalAlign = "top";
        }
        var _d3 = s.secondary_sum;

        var _c3 = parseInt(_t3.split("_")[0]),
            _m = parseInt(_t3.split("_")[1]),
            _f = parseInt(_t3.split("_")[2]),
            _2 = parseInt(_t3.split("_")[3]);

        y.data.push({
          x: Math.sqrt(3) / 2 * (_c3 + 1 / 3 * _m),
          y: Math.sqrt(2 / 3) * _m,
          z: _f + .5 * _c3 + .5 * _m,
          name: _t3,
          color: "rgb(" + _l9[0] + "," + _l9[1] + "," + _l9[2] + ")",
          dps: _a11,
          dps_max: u,
          dps_min: p,
          stat_crit: _c3 * _d3 / 100,
          stat_haste: _m * _d3 / 100,
          stat_mastery: _f * _d3 / 100,
          stat_vers: _2 * _d3 / 100,
          stat_sum: _d3,
          marker: {
            radius: _n5,
            lineColor: _i7,
            lineWidth: _r7
          },
          dataLabels: _o9
        });
      }

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      o.addSeries(y, !1), o.addSeries({
        name: Intl.NumberFormat().format(p) + " DPS",
        color: "rgb(" + _[0] + "," + _[1] + "," + _[2] + ")"
      }, !1);
      var x = s.timestamp,
          w = x.split("-")[0],
          v = x.split("-")[1],
          C = x.split("-")[2].split(" ")[0],
          k = x.split(" ")[1].split(":")[0],
          O = x.split(":")[1],
          A = "Last updated ",
          L = new Date() - new Date(Date.UTC(w, v - 1, C, k, O)),
          T = Math.floor(L / 24 / 3600 / 1e3);
      T > 0 && (A += "".concat(T, "d "));
      var E = Math.floor(L / 3600 / 1e3) - 24 * T;
      A += "".concat(E, "h ago"), o.redraw(), function (e) {
        function t(t) {
          var a = (t = o.pointer.normalize(t)).chartX,
              l = t.chartY,
              r = o.options.chart.options3d.alpha,
              i = o.options.chart.options3d.beta,
              n = 5;

          function s(e) {
            e = o.pointer.normalize(e), o.update({
              chart: {
                options3d: {
                  alpha: r + (e.chartY - l) / n,
                  beta: i + (a - e.chartX) / n
                }
              }
            }, void 0, void 0, !1);
          }

          o.unbindDragMouse = e.addEvent(document, "mousemove", s), o.unbindDragTouch = e.addEvent(document, "touchmove", s), e.addEvent(document, "mouseup", o.unbindDragMouse), e.addEvent(document, "touchend", o.unbindDragTouch);
        }

        e.addEvent(o.container, "mousedown", t), e.addEvent(o.container, "touchstart", t);
      }(Highcharts);
    }(e, t, o);
    if ("talent_target_scaling" === l) return function (e, t, o) {
      r;
      var a = t.id,
          l = (e.chart_id, e.fight_style),
          i = e.wow_class,
          n = e.wow_spec,
          s = (e.chart_engine, m(e));
      document.getElementById("post_chart").hidden = !1, i = s.profile.character.class, n = s.profile.character.spec, l = s.simc_settings.fight_style;
      var d = b(e),
          c = !1;
      if ("highcharts" == e.chart_engine) try {
        c = Highcharts.chart(a, d);
      } catch (e) {
        return console.log("When trying to create a highcharts chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(e);
      } else if ("highcharts_old" == e.chart_engine) try {
        var _e11 = d;
        _e11.chart.renderTo = a, c = new Highcharts.Chart(_e11);
      } catch (e) {
        return console.log("When trying to create a highcharts_old chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(e);
      }
      o = void 0, o = c;

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = s.sorted_data_keys[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var _t4 = _step7.value;

          var _a12 = s.data[_t4],
              _l10 = Object.keys(_a12);

          var _r8 = -1;

          _r8 = e.talent_target_scaling_min_target_count > -1 ? e.talent_target_scaling_min_target_count : Math.min.apply(Math, _toConsumableArray(_l10.map(function (e) {
            return parseInt(e);
          })));

          var _i8 = -1;

          _i8 = e.talent_target_scaling_max_target_count > -1 ? e.talent_target_scaling_max_target_count : Math.max.apply(Math, _toConsumableArray(_l10.map(function (e) {
            return parseInt(e);
          })));
          var _n6 = [];

          for (var _e12 = _r8; _e12 <= _i8; _e12++) {
            _l10.indexOf(_e12.toString()) >= -1 ? _n6.push([_e12, _a12[_e12]]) : _n6.push([_e12, null]);
          }

          var _d4 = {
            name: _t4,
            data: _n6
          };
          o.addSeries(_d4, !1), o.update({
            xAxis: {
              min: _r8 - .5,
              max: _i8 + .5
            }
          });
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      o.redraw();
    }(e, t, o);
    l = h.data_type;
    var u = h;
    var A,
        L,
        T = {};
    A = Object.keys(u).indexOf("sorted_data_keys") > -1 && "windfury_totem" === l && "absolute" === e.value_style ? u.sorted_data_keys_2.slice(0, i) : Object.keys(u).indexOf("sorted_data_keys") > -1 ? u.sorted_data_keys.slice(0, i) : Object.keys(u.data), L = ["races", "talents", "soulbinds", "tier_set", "windfury_totem"].includes(l) ? 0 : ["legendaries", "soulbind_nodes", "covenants", "domination_shards"].includes(l) ? u.data.baseline : u.data.baseline[u.simulated_steps[u.simulated_steps.length - 1]];

    var _arr3 = Object.keys(u.data);

    for (var _i9 = 0; _i9 < _arr3.length; _i9++) {
      var _e19 = _arr3[_i9];
      "{" === _e19[0] && "}" === _e19[_e19.length - 1] && (T[_e19] = u.data[_e19]);
    }

    var E,
        S = [];

    if (S = "soulbinds" === l ? void 0 : "tier_set" === l ? ["4p", "2p", "no tier"] : u.simulated_steps, "trinkets" === l) {
      if (void 0 !== e.html_element.dataset.filterItemlevels) {
        var _t6 = e.html_element.dataset.filterItemlevels.split(";");

        S = S.filter(function (e) {
          return -1 === _t6.indexOf(e.toString());
        });
      }

      if (A = A.filter(function (e) {
        return S.some(function (t) {
          return void 0 !== u.data[e][t];
        });
      }), void 0 !== e.html_element.dataset.filterActivePassive) {
        var _t7 = e.html_element.dataset.filterActivePassive.split(";");

        var _o10 = [];
        _t7.map(function (e) {
          "active" === e ? _o10.push(!0) : "passive" === e && _o10.push(!1);
        }), A = A.filter(function (e) {
          return -1 === _o10.indexOf(u.data_active[e]);
        });
      }

      if (void 0 !== e.html_element.dataset.filterSources) {
        var _t8 = e.html_element.dataset.filterSources.split(";");

        A = A.filter(function (e) {
          return -1 === _t8.indexOf(u.data_sources[e]);
        });
      }

      var _t5 = [];
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = A[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var _e13 = _step8.value;

          var _o11 = void 0;

          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = undefined;

          try {
            for (var _iterator9 = S[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var _t9 = _step9.value;
              (void 0 === _o11 && void 0 !== u.data[_e13][_t9] || void 0 !== u.data[_e13][_t9] && u.data[_e13][_t9] > _o11) && (_o11 = u.data[_e13][_t9]);
            }
          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
                _iterator9.return();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }

          _t5.push([_e13, _o11]);
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      _t5.sort(function (e, t) {
        return t[1] - e[1];
      }), A = _t5.map(function (e) {
        return e[0];
      });
    }

    for (o.setTitle({
      text: u.title
    }, {
      text: u.subtitle
    }, !1); o.series[0];) {
      o.series[0].remove(!1);
    }

    if (E = ["talents"].indexOf(l) > -1 ? A.map(function (t) {
      var o = [];

      for (var _a13 = 0; _a13 < t.length; _a13++) {
        o.push(_(e, (_a13 + 1).toString() + t[_a13], u));
      }

      return o.join("");
    }) : ["tier_set", "talent_target-scaling"].indexOf(l) > -1 ? A.map(function (t) {
      return _(e, t, u);
    }) : A.map(function (t) {
      var o = t.indexOf("} ") > -1 ? t.slice(t.indexOf("} ") + 2, t.length) : t;
      return o = o.indexOf(" +") > -1 ? o.slice(0, o.indexOf(" +")) : o, _(e, o, u);
    }), "highcharts" == n ? o.update({
      xAxis: {
        categories: E
      }
    }, !1) : "highcharts_old" == n && o.xAxis[0].setCategories(E, !1), S) {
      var _t10 = {};

      for (var _o12 in u.data) {
        if (u.data.hasOwnProperty(_o12)) {
          var _a14 = u.data[_o12];
          _t10[_o12] = {};
          var _r9 = L;
          "conduits" === l && (_r9 = u.data.baseline[u.covenant_mapping[_o12]]);

          for (var _l11 = S.length - 1; _l11 >= 0; _l11--) {
            var _i10 = S[_l11];

            var _n7 = _a14.hasOwnProperty(e.covenant) ? _a14[e.covenant] : _a14;

            Number.isInteger(_n7) ? (_t10[_o12][_i10] = Math.max(_n7 - _r9, 0), _r9 = 0 === _t10[_o12][_i10] ? _r9 : _n7) : _n7.hasOwnProperty(_i10) ? (_t10[_o12][_i10] = Math.max(_n7[_i10] - _r9, 0), _r9 = 0 === _t10[_o12][_i10] ? _r9 : _n7[_i10]) : _t10[_o12][_i10] = 0;
          }
        }
      }

      r;
      var _iteratorNormalCompletion10 = true;
      var _didIteratorError10 = false;
      var _iteratorError10 = undefined;

      try {
        for (var _iterator10 = S[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
          var _a15 = _step10.value;
          var _l12 = [];

          for (var _o13 = 0; _o13 < A.length; _o13++) {
            var _r11 = A[_o13];

            var _i11 = f(e, _t10[_r11][_a15], L);

            _l12.push(_i11);
          }

          var _r10 = _a15;
          o.addSeries({
            data: _l12,
            name: _r10
          }, !1);
        }
      } catch (err) {
        _didIteratorError10 = true;
        _iteratorError10 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
            _iterator10.return();
          }
        } finally {
          if (_didIteratorError10) {
            throw _iteratorError10;
          }
        }
      }
    } else if (["soulbind_nodes", "covenants"].includes(l)) {
      var I = [];

      for (var _t11 = 0; _t11 < A.length; _t11++) {
        var _o14 = A[_t11],
            _a16 = u.data[_o14] - L;

        I.push(f(e, _a16, L));
      }

      o.addSeries({
        data: I,
        name: "Data",
        showInLegend: !1
      }, !1);
    } else if (["legendaries"].includes(l)) {
      var _t12 = [],
          _a17 = "{" + u.profile.character.covenant + "}",
          _l13 = {};

      var _arr4 = Object.keys(T);

      for (var _i12 = 0; _i12 < _arr4.length; _i12++) {
        var _e14 = _arr4[_i12];
        _l13[_e14] = [];
      }

      _l13[_a17] = [];
      var _iteratorNormalCompletion11 = true;
      var _didIteratorError11 = false;
      var _iteratorError11 = undefined;

      try {
        for (var _iterator11 = A[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
          var _o15 = _step11.value;
          var _r13 = L;

          if (_o15.indexOf("} ") > -1) {
            var _t13 = _o15.slice(0, _o15.indexOf("} ") + 1);

            _r13 = T[_t13], _l13[_t13].push(f(e, _r13, L));

            var _arr6 = Object.keys(_l13);

            for (var _i15 = 0; _i15 < _arr6.length; _i15++) {
              var _e15 = _arr6[_i15];
              _e15 !== _t13 && _l13[_e15].push(0);
            }
          } else {
            var _arr7 = Object.keys(_l13);

            for (var _i16 = 0; _i16 < _arr7.length; _i16++) {
              var _t14 = _arr7[_i16];
              _t14 !== _a17 ? _l13[_t14].push(0) : _l13[_t14].push(f(e, _r13, _r13));
            }
          }

          var _i14 = u.data[_o15] - _r13;

          _t12.push(f(e, _i14, _r13));
        }
      } catch (err) {
        _didIteratorError11 = true;
        _iteratorError11 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion11 && _iterator11.return != null) {
            _iterator11.return();
          }
        } finally {
          if (_didIteratorError11) {
            throw _iteratorError11;
          }
        }
      }

      o.addSeries({
        data: _t12,
        name: "Legendary effect",
        showInLegend: !0,
        color: "#ff7d0a"
      }, !1);
      var _r12 = {
        night_fae: "Night Fae",
        necrolord: "Necrolord",
        venthyr: "Venthyr",
        kyrian: "Kyrian"
      };

      var _arr5 = Object.keys(_l13);

      for (var _i13 = 0; _i13 < _arr5.length; _i13++) {
        var _e16 = _arr5[_i13];
        o.addSeries({
          data: _l13[_e16],
          name: _r12[_e16.slice(1, _e16.length - 1)],
          showInLegend: !0,
          color: s[_r12[_e16.slice(1, _e16.length - 1)]].color
        }, !1);
      }
    } else if (["windfury_totem"].includes(l)) {
      var _t15 = [],
          _a18 = {
        "Blood Death Knight": "#c41f3b",
        "Frost Death Knight": "#c41f3b",
        "Unholy Death Knight": "#c41f3b",
        "Havoc Demon Hunter": "#a330c9",
        "Vengeance Demon Hunter": "#a330c9",
        "Feral Druid": "#ff7d0a",
        "Guardian Druid": "#ff7d0a",
        "Survival Hunter": "#abd473",
        "Brewmaster Monk": "#00ff96",
        "Windwalker Monk": "#00ff96",
        "Protection Paladin": "#f58cba",
        "Retribution Paladin": "#f58cba",
        "Assassination Rogue": "#fff569",
        "Outlaw Rogue": "#fff569",
        "Subtlety Rogue": "#fff569",
        "Enhancement Shaman": "#0070de",
        "Arms Warrior": "#c79c6e",
        "Fury Warrior": "#c79c6e",
        "Protection Warrior": "#c79c6e"
      };
      var _iteratorNormalCompletion12 = true;
      var _didIteratorError12 = false;
      var _iteratorError12 = undefined;

      try {
        for (var _iterator12 = A[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
          var _o16 = _step12.value;

          var _l14 = u.data["{" + _o16 + "}"],
              _r14 = u.data[_o16] - _l14;

          _t15.push({
            y: f(e, _r14, _l14),
            color: _a18[_o16]
          });
        }
      } catch (err) {
        _didIteratorError12 = true;
        _iteratorError12 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion12 && _iterator12.return != null) {
            _iterator12.return();
          }
        } finally {
          if (_didIteratorError12) {
            throw _iteratorError12;
          }
        }
      }

      o.addSeries({
        data: _t15,
        name: "Windfury Totem",
        showInLegend: !1
      }, !1);
    } else if (["domination_shards"].includes(l)) {
      var _arr8 = Object.keys(d);

      for (var _i17 = 0; _i17 < _arr8.length; _i17++) {
        var _t17 = _arr8[_i17];
        var _a20 = [];
        var _iteratorNormalCompletion14 = true;
        var _didIteratorError14 = false;
        var _iteratorError14 = undefined;

        try {
          for (var _iterator14 = A[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
            var _o18 = _step14.value;
            var _l16 = _o18,
                _r15 = L;

            if (_o18.indexOf(" +") > -1 && (_l16 = _o18.split(" +")[0], _r15 = u.data[_l16]), u.shard_type[_l16] === _t17) {
              var _t18 = u.data[_o18] - _r15;

              _a20.push(f(e, _t18, _r15));
            } else _a20.push(f(e, 0, _r15));
          }
        } catch (err) {
          _didIteratorError14 = true;
          _iteratorError14 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion14 && _iterator14.return != null) {
              _iterator14.return();
            }
          } finally {
            if (_didIteratorError14) {
              throw _iteratorError14;
            }
          }
        }

        o.addSeries({
          data: _a20,
          name: _t17 + (A[0].indexOf(" +") > -1 ? " set" : ""),
          showInLegend: !0,
          color: d[_t17]
        }, !1);
      }

      if (A[0].indexOf(" +") > -1) {
        var _t16 = [];
        var _iteratorNormalCompletion13 = true;
        var _didIteratorError13 = false;
        var _iteratorError13 = undefined;

        try {
          for (var _iterator13 = A[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
            var _o17 = _step13.value;

            var _a19 = _o17.split(" +")[0],
                _l15 = u.data[_a19] - L;

            _t16.push(f(e, _l15, L));
          }
        } catch (err) {
          _didIteratorError13 = true;
          _iteratorError13 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion13 && _iterator13.return != null) {
              _iterator13.return();
            }
          } finally {
            if (_didIteratorError13) {
              throw _iteratorError13;
            }
          }
        }

        o.addSeries({
          data: _t16,
          name: "shard",
          showInLegend: !0,
          color: "#ff7d0a"
        }, !1);
      }
    } else if (["soulbinds"].includes(l)) {
      var _iteratorNormalCompletion15 = true;
      var _didIteratorError15 = false;
      var _iteratorError15 = undefined;

      try {
        for (var _iterator15 = Object.keys(s).sort().reverse()[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
          var _t19 = _step15.value;
          var _a21 = s[_t19].id;
          var _l17 = [];
          var _iteratorNormalCompletion16 = true;
          var _didIteratorError16 = false;
          var _iteratorError16 = undefined;

          try {
            for (var _iterator16 = A[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
              var _e17 = _step16.value;
              var _t20 = 0;
              u.covenant_mapping[_e17][0] === _a21 && (_t20 = Math.max.apply(Math, _toConsumableArray(Object.values(u.data[_e17])))), _l17.push(_t20);
            }
          } catch (err) {
            _didIteratorError16 = true;
            _iteratorError16 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion16 && _iterator16.return != null) {
                _iterator16.return();
              }
            } finally {
              if (_didIteratorError16) {
                throw _iteratorError16;
              }
            }
          }

          o.addSeries({
            data: _l17,
            name: k(_t19, u, e),
            showInLegend: !0,
            color: s[_t19].color
          }, !1);
        }
      } catch (err) {
        _didIteratorError15 = true;
        _iteratorError15 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion15 && _iterator15.return != null) {
            _iterator15.return();
          }
        } finally {
          if (_didIteratorError15) {
            throw _iteratorError15;
          }
        }
      }

      o.yAxis[0].options.title.text = c, o.yAxis[1].options.title.text = c;
    } else {
      I = [];

      for (var _e18 = 0; _e18 < A.length; _e18++) {
        var _t21 = A[_e18],
            _o19 = u.data[_t21];
        I.push(_o19);
      }

      o.addSeries({
        data: I,
        name: "DPS",
        showInLegend: !1
      }, !1);
    }

    ["trinkets"].indexOf(l) > -1 ? o.legend.title.attr({
      text: "Itemlevel"
    }) : "races" !== l && "domination_shards" !== l || o.legend.title.attr({
      text: ""
    }), "highcharts_old" == n && o.reflow(), t.style.height = 200 + 30 * A.length + "px", "highcharts" == n && o.setSize(void 0, t.style.height), "wowdb" == e.tooltip_engine ? setTimeout(function () {
      !function (e) {
        r;

        try {
          CurseTips["wowdb-tooltip"].watchElements(document.getElementById(e).getElementsByTagName("a"));
        } catch (e) {
          console.log("Setting wowdb (CurseTips) tooltips failed. Error: ", e);
        }
      }(t.id), o.redraw();
    }, 1) : "wowhead" == e.tooltip_engine ? setTimeout(function () {
      window.$WowheadPower.refreshLinks(), o.redraw();
    }, 1) : setTimeout(function () {
      o.redraw();
    }, 1);
  }

  function f(e, t, o) {
    return "absolute" === e.value_style ? t : "relative" === e.value_style ? Math.round(1e4 * t / o) / 100 : void console.error("Unknown value-style", e.value_style);
  }

  function g(e, t, o) {
    var a = [0, 255, 255],
        l = [255, 255, 0],
        r = [255, 0, 0],
        i = 0,
        n = 0;

    for (var _e20 = 0; _e20 < 3; _e20++) {
      i += Math.abs(r[_e20] - l[_e20]), n += Math.abs(l[_e20] - a[_e20]);
    }

    var s = t + (o - t) * (n / (n + i));

    if (e >= s) {
      var _t22 = (e - s) / (o - s);

      return [Math.floor(r[0] * _t22 + l[0] * (1 - _t22)), Math.floor(r[1] * _t22 + l[1] * (1 - _t22)), Math.floor(r[2] * _t22 + l[2] * (1 - _t22))];
    }

    {
      var _o20 = (e - t) / (s - t);

      return [Math.floor(l[0] * _o20 + a[0] * (1 - _o20)), Math.floor(l[1] * _o20 + a[1] * (1 - _o20)), Math.floor(l[2] * _o20 + a[2] * (1 - _o20))];
    }
  }

  function _(e, t, o) {
    if ("wowhead" != e.tooltip_engine && "wowdb" != e.tooltip_engine) return k(t, o, e);
    if (["races", "windfury_totem"].includes(e.data_type)) return k(t, o, e);

    if (["tier_set", "talent_target_scaling"].includes(e.data_type)) {
      var _a22 = '<a href="#' + ("override-profile-" + o.sorted_data_keys.indexOf(t)) + '">';

      return _a22 += k(t, o, e), _a22 += "</a>", _a22;
    }

    if (["soulbinds"].includes(e.data_type)) {
      var _a23 = '<a href="#' + t + '">';

      return _a23 += k(t, o, e), _a23 += "</a>", _a23;
    }

    if ("wowhead" == e.tooltip_engine) {
      var _a24 = document.createElement("a");

      if (_a24.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", o.hasOwnProperty("item_ids") && o.item_ids.hasOwnProperty(t)) {
        if (_a24.href += "item=" + o.item_ids[t] + "/" + y(t), void 0 !== o.simulated_steps) {
          var _e21 = o.simulated_steps[o.simulated_steps.length - 1];
          "string" == typeof _e21 && _e21.indexOf("_") > -1 && (_e21 = _e21.split("_")[1]), _a24.href += "&ilvl=" + _e21;
        }
      } else if (o.hasOwnProperty("spell_ids") && o.spell_ids.hasOwnProperty(t)) _a24.href += "spell=" + o.spell_ids[t] + "/" + y(t);else if ("talents" === e.data_type) {
        if ("0" === t[1]) return t[1];
        _a24.href += "spell=" + o.talent_data[t[0]][t[1]].spell_id;
      }

      return "talents" === e.data_type ? _a24.appendChild(document.createTextNode(t[1])) : _a24.appendChild(document.createTextNode(k(t, o, e))), _a24.outerHTML;
    }

    if ("wowdb" == e.tooltip_engine) {
      var _a25,
          _l18 = document.createElement("a");

      _l18.href = "http://www.wowdb.com/";

      try {
        _l18.href += "items/" + o.item_ids[t];
      } catch (e) {
        r;
      }

      if (_l18.href.indexOf("items") > -1) {
        var _e22 = o.simulated_steps[o.simulated_steps.length - 1];
        "string" == typeof _e22 && _e22.indexOf("_") > -1 && (_e22 = _e22.split("_")[1]), _l18.href += "?itemLevel=" + _e22;
      }

      try {
        _l18.href += "spells/" + o.spell_ids[t];
      } catch (e) {
        r;
      }

      if ("talents" === e.data_type) {
        if ("0" === t[1]) return t[1];
        _l18.href += "spells/" + o.talent_data[t[0]][t[1]].spell_id;
      }

      return _l18.dataset.tooltipHref = _l18.href, _a25 = "talents" === e.data_type ? t[1] : k(t, o, e), _l18.appendChild(document.createTextNode(_a25)), _l18.outerHTML;
    }
  }

  function y(e) {
    return e.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }

  function b(r) {
    if ("highcharts" == r.chart_engine || "highcharts_old" == r.chart_engine) {
      var _i18 = "https://bloodmallet.com/";
      if (void 0 !== r.chart_id ? _i18 += "chart/" + r.chart_id : void 0 !== r.wow_class && void 0 !== r.wow_spec && void 0 !== r.data_type && (_i18 += "chart/" + r.wow_class + "/" + r.wow_spec + "/" + r.data_type), "secondary_distributions" === r.data_type) return {
        accessibility: {
          enabled: !1
        },
        credits: {
          enabled: !1
        },
        chart: {
          renderTo: "scatter_plot_chart",
          type: "scatter3d",
          backgroundColor: null,
          animation: !1,
          height: 800,
          width: 800,
          options3d: {
            enabled: !0,
            alpha: 10,
            beta: 30,
            depth: 800,
            fitToPlot: !1
          }
        },
        legend: {
          enabled: !0,
          backgroundColor: r.background_color,
          borderColor: r.font_color,
          borderWidth: 1,
          align: "right",
          verticalAlign: "middle",
          layout: "vertical",
          itemStyle: {
            color: r.font_color
          },
          itemHoverStyle: {
            color: r.font_color
          }
        },
        plotOptions: {
          series: {
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: r.font_color,
                fontSize: r.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color,
            fontSize: r.font_size
          }
        },
        tooltip: {
          headerFormat: "",
          pointFormatter: function pointFormatter() {
            return '<table class="">                <thead>                  <tr>                    <th scope="col"></th>                    <th scope="col">Absolute</th>                    <th scope="col">Relative</th>                  </tr>                </thead>                <tbody>                  <tr>                    <th scope="row">DPS</th>                    <td>' + Intl.NumberFormat().format(this.dps) + "</td>                    <td>" + Math.round(this.dps / this.dps_max * 1e4) / 100 + '%</td>                  </tr>                  <tr>                    <th scope="row">Crit</th>                    <td>' + Intl.NumberFormat().format(this.stat_crit) + "</td>                    <td>" + this.name.split("_")[0] + '%</td>                  </tr>                  <tr>                    <th scope="row">Haste</th>                    <td>' + Intl.NumberFormat().format(this.stat_haste) + "</td>                    <td>" + this.name.split("_")[1] + '%</td>                  </tr>                  <tr>                    <th scope="row">Mastery</th>                    <td>' + Intl.NumberFormat().format(this.stat_mastery) + "</td>                    <td>" + this.name.split("_")[2] + '%</td>                  </tr>                  <tr>                    <th scope="row">Versatility</th>                    <td>' + Intl.NumberFormat().format(this.stat_vers) + "</td>                    <td>" + this.name.split("_")[3] + "%</td>                  </tr>                </tbody>              </table>";
          },
          useHTML: !0,
          borderColor: r.background_color
        },
        xAxis: {
          min: 0,
          max: 80,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        yAxis: {
          min: -10,
          max: 70,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        zAxis: {
          min: 10,
          max: 90,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          reversed: !0,
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        }
      };
      if ("talent_target_scaling" === r.data_type) return {
        accessibility: {
          enabled: !1
        },
        credits: {
          href: _i18,
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        chart: {
          backgroundColor: null,
          animation: !1
        },
        colors: e,
        legend: {
          enabled: !0,
          backgroundColor: r.background_color,
          borderColor: r.font_color,
          borderWidth: 1,
          align: "center",
          verticalAlign: "top",
          layout: "horizontal",
          itemStyle: {
            color: r.font_color
          },
          itemHoverStyle: {
            color: r.font_color
          }
        },
        plotOptions: {
          series: {
            connectNulls: !0,
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: r.font_color,
                fontSize: r.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color,
            fontSize: r.font_size
          }
        },
        xAxis: {
          tickInterval: 1,
          title: {
            text: "Target count",
            style: {
              color: o
            }
          },
          labels: {
            enabled: !0,
            style: {
              color: o
            }
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        yAxis: {
          title: {
            text: "DPS",
            style: {
              color: o
            }
          },
          labels: {
            enabled: !0,
            style: {
              color: o
            }
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        }
      };
      var _n8 = r.background_color,
          _s3 = r.axis_color,
          _d5 = r.font_color,
          _u3 = {
        accessibility: {
          enabled: !1
        },
        chart: {
          type: "bar",
          backgroundColor: t,
          style: {
            fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"'
          }
        },
        colors: e,
        credits: {
          href: _i18,
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        legend: {
          align: "right",
          backgroundColor: t,
          borderColor: a,
          borderWidth: 1,
          floating: !1,
          itemMarginBottom: 3,
          itemMarginTop: 0,
          layout: "vertical",
          reversed: !0,
          shadow: !1,
          verticalAlign: "middle",
          x: 0,
          y: 0,
          itemStyle: {
            color: o
          },
          itemHoverStyle: {
            color: o
          },
          title: {
            text: " ",
            style: {
              color: o
            }
          },
          symbolRadius: 0
        },
        plotOptions: {
          series: {
            stacking: "normal",
            borderColor: t,
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            },
            style: {
              textOutline: !1,
              fontSize: l
            },
            point: {
              events: {
                click: function click(e) {
                  var t = this.series.yAxis;
                  t.removePlotLine("helperLine"), t.addPlotLine({
                    value: this.stackY,
                    color: r.font_color,
                    width: 2,
                    id: "helperLine",
                    zIndex: 5,
                    label: {
                      text: this.series.name + " " + this.category,
                      style: {
                        color: r.font_color,
                        fontSize: l
                      },
                      align: "left",
                      verticalAlign: "bottom",
                      rotation: 0,
                      y: -5
                    }
                  });
                }
              }
            }
          }
        },
        series: [],
        title: {
          text: "Loading data...",
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        subtitle: {
          text: '...from <a href="https://bloodmallet.com">bloodmallet</a>',
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        tooltip: {
          headerFormat: "<b>{point.x}</b>",
          shared: !0,
          backgroundColor: t,
          borderColor: a,
          style: {
            color: o,
            fontSize: l
          },
          useHTML: !0
        },
        xAxis: {
          categories: [],
          labels: {
            useHTML: !0,
            style: {
              color: o,
              fontSize: l
            }
          },
          gridLineWidth: 0,
          gridLineColor: a,
          lineColor: a,
          tickColor: a
        },
        yAxis: [{
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === r.value_style ? c : h,
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }, {
          linkedTo: 0,
          opposite: !0,
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === r.value_style ? c : h,
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }]
      };
      return _u3.chart.backgroundColor = _n8, _u3.legend.backgroundColor = _n8, _u3.legend.borderColor = _s3, _u3.legend.itemStyle.color = _d5, _u3.legend.itemHoverStyle.color = _d5, _u3.title.style.color = _d5, _u3.subtitle.style.color = _d5, _u3.tooltip.formatter = function () {
        var e = document.createElement("div");
        e.style.margin = "-4px -7px -7px -7px", e.style.padding = "3px 3px 6px 3px", e.style.backgroundColor = "transparent" !== _n8 ? _n8 : t, "highcharts_old" === r.chart_engine && (e.style.margin = "-7px");
        var o = document.createElement("div");
        e.appendChild(o), o.style.marginLeft = "9px", o.style.marginRight = "9px", o.style.marginBottom = "6px", o.style.fontWeight = "700", o.innerHTML = this.x;
        var a = 0;

        for (var l = this.points.length - 1; l >= 0; l--) {
          a += this.points[l].y;

          var _t23 = void 0,
              _o21 = !1,
              _i19 = 0;

          var _iteratorNormalCompletion17 = true;
          var _didIteratorError17 = false;
          var _iteratorError17 = undefined;

          try {
            for (var _iterator17 = this.points[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
              var _e24 = _step17.value;
              0 !== _e24.y && 0 !== _i19 && _i19 !== _e24.y ? _o21 = !0 : 0 !== _e24.y && 0 === _i19 && (_i19 = _e24.y);
            }
          } catch (err) {
            _didIteratorError17 = true;
            _iteratorError17 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion17 && _iterator17.return != null) {
                _iterator17.return();
              }
            } finally {
              if (_didIteratorError17) {
                throw _iteratorError17;
              }
            }
          }

          if ("talents" !== r.data_type) {
            var _e23 = new DOMParser().parseFromString(this.x, "text/html").body.firstChild.innerText;

            if (!r.data.data.hasOwnProperty(_e23)) {
              var _t24 = void 0;

              var _arr9 = Object.keys(r.data.data);

              for (var _i20 = 0; _i20 < _arr9.length; _i20++) {
                var _o23 = _arr9[_i20];
                _o23.slice(_o23.indexOf("} ") + 2) === _e23 && (_t24 = _o23);
              }

              void 0 !== _t24 && (_e23 = _t24);
            }

            void 0 === _e23 && (_e23 = this.x);

            var _o22 = A(_e23, r.data, r);

            r.data.data.hasOwnProperty(_o22) && (_t23 = r.data.data[_o22].hasOwnProperty(this.points[l].series.name));
          }

          if (0 !== this.points[l].y || _t23) {
            var _t25 = document.createElement("div");

            e.appendChild(_t25);

            var _o24 = document.createElement("span");

            _t25.appendChild(_o24), _o24.style.marginLeft = "9px", _o24.style.borderLeft = "9px solid " + this.points[l].series.color, _o24.style.paddingLeft = "4px", Number.isInteger(this.points[l].series.name) && _o24.appendChild(document.createTextNode(this.points[l].series.name + ":"));
            var _i21 = "";
            ["soulbinds", "races", "talents"].includes(r.data_type) ? _i21 = "" : "relative" === r.value_style && (_i21 = "%"), _t25.appendChild(document.createTextNode("Â Â " + Intl.NumberFormat().format(a) + _i21));
          }
        }

        return e.outerHTML;
      }, _u3.tooltip.backgroundColor = "transparent" !== _n8 ? _n8 : t, _u3.tooltip.borderColor = _s3, _u3.tooltip.style.color = _d5, _u3.xAxis.labels.style.color = _d5, _u3.xAxis.gridLineColor = _s3, _u3.xAxis.lineColor = _s3, _u3.xAxis.tickColor = _s3, _u3.yAxis[0].labels.style.color = _s3, _u3.yAxis[0].stackLabels.style.color = _d5, _u3.yAxis[0].gridLineColor = _s3, _u3.yAxis[0].lineColor = _s3, _u3.yAxis[0].tickColor = _s3, _u3.yAxis[0].title.style.color = _s3, _u3.yAxis[1].labels.style.color = _s3, _u3.yAxis[1].stackLabels.style.color = _d5, _u3.yAxis[1].gridLineColor = _s3, _u3.yAxis[1].lineColor = _s3, _u3.yAxis[1].tickColor = _s3, _u3.yAxis[1].title.style.color = _s3, _u3.credits.style.color = _d5, _u3;
    }
  }

  function x(e, t) {
    var o = document.getElementById("chart"),
        a = o.dataset.filterItemlevels;
    t ? o.dataset.filterItemlevels = a.split(";").filter(function (t) {
      return t !== e;
    }).join(";") : void 0 === a || 0 === a.length ? o.dataset.filterItemlevels = e : o.dataset.filterItemlevels = a + ";" + e;
  }

  function w(e, t) {
    var o = document.getElementById("chart"),
        a = o.dataset.filterSources;
    t ? o.dataset.filterSources = a.split(";").filter(function (t) {
      return t !== e;
    }).join(";") : void 0 === a || 0 === a.length ? o.dataset.filterSources = e : o.dataset.filterSources = a + ";" + e;
  }

  function v(e) {
    return e.split(" ").map(function (e) {
      return e[0].toUpperCase() + e.substring(1);
    }).join(" ");
  }

  function C(e, t) {
    var o = document.createElement("iframe");
    return o.title = t, o.width = 760, o.height = 475, o.src = "https://www.raidbots.com/simbot/render/talents/" + e + "?width=750", o;
  }

  function k(e, t, o) {
    var a = "";

    try {
      a = t.translations[e][n[o.language]];
    } catch (t) {
      r, a = e;
    }

    return void 0 === a && (a = e), a;
  }

  function O(e, t) {
    return Object.keys(e).find(function (o) {
      return e[o] === t;
    });
  }

  function A(e, t, o) {
    var _arr10 = Object.keys(t.translations);

    for (var _i22 = 0; _i22 < _arr10.length; _i22++) {
      var _a26 = _arr10[_i22];
      if (n[o.language] === O(t.translations[_a26], e)) return _a26;
    }

    return e;
  }

  this.init_charts = new function () {
    var e = document.querySelectorAll("div.bloodmallet_chart"),
        l = [];

    for (var _t26 = 0; _t26 < e.length; _t26++) {
      var _o25 = e[_t26];
      if (l.indexOf(_o25.id) > -1) return void console.error("Multiple Elements use the same ID ('" + _o25.id + "'). Aborting bloodmallet_chart_import.js.");
      l.push(_o25.id);
    }

    for (var _l19 = 0; _l19 < e.length; _l19++) {
      var _i23 = void 0;

      try {
        _i23 = e[_l19].id;
      } catch (e) {
        return void console.error("Each .bloodmallet_chart needs an ID. Aborting bloodmallet_chart_import.js.");
      }

      var _n9 = document.getElementById(e[_l19].id);

      if (_n9) {
        var _e25 = {
          chart_id: void 0,
          wow_class: void 0,
          wow_spec: void 0,
          data_type: "trinkets",
          fight_style: "castingpatchwerk",
          covenant: "Kyrian",
          axis_color: a,
          background_color: t,
          font_color: o,
          limit: 7,
          chart_engine: "highcharts",
          tooltip_engine: "wowhead",
          language: "en",
          value_style: "absolute",
          talent_target_scaling_min_target_count: -1,
          talent_target_scaling_max_target_count: -1,
          html_element: _n9
        };

        try {
          void 0 !== bloodmallet.style.axis_color && (_e25.axis_color = bloodmallet.style.axis_color), void 0 !== bloodmallet.style.background_color && (_e25.background_color = bloodmallet.style.background_color), void 0 !== bloodmallet.style.font_color && (_e25.font_color = bloodmallet.style.font_color), void 0 !== bloodmallet.settings.entries && (_e25.limit = bloodmallet.settings.entries), void 0 !== bloodmallet.settings.chart_engine && (_e25.chart_engine = bloodmallet.settings.chart_engine), void 0 !== bloodmallet.settings.tooltip_engine && (_e25.tooltip_engine = bloodmallet.settings.tooltip_engine), void 0 !== bloodmallet.settings.language && (_e25.language = bloodmallet.settings.language), void 0 !== bloodmallet.settings.value_style && (_e25.value_style = bloodmallet.settings.value_style);
        } catch (e) {
          r;
        }

        _n9.getAttribute("data-entries") && (_e25.limit = _n9.getAttribute("data-entries")), _n9.getAttribute("data-fight-style") && (_e25.fight_style = _n9.getAttribute("data-fight-style")), _n9.getAttribute("data-type") && (_e25.data_type = _n9.getAttribute("data-type")), _n9.getAttribute("data-covenant") && (_e25.covenant = _n9.getAttribute("data-covenant")), _n9.getAttribute("data-background-color") && (_e25.background_color = _n9.getAttribute("data-background-color")), _n9.getAttribute("data-font-color") && (_e25.font_color = _n9.getAttribute("data-font-color")), _n9.getAttribute("data-axis-color") && (_e25.axis_color = _n9.getAttribute("data-axis-color")), _n9.getAttribute("data-tooltip-engine") && (_e25.tooltip_engine = _n9.getAttribute("data-tooltip-engine")), _n9.getAttribute("data-chart-engine") && (_e25.chart_engine = _n9.getAttribute("data-chart-engine")), _n9.getAttribute("data-language") && (_e25.language = _n9.getAttribute("data-language")), _n9.getAttribute("data-value-style") && (_e25.value_style = _n9.getAttribute("data-value-style")), _n9.getAttribute("data-talent-target-scaling-min-target-count") && (_e25.talent_target_scaling_min_target_count = parseInt(_n9.getAttribute("data-talent-target-scaling-min-target-count"))), _n9.getAttribute("data-talent-target-scaling-max-target-count") && (_e25.talent_target_scaling_max_target_count = parseInt(_n9.getAttribute("data-talent-target-scaling-max-target-count")));

        var _l20 = !0;

        _n9.getAttribute("data-chart-id") ? _e25.chart_id = _n9.getAttribute("data-chart-id") : (_n9.getAttribute("data-wow-class") || (console.error("Required 'data-chart-id' or 'data-wow-class' attribute wasn't found in " + _i23 + "."), _l20 = !1), _e25.wow_class = _n9.getAttribute("data-wow-class"), _n9.getAttribute("data-wow-spec") || (console.error("Required 'data-chart-id' or 'data-wow-spec' attribute wasn't found in " + _i23 + "."), _l20 = !1), _e25.wow_spec = _n9.getAttribute("data-wow-spec"));

        var _s4 = b(_e25),
            _d6 = !1;

        if ("highcharts" == _e25.chart_engine) try {
          _d6 = Highcharts.chart(_i23, _s4);
        } catch (e) {
          return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        } else if ("highcharts_old" == _e25.chart_engine) try {
          var _e26 = _s4;
          _e26.chart.renderTo = _i23, _d6 = new Highcharts.Chart(_e26);
        } catch (e) {
          return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        }
        _l20 ? u(_e25) : _d6.setTitle({
          text: "Wrong chart setup"
        }, {
          text: "Missing 'data-chart-id', 'data-wow-class' or 'data-wow-spec'. See <a href=\"https://github.com/Bloodmallet/bloodmallet_web_frontend/wiki/How-to-import-charts\">wiki</a>"
        }), setTimeout(p, 1, _e25, _n9, _d6, 0);
      }
    }
  }();
}

document.addEventListener("DOMContentLoaded", function () {
  bloodmallet_chart_import();
});