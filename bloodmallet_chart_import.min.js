"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function bloodmallet_chart_import() {
  var e = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
      t = "#343a40",
      o = "#f8f9fa",
      l = "#828282",
      a = "1.1rem",
      n = !1,
      i = "https://bloodmallet.com/chart/get/",
      r = {
    cn: "cn_CN",
    en: "en_US",
    de: "de_DE",
    es: "es_ES",
    fr: "fr_FR",
    it: "it_IT",
    ko: "ko_KR",
    pt: "pt_BR",
    ru: "ru_RU",
    "zh-hans": "cn_CN"
  },
      s = {
    Kyrian: {
      id: 1,
      color: "#69ccf0"
    },
    Venthyr: {
      id: 2,
      color: "#c41f3b"
    },
    "Night Fae": {
      id: 3,
      color: "#a330c9"
    },
    Necrolord: {
      id: 4,
      color: "#abd473"
    }
  },
      d = {
    1: 145,
    2: 158,
    3: 171,
    4: 184,
    5: 200,
    6: 213,
    7: 226,
    8: 239,
    9: 252,
    10: 265,
    11: 278
  },
      c = {
    unholy: "#abd473",
    frost: "#69ccf0",
    blood: "#c41f3b"
  },
      h = "Î” Damage per second",
      u = "% Damage per second";

  function p(e) {
    n && console.log("load_data");
    var t = e.chart_id,
        o = e.data_type,
        l = e.fight_style,
        a = e.wow_class,
        r = e.wow_spec;

    try {
      if (m(e)) return;
    } catch (e) {
      n && (console.log("Data needs to be loaded."), console.log(e));
    }

    var s = l;
    s += "/" + a, s += "/" + r;
    var d = "";
    d = t ? i + t : i + o + "/" + s;
    var c = new XMLHttpRequest();
    n && console.log("Fetching data from: " + d), c.open("GET", d, !0), c.onload = function (t) {
      if (4 === c.readyState) if (200 === c.status) {
        var _t = JSON.parse(c.responseText);

        e.html_element.dataset.loadedData = c.responseText, n && (console.log(_t), console.log("Load and save finished."));
      } else console.error(c.statusText);
    }, c.onerror = function (e) {
      console.error("Fetching data from bloodmallet.com encountered an error, ", e);
    }, c.send(null);
  }

  function m(e) {
    return JSON.parse(e.html_element.dataset.loadedData);
  }

  function g(e, t, o, l) {
    n && console.log("update_chart");
    var a = e.data_type,
        i = e.limit,
        r = e.chart_engine,
        u = !1;

    try {
      u = m(e);
    } catch (a) {
      return void (l < 30 && setTimeout(g, 200, e, t, o, l + 1));
    }

    if (e.data = u, !0 === u.error || "error" === u.status) return function (e, t) {
      var o = e;

      if (o.innerHTML = "", "error" === t.status) {
        var _e = document.createElement("p");

        _e.innerText = t.message, o.appendChild(_e);
      } else {
        var _e2 = document.createElement("p");

        _e2.innerText = "An error occured during simulation.", o.appendChild(_e2);

        var _l = document.createElement("ul"),
            _a = document.createElement("li");

        _a.textContent = "Title: " + (t.title ? t.title : "~"), _l.appendChild(_a);

        var _n = document.createElement("li");

        _n.textContent = "Spec: " + t.wow_spec + " " + t.wow_class, _l.appendChild(_n);

        var _i = document.createElement("li");

        _i.textContent = "Type: " + t.simulation_type, _l.appendChild(_i);

        var _r = document.createElement("li");

        _r.textContent = "Fight style: " + t.fight_style, _l.appendChild(_r);

        var _s = document.createElement("li");

        _s.textContent = "ID: " + t.id, _l.appendChild(_s);

        var _d = document.createElement("li");

        _d.textContent = "Custom profile:", _l.appendChild(_d), _d.appendChild(document.createElement("br"));

        var _c = document.createElement("textarea");

        _c.readOnly = !0, _c.value = t.custom_profile, _c.placeholder = "No custom profile", _c.style.width = "100%", _d.appendChild(_c);

        var _h = document.createElement("li");

        _h.textContent = "Log:", _l.appendChild(_h), _h.appendChild(document.createElement("br"));

        var _u = document.createElement("textarea");

        _u.readOnly = !0, _u.value = t.log, _u.placeholder = "No log available", _u.style.width = "100%", _h.appendChild(_u), o.appendChild(_l);
      }
    }(t, u);
    if (wow_class = u.simc_settings.class, wow_spec = u.simc_settings.spec, fight_style = u.simc_settings.fight_style, e.data_type = a = u.data_type, "soulbinds" === a && (e.conduit_rank = Math.max.apply(Math, _toConsumableArray(u.simulated_steps)).toString()), function (e, t) {
      if (!["bloodmallet.com", "127.0.0.1:8000"].includes(window.location.host)) return;
      n && console.log("provide_meta_data");
      ["trinkets", "covenants", "conduits", "soulbind_nodes", "legendaries", "soulbinds"].includes(e.data_type) && (document.getElementById("value_style_switch").hidden = !1);
      document.getElementById("meta-info").hidden = !1;

      for (var _e3 in t.simc_settings) {
        var _o = document.createTextNode(t.simc_settings[_e3]),
            _l2 = document.getElementById("c_" + _e3);

        _l2.innerText = "", _l2.appendChild(_o);
      }

      var o = document.createElement("a");
      o.href = "https://github.com/simulationcraft/simc/commit/" + t.simc_settings.simc_hash, o.innerText = t.simc_settings.simc_hash.substring(0, 7);
      var l = document.getElementById("c_simc_hash");
      l.innerText = "", l.appendChild(o);

      for (var _e4 in t.profile.character) {
        try {
          var _o2 = document.getElementById("c_" + _e4);

          _o2.innerHTML = "";

          var _l3 = void 0;

          _l3 = "soulbind" === _e4 ? document.createTextNode(t.profile.character[_e4].replaceAll(",", " ").replaceAll("/", " ")) : document.createTextNode(t.profile.character[_e4].split(" ").map(function (e) {
            return e[0].toUpperCase() + e.substring(1);
          }).join(" ")), _o2.appendChild(_l3);
        } catch (e) {}
      }

      var a = void 0 !== t.profile.character.talents ? t.profile.character.talents : "0000000";
      var i = document.getElementById("c_talents");
      i.innerHTML = "";

      for (var _o3 = 0; _o3 < a.length; _o3++) {
        var _l4 = a[_o3];

        var _n2 = document.createElement("a");

        _n2.href = "", _n2.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/";

        try {
          _n2.href += "spell=" + t.talent_data[parseInt(_o3) + 1][parseInt(_l4)].spell_id;
        } catch (e) {
          continue;
        }

        _n2.dataset.whIconSize = "medium", i.appendChild(_n2);
      }

      for (var _o4 in t.profile.items) {
        var _l5 = document.createElement("a");

        _l5.href = "", _l5.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", _l5.href += "item=" + t.profile.items[_o4].id;
        var _a2 = [];

        try {
          _a2.push("bonus=" + t.profile.items[_o4].bonus_id.split("/").join(":"));
        } catch (e) {}

        try {
          t.profile.items[_o4].hasOwnProperty("ilevel") && _a2.push("ilvl=" + t.profile.items[_o4].ilevel);
        } catch (e) {}

        _a2.length > 0 && (_l5.href += "?" + _a2.join("&")), _l5.dataset.whIconSize = "medium";

        var _n3 = document.getElementById("c_" + _o4);

        _n3.innerHTML = "", _n3.appendChild(_l5);
      }

      "talents" === e.data_type && (document.getElementById("talent-warning").hidden = !1, function (e, t) {
        n && console.log("build_talent_table");
        document.getElementById("talent-table").hidden = !1;
        var o = [];

        for (var _e5 = 1; _e5 < 8; _e5++) {
          for (var _t2 = 1; _t2 < 4; _t2++) {
            o.push(_e5.toString() + _t2.toString());
          }
        }

        for (var _i2 = 0; _i2 < o.length; _i2++) {
          var _l6 = _o5[_i2];

          var _o5 = document.getElementById(_l6);

          try {
            var _a3 = document.createElement("h5"),
                _i3 = t.talent_data[_l6.slice(0, 1)][_l6.slice(1, 2)];

            _a3.innerHTML = N(e, _i3.name, _l6, t), _o5.innerHTML = "", _o5.appendChild(_a3), _o5.appendChild(I("Mean", B(_l6, t))), _o5.appendChild(I("Min", P(_l6, t)[1], P(_l6, t)[0])), _o5.appendChild(I("Max", D(_l6, t)[1], D(_l6, t)[0]));

            var _r2 = M(_l6, t),
                _s2 = _r2.slice(0, _l6.slice(0, 1) - 1) + "0" + _r2.slice(_l6.slice(0, 1), 8),
                _d2 = t.data[_r2],
                _c2 = t.data[_s2];

            _o5.appendChild(I("Max dps", F(_c2, _d2), _r2)), _r2 = M(_l6, t);

            var _h2 = F(t.data[t.sorted_data_keys[0]], t.data[_r2]);

            _o5.appendChild(I("Max dps minus global best", _h2, _r2));
          } catch (e) {
            _o5.innerHTML = "-", n && console.warn(e);
          }
        }

        $(function () {
          $('[data-toggle="tooltip"]').tooltip();
        });
      }(e, t));

      if ("soulbinds" === e.data_type) {
        var _o6 = document.getElementById("post_chart");

        _o6.hidden = !1, _o6.innerHTML = "", Object.keys(t.covenant_ids).forEach(function (l) {
          var a = t.covenant_ids[l];
          var n = document.createElement("h3");
          n.appendChild(document.createTextNode(H(l, t, e))), _o6.appendChild(n);
          var i = 0;
          var r = x(e, _(e, t), t);
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = r[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _l7 = _step.value;

              if (t.covenant_mapping[_l7].indexOf(a) > -1) {
                i += 1;

                var _a4 = document.createElement("h4");

                _a4.appendChild(document.createTextNode(i + ". " + H(_l7, t, e))), _a4.classList += "ml-3", _a4.id = _l7, _o6.appendChild(_a4);

                var _n4 = document.createElement("p");

                _n4.classList += "ml-5";
                var _r3 = [];
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = w(e, _l7, t)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _o7 = _step2.value;

                    if (t.data.hasOwnProperty(_o7)) {
                      var _l8 = document.createElement("a");

                      _l8.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", t.hasOwnProperty("spell_ids") && t.spell_ids.hasOwnProperty(_o7) && (_l8.href += "spell=" + t.spell_ids[_o7] + "/" + L(_o7)), _l8.appendChild(document.createTextNode(H(_o7, t, e))), _r3.push(_l8);
                    }
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }

                for (var _e6 = 0; _e6 < _r3.length; _e6++) {
                  0 !== _e6 && _n4.appendChild(document.createTextNode(", ")), _n4.appendChild(_r3[_e6]);
                }

                _o6.appendChild(_n4);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      }

      if ("trinkets" === e.data_type) {
        var _e7 = document.getElementById("filter-itemlevels-options");

        _e7.innerHTML = "";

        var _o8 = document.getElementById("chart");

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = t.simulated_steps[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _l10 = _step3.value;

            var _t3 = "step_" + _l10,
                _a6 = document.createElement("div");

            _a6.className += " form-check";

            var _n5 = document.createElement("input");

            _n5.className += " form-check-input", _n5.className += " filter-itemlevels", _n5.type = "checkbox", _n5.id = _t3, _n5.value = _l10, void 0 === _o8.dataset.filterItemlevels ? _n5.checked = !0 : _n5.checked = -1 === _o8.dataset.filterItemlevels.split(";").indexOf(_l10.toString()), _a6.appendChild(_n5);

            var _i4 = document.createElement("label");

            _i4.className = " form-check-label", _i4.htmlFor = _t3, _i4.appendChild(document.createTextNode(_l10)), _a6.appendChild(_i4), _e7.appendChild(_a6), _n5.addEventListener("change", function (e, t) {
              E(e.target.value, e.target.checked), bloodmallet_chart_import();
            });
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        var _l9 = document.getElementById("filter-sources-options");

        _l9.innerHTML = "";

        var _a5 = Object.values(t.data_sources).filter(function (e, t, o) {
          return o.indexOf(e) === t;
        }).sort();

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = _a5[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _e8 = _step4.value;

            var _t4 = "step_" + _e8.replaceAll(" ", "_"),
                _a7 = document.createElement("div");

            _a7.className += " form-check";

            var _n6 = document.createElement("input");

            _n6.className += " form-check-input", _n6.className += " filter-sources", _n6.type = "checkbox", _n6.id = _t4, _n6.value = _e8, void 0 === _o8.dataset.filterSources ? _n6.checked = !0 : _n6.checked = -1 === _o8.dataset.filterSources.split(";").indexOf(_e8.toString()), _a7.appendChild(_n6);

            var _i5 = document.createElement("label");

            _i5.className = " form-check-label", _i5.htmlFor = _t4, _i5.appendChild(document.createTextNode(_e8)), _a7.appendChild(_i5), _l9.appendChild(_a7), _n6.addEventListener("change", function (e, t) {
              T(e.target.value, e.target.checked), bloodmallet_chart_import();
            });
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      try {
        $WowheadPower.refreshLinks();
      } catch (e) {}
    }(e, u), "secondary_distributions" === a) return function (e, t, o) {
      n && console.log("update_secondary_distribution_chart");
      var l = t.id,
          a = (e.chart_id, e.fight_style),
          i = e.wow_class,
          r = e.wow_spec,
          s = (e.chart_engine, !1);
      s = m(e), i = s.simc_settings.class, r = s.simc_settings.spec, a = s.simc_settings.fight_style;
      var d = O(e),
          c = !1;
      if ("highcharts" == e.chart_engine) try {
        c = Highcharts.chart(l, d);
      } catch (e) {
        return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
      } else if ("highcharts_old" == e.chart_engine) try {
        var _e9 = d;
        _e9.chart.renderTo = l, c = new Highcharts.Chart(_e9);
      } catch (e) {
        return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
      }
      o = void 0, o = c;
      var h = void 0;
      h = Object.keys(s.data)[0];
      var u = s.data[h][s.sorted_data_keys[h][0]],
          p = s.data[h][s.sorted_data_keys[h][s.sorted_data_keys[h].length - 1]],
          g = C(100, 0, 100),
          f = C(0, 0, 100),
          _ = {
        name: Intl.NumberFormat().format(u) + " DPS",
        color: "rgb(" + g[0] + "," + g[1] + "," + g[2] + ")",
        data: []
      };

      var _arr = Object.keys(s.data[h]);

      for (var _i6 = 0; _i6 < _arr.length; _i6++) {
        var _t5 = _arr[_i6];

        var _o9 = s.data[h][_t5],
            _l11 = C(_o9, p, u),
            _a8 = 1,
            _n7 = "#232227",
            _i7 = 5;

        u === _o9 && (_a8 = 3, _i7 = 8, _n7 = e.font_color);

        var _r4 = void 0;

        if (_t5.indexOf("70") > -1) switch (_r4 = {
          enabled: !0,
          allowOverlap: !0
        }, _t5.indexOf("70")) {
          case 0:
            _r4.format = "Crit", _r4.verticalAlign = "top";
            break;

          case 3:
            _r4.format = "Haste";
            break;

          case 6:
            _r4.format = "Mastery", _r4.verticalAlign = "top";
            break;

          case 9:
            _r4.format = "Versatility", _r4.verticalAlign = "top";
        }
        var _d3 = s.secondary_sum;

        var _c3 = parseInt(_t5.split("_")[0]),
            _m = parseInt(_t5.split("_")[1]),
            _g = parseInt(_t5.split("_")[2]),
            _f = parseInt(_t5.split("_")[3]);

        _.data.push({
          x: Math.sqrt(3) / 2 * (_c3 + 1 / 3 * _m),
          y: Math.sqrt(2 / 3) * _m,
          z: _g + .5 * _c3 + .5 * _m,
          name: _t5,
          color: "rgb(" + _l11[0] + "," + _l11[1] + "," + _l11[2] + ")",
          dps: _o9,
          dps_max: u,
          dps_min: p,
          stat_crit: _c3 * _d3 / 100,
          stat_haste: _m * _d3 / 100,
          stat_mastery: _g * _d3 / 100,
          stat_vers: _f * _d3 / 100,
          stat_sum: _d3,
          marker: {
            radius: _i7,
            lineColor: _n7,
            lineWidth: _a8
          },
          dataLabels: _r4
        });
      }

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      o.addSeries(_, !1), o.addSeries({
        name: Intl.NumberFormat().format(p) + " DPS",
        color: "rgb(" + f[0] + "," + f[1] + "," + f[2] + ")"
      }, !1);
      var y = s.timestamp,
          b = y.split("-")[0],
          v = y.split("-")[1],
          w = y.split("-")[2].split(" ")[0],
          x = y.split(" ")[1].split(":")[0],
          k = y.split(":")[1],
          A = "Last updated ",
          L = new Date() - new Date(Date.UTC(b, v - 1, w, x, k)),
          E = Math.floor(L / 24 / 3600 / 1e3);
      E > 0 && (A += "".concat(E, "d "));
      var T = Math.floor(L / 3600 / 1e3) - 24 * E;
      A += "".concat(T, "h ago"), o.redraw(), function (e) {
        function t(t) {
          var l = (t = o.pointer.normalize(t)).chartX,
              a = t.chartY,
              n = o.options.chart.options3d.alpha,
              i = o.options.chart.options3d.beta,
              r = 5;

          function s(e) {
            e = o.pointer.normalize(e), o.update({
              chart: {
                options3d: {
                  alpha: n + (e.chartY - a) / r,
                  beta: i + (l - e.chartX) / r
                }
              }
            }, void 0, void 0, !1);
          }

          o.unbindDragMouse = e.addEvent(document, "mousemove", s), o.unbindDragTouch = e.addEvent(document, "touchmove", s), e.addEvent(document, "mouseup", o.unbindDragMouse), e.addEvent(document, "touchend", o.unbindDragTouch);
        }

        e.addEvent(o.container, "mousedown", t), e.addEvent(o.container, "touchstart", t);
      }(Highcharts);
    }(e, t, o);
    a = u.data_type;
    var p = u;
    var y,
        b,
        v = {};
    y = "soulbinds" === a ? "nodes" === e.chart_mode ? (y = p["sorted_data_keys_" + L(e.covenant).replace("-", "_") + "_" + e.conduit_rank].slice(0, i)).map(function (t) {
      return [t, Math.max.apply(Math, _toConsumableArray(p.simulated_steps.map(function (o) {
        return Number.isInteger(p.data[t][e.covenant]) ? p.data[t][e.covenant] : p.data[t][e.covenant][o] || 0;
      })))];
    }).sort(function (e, t) {
      return t[1] - e[1];
    }).map(function (e) {
      return e[0];
    }) : p.sorted_data_keys[e.conduit_rank].slice(0, i) : p.sorted_data_keys.slice(0, i), b = ["races", "talents"].includes(a) ? 0 : ["soulbinds"].includes(a) && "nodes" === e.chart_mode ? p.data.baseline[e.covenant] : ["legendaries", "soulbind_nodes", "soulbinds", "covenants", "domination_shards"].includes(a) ? p.data.baseline : p.data.baseline[p.simulated_steps[p.simulated_steps.length - 1]];

    var _arr2 = Object.keys(p.data);

    for (var _i8 = 0; _i8 < _arr2.length; _i8++) {
      var _e15 = _arr2[_i8];
      "{" === _e15[0] && "}" === _e15[_e15.length - 1] && (v[_e15] = p.data[_e15]);
    }

    n && (console.log(y), console.log("Baseline dps: " + b), console.log("other baseline dps: " + v));
    var S = [];

    if (S = "soulbinds" == a && "soulbinds" === e.chart_mode ? void 0 : p.simulated_steps, n && console.log("simulated_steps: " + S), "soulbinds" === a && "nodes" !== e.chart_mode && (y = x(e, _(e, p), p)), "trinkets" === a) {
      if (void 0 !== e.html_element.dataset.filterItemlevels) {
        var _t7 = e.html_element.dataset.filterItemlevels.split(";");

        S = S.filter(function (e) {
          return -1 === _t7.indexOf(e.toString());
        });
      }

      if (y = y.filter(function (e) {
        return S.some(function (t) {
          return void 0 !== p.data[e][t];
        });
      }), void 0 !== e.html_element.dataset.filterActivePassive) {
        var _t8 = e.html_element.dataset.filterActivePassive.split(";");

        var _o10 = [];
        _t8.map(function (e) {
          "active" === e ? _o10.push(!0) : "passive" === e && _o10.push(!1);
        }), y = y.filter(function (e) {
          return -1 === _o10.indexOf(p.data_active[e]);
        });
      }

      if (void 0 !== e.html_element.dataset.filterSources) {
        var _t9 = e.html_element.dataset.filterSources.split(";");

        y = y.filter(function (e) {
          return -1 === _t9.indexOf(p.data_sources[e]);
        });
      }

      var _t6 = [];
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = y[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _e10 = _step5.value;

          var _o11 = void 0;

          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = S[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var _t10 = _step6.value;
              void 0 === _o11 && void 0 !== p.data[_e10][_t10] && (_o11 = p.data[_e10][_t10]);
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
                _iterator6.return();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }

          _t6.push([_e10, _o11]);
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      _t6.sort(function (e, t) {
        return e[1] <= t[1];
      }), y = _t6.map(function (e) {
        return e[0];
      });
    }

    for (o.setTitle({
      text: p.title
    }, {
      text: p.subtitle
    }, !1); o.series[0];) {
      o.series[0].remove(!1);
    }

    var j = void 0;

    if (j = "talents" === a ? y.map(function (t) {
      var o = [];

      for (var _l12 = 0; _l12 < t.length; _l12++) {
        o.push(A(e, (_l12 + 1).toString() + t[_l12], p));
      }

      return o.join("");
    }) : y.map(function (t) {
      var o = t.indexOf("} ") > -1 ? t.slice(t.indexOf("} ") + 2, t.length) : t;
      return o = o.indexOf(" +") > -1 ? o.slice(0, o.indexOf(" +")) : o, A(e, o, p);
    }), n && console.log(j), "highcharts" == r ? o.update({
      xAxis: {
        categories: j
      }
    }, !1) : "highcharts_old" == r && o.xAxis[0].setCategories(j, !1), S) {
      var _t11 = {};

      for (var _o12 in p.data) {
        if (p.data.hasOwnProperty(_o12)) {
          var _l13 = p.data[_o12];
          _t11[_o12] = {};
          var _n8 = b;
          "conduits" === a ? _n8 = p.data.baseline[p.covenant_mapping[_o12]] : "soulbinds" === a && "nodes" === e.chart_mode && (_n8 = p.data.baseline[e.covenant]);

          var _loop = function _loop(_a9) {
            var i = S[_a9];
            var r = _l13.hasOwnProperty(e.covenant) ? _l13[e.covenant] : _l13;
            if (Number.isInteger(r)) _t11[_o12][i] = Math.max(r - _n8, 0), _n8 = 0 === _t11[_o12][i] ? _n8 : r;else if (r.hasOwnProperty(i) && "soulbinds" === e.data_type && "nodes" === e.chart_mode) {
              var _e11 = S.slice(_a9 + 1).map(function (e) {
                return r[e];
              });

              _e11 = 0 === _e11.length ? b : _e11.reduce(function (e, t) {
                return e > t ? e : t;
              }), _t11[_o12][i] = Math.max(r[i] - _e11, 0), _n8 = r[i];
            } else r.hasOwnProperty(i) ? (_t11[_o12][i] = Math.max(r[i] - _n8, 0), _n8 = 0 === _t11[_o12][i] ? _n8 : r[i]) : _t11[_o12][i] = 0;
          };

          for (var _a9 = S.length - 1; _a9 >= 0; _a9--) {
            _loop(_a9);
          }
        }
      }

      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = S[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var _l14 = _step7.value;
          var _n9 = [];

          for (var _o13 = 0; _o13 < y.length; _o13++) {
            var _a10 = y[_o13];

            _n9.push(k(e, _t11[_a10][_l14], b));
          }

          var _i9 = _l14;
          "soulbinds" === a && "nodes" === e.chart_mode && (_i9 = d[_i9]), o.addSeries({
            data: _n9,
            name: _i9
          }, !1);
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }
    } else if (["soulbind_nodes", "covenants"].includes(a)) {
      var z = [];

      for (var _t12 = 0; _t12 < y.length; _t12++) {
        var _o14 = y[_t12],
            _l15 = p.data[_o14] - b;

        z.push(k(e, _l15, b));
      }

      o.addSeries({
        data: z,
        name: "Data",
        showInLegend: !1
      }, !1);
    } else if (["legendaries"].includes(a)) {
      var _t13 = [],
          _l16 = "{" + p.profile.character.covenant + "}",
          _a11 = {};

      var _arr3 = Object.keys(v);

      for (var _i10 = 0; _i10 < _arr3.length; _i10++) {
        var _e12 = _arr3[_i10];
        _a11[_e12] = [];
      }

      _a11[_l16] = [];
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = y[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var _o15 = _step8.value;
          var _n11 = b;

          if (_o15.indexOf("} ") > -1) {
            var _t14 = _o15.slice(0, _o15.indexOf("} ") + 1);

            _n11 = v[_t14], _a11[_t14].push(k(e, _n11, b));

            var _arr5 = Object.keys(_a11);

            for (var _i13 = 0; _i13 < _arr5.length; _i13++) {
              var _e13 = _arr5[_i13];
              _e13 !== _t14 && _a11[_e13].push(0);
            }
          } else {
            var _arr6 = Object.keys(_a11);

            for (var _i14 = 0; _i14 < _arr6.length; _i14++) {
              var _t15 = _arr6[_i14];
              _t15 !== _l16 ? _a11[_t15].push(0) : _a11[_t15].push(k(e, _n11, _n11));
            }
          }

          var _i12 = p.data[_o15] - _n11;

          _t13.push(k(e, _i12, _n11));
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      o.addSeries({
        data: _t13,
        name: "Legendary effect",
        showInLegend: !0,
        color: "#ff7d0a"
      }, !1);
      var _n10 = {
        night_fae: "Night Fae",
        necrolord: "Necrolord",
        venthyr: "Venthyr",
        kyrian: "Kyrian"
      };

      var _arr4 = Object.keys(_a11);

      for (var _i11 = 0; _i11 < _arr4.length; _i11++) {
        var _e14 = _arr4[_i11];
        o.addSeries({
          data: _a11[_e14],
          name: _n10[_e14.slice(1, _e14.length - 1)],
          showInLegend: !0,
          color: s[_n10[_e14.slice(1, _e14.length - 1)]].color
        }, !1);
      }
    } else if (["domination_shards"].includes(a)) {
      var _arr7 = Object.keys(c);

      for (var _i15 = 0; _i15 < _arr7.length; _i15++) {
        var _t17 = _arr7[_i15];
        var _l18 = [];
        var _iteratorNormalCompletion10 = true;
        var _didIteratorError10 = false;
        var _iteratorError10 = undefined;

        try {
          for (var _iterator10 = y[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
            var _o17 = _step10.value;
            var _a13 = _o17,
                _n12 = b;

            if (_o17.indexOf(" +") > -1 && (_a13 = _o17.split(" +")[0], _n12 = p.data[_a13]), p.shard_type[_a13] === _t17) {
              var _t18 = p.data[_o17] - _n12;

              _l18.push(k(e, _t18, _n12));
            } else _l18.push(k(e, 0, _n12));
          }
        } catch (err) {
          _didIteratorError10 = true;
          _iteratorError10 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
              _iterator10.return();
            }
          } finally {
            if (_didIteratorError10) {
              throw _iteratorError10;
            }
          }
        }

        o.addSeries({
          data: _l18,
          name: _t17 + (y[0].indexOf(" +") > -1 ? " set" : ""),
          showInLegend: !0,
          color: c[_t17]
        }, !1);
      }

      if (y[0].indexOf(" +") > -1) {
        var _t16 = [];
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = y[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var _o16 = _step9.value;

            var _l17 = _o16.split(" +")[0],
                _a12 = p.data[_l17] - b;

            _t16.push(k(e, _a12, b));
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }

        o.addSeries({
          data: _t16,
          name: "shard",
          showInLegend: !0,
          color: "#ff7d0a"
        }, !1);
      }
    } else if (["soulbinds"].includes(a) && "soulbinds" === e.chart_mode) {
      var _iteratorNormalCompletion11 = true;
      var _didIteratorError11 = false;
      var _iteratorError11 = undefined;

      try {
        for (var _iterator11 = Object.keys(s).sort().reverse()[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
          var _t19 = _step11.value;
          var _l19 = s[_t19].id;
          var _a14 = [];

          for (var _t20 = 0; _t20 < y.length; _t20++) {
            var _o18 = y[_t20],
                _n13 = 0;
            p.covenant_mapping[_o18][0] === _l19 && (_n13 = f(e, _o18, p)), _a14.push(_n13);
          }

          o.addSeries({
            data: _a14,
            name: H(_t19, p, e),
            showInLegend: !0,
            color: s[_t19].color
          }, !1);
        }
      } catch (err) {
        _didIteratorError11 = true;
        _iteratorError11 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion11 && _iterator11.return != null) {
            _iterator11.return();
          }
        } finally {
          if (_didIteratorError11) {
            throw _iteratorError11;
          }
        }
      }

      o.yAxis[0].options.title.text = h, o.yAxis[1].options.title.text = h;
    } else {
      z = [];

      for (var _t21 = 0; _t21 < y.length; _t21++) {
        var _o19 = y[_t21],
            _l20 = p.data[_o19];
        "soulbinds" === a && (_l20 = p.data[_o19][e.conduit_rank]), z.push(_l20);
      }

      o.addSeries({
        data: z,
        name: "DPS",
        showInLegend: !1
      }, !1);
    }

    ["trinkets"].indexOf(a) > -1 ? o.legend.title.attr({
      text: "Itemlevel"
    }) : "races" === a || "domination_shards" === a ? o.legend.title.attr({
      text: ""
    }) : "soulbinds" === a && "nodes" === e.chart_mode && o.legend.title.attr({
      text: "Conduit Rank"
    }), o.redraw(), "highcharts_old" == r && o.reflow(), t.style.height = 200 + 30 * y.length + "px", "highcharts" == r && o.setSize(t.style.width, t.style.height), "wowdb" == e.tooltip_engine && setTimeout(function () {
      !function (e) {
        n && console.log("readd_wowdb_tooltips");

        try {
          CurseTips["wowdb-tooltip"].watchElements(document.getElementById(e).getElementsByTagName("a"));
        } catch (e) {
          console.log("Setting wowdb (CurseTips) tooltips failed. Error: ", e);
        }
      }(t.id);
    }, 1);
  }

  function f(e, t, o) {
    var l = y(t, o),
        a = b(e, t, o),
        n = o.data.baseline[l],
        i = v(e, t, a, o),
        r = i.indexOf(Math.max.apply(Math, _toConsumableArray(i)));
    return n + i[r];
  }

  function _(e, t) {
    return t.sorted_data_keys[e.conduit_rank].filter(function (o) {
      return t.renowns[o][0] <= e.renown;
    });
  }

  function y(e, t) {
    return covenant = Object.entries(t.covenant_ids).filter(function (o) {
      return o[1] === t.covenant_mapping[e][0];
    })[0][0];
  }

  function b(e, t, o) {
    return o.paths[t].slice(0, o.paths[t].length).map(function (l) {
      return l.filter(function (l, a) {
        return o.renowns[t][a] <= e.renown;
      });
    });
  }

  function v(e, t, o, l) {
    var a = y(t, l),
        n = l.data.baseline[a];
    return o.map(function (t) {
      var o = t.map(function (e, t) {
        return [e, t];
      }).filter(function (e) {
        return "Potency Conduit" === e[0];
      }).map(function (e) {
        return e[1];
      });
      return t.map(function (t, i) {
        var r = 0;

        try {
          r = l.data[t][a] - n;
        } catch (e) {}

        if ("Potency Conduit" === t) {
          var _t22 = "sorted_data_keys_" + L(a).replace("-", "_") + "_" + e.conduit_rank;

          r = l.data[l[_t22].filter(function (e) {
            return l.conduits.indexOf(e) > -1;
          })[o.indexOf(i)]][a][e.conduit_rank] - n;
        }

        return r;
      }).reduce(function (e, t) {
        return e + t;
      }, 0);
    });
  }

  function w(e, t, o) {
    var l = b(e, t, o),
        a = v(e, t, l, o),
        n = l[a.indexOf(Math.max.apply(Math, _toConsumableArray(a)))],
        i = n.map(function (e, t) {
      return [e, t];
    }).filter(function (e) {
      return "Potency Conduit" === e[0];
    }).map(function (e) {
      return e[1];
    });
    return n.map(function (t, l) {
      if ("Potency Conduit" === t) {
        var _t23 = "sorted_data_keys_" + L(covenant).replace("-", "_") + "_" + e.conduit_rank;

        return o[_t23].filter(function (e) {
          return o.conduits.indexOf(e) > -1;
        })[i.indexOf(l)];
      }

      return t;
    });
  }

  function x(e, t, o) {
    return t.map(function (t) {
      return [t, f(e, t, o)];
    }).sort(function (e, t) {
      return t[1] - e[1];
    }).map(function (e) {
      return e[0];
    });
  }

  function k(e, t, o) {
    return "absolute" === e.value_style ? t : "relative" === e.value_style ? Math.round(1e4 * t / o) / 100 : void console.error("Unknown value-style", e.value_style);
  }

  function C(e, t, o) {
    n && console.log("create_color");
    var l = [0, 255, 255],
        a = [255, 255, 0],
        i = [255, 0, 0],
        r = 0,
        s = 0;

    for (var _e16 = 0; _e16 < 3; _e16++) {
      r += Math.abs(i[_e16] - a[_e16]), s += Math.abs(a[_e16] - l[_e16]);
    }

    var d = t + (o - t) * (s / (s + r));

    if (e >= d) {
      var _t24 = (e - d) / (o - d);

      return [Math.floor(i[0] * _t24 + a[0] * (1 - _t24)), Math.floor(i[1] * _t24 + a[1] * (1 - _t24)), Math.floor(i[2] * _t24 + a[2] * (1 - _t24))];
    }

    {
      var _o20 = (e - t) / (d - t);

      return [Math.floor(a[0] * _o20 + l[0] * (1 - _o20)), Math.floor(a[1] * _o20 + l[1] * (1 - _o20)), Math.floor(a[2] * _o20 + l[2] * (1 - _o20))];
    }
  }

  function A(e, t, o) {
    if (n && (console.log("get_category_name"), console.log(t)), "wowhead" != e.tooltip_engine && "wowdb" != e.tooltip_engine) return H(t, o, e);
    if (["races"].includes(e.data_type)) return H(t, o, e);

    if (["soulbinds"].includes(e.data_type) && "soulbinds" === e.chart_mode) {
      var _l21 = '<a href="#' + t + '">';

      return _l21 += H(t, o, e), _l21 += "</a>";
    }

    if ("wowhead" == e.tooltip_engine) {
      var _l22 = document.createElement("a");

      if (_l22.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", o.hasOwnProperty("item_ids") && o.item_ids.hasOwnProperty(t)) {
        if (_l22.href += "item=" + o.item_ids[t] + "/" + L(t), void 0 !== o.simulated_steps) {
          var _e17 = o.simulated_steps[o.simulated_steps.length - 1];
          "string" == typeof _e17 && _e17.indexOf("_") > -1 && (_e17 = _e17.split("_")[1]), _l22.href += "&ilvl=" + _e17;
        }
      } else if (o.hasOwnProperty("spell_ids") && o.spell_ids.hasOwnProperty(t)) _l22.href += "spell=" + o.spell_ids[t] + "/" + L(t);else if ("talents" === e.data_type) {
        if ("0" === t[1]) return t[1];
        _l22.href += "spell=" + o.talent_data[t[0]][t[1]].spell_id;
      }

      return "talents" === e.data_type ? _l22.appendChild(document.createTextNode(t[1])) : _l22.appendChild(document.createTextNode(H(t, o, e))), _l22.outerHTML;
    }

    if ("wowdb" == e.tooltip_engine) {
      var _l23 = document.createElement("a");

      _l23.href = "http://www.wowdb.com/";

      try {
        _l23.href += "items/" + o.item_ids[t];
      } catch (e) {
        n && (console.log(e), console.log("We're probably looking at a spell."));
      }

      if (_l23.href.indexOf("items") > -1) {
        var _e18 = o.simulated_steps[o.simulated_steps.length - 1];
        "string" == typeof _e18 && _e18.indexOf("_") > -1 && (_e18 = _e18.split("_")[1]), _l23.href += "?itemLevel=" + _e18;
      }

      try {
        _l23.href += "spells/" + o.spell_ids[t];
      } catch (e) {
        n && (console.log(e), console.log("We're probably looking at an item."));
      }

      if ("talents" === e.data_type) {
        if ("0" === t[1]) return t[1];
        _l23.href += "spells/" + o.talent_data[t[0]][t[1]].spell_id;
      }

      _l23.dataset.tooltipHref = _l23.href;

      var _a15 = void 0;

      return _a15 = "talents" === e.data_type ? t[1] : H(t, o, e), _l23.appendChild(document.createTextNode(_a15)), _l23.outerHTML;
    }
  }

  function L(e) {
    return e.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }

  function O(i) {
    if (n && console.log("update_chart_style"), "highcharts" == i.chart_engine || "highcharts_old" == i.chart_engine) {
      if ("secondary_distributions" === i.data_type) return {
        chart: {
          renderTo: "scatter_plot_chart",
          type: "scatter3d",
          backgroundColor: null,
          animation: !1,
          height: 800,
          width: 800,
          options3d: {
            enabled: !0,
            alpha: 10,
            beta: 30,
            depth: 800,
            fitToPlot: !1
          }
        },
        legend: {
          enabled: !0,
          backgroundColor: i.background_color,
          borderColor: i.font_color,
          borderWidth: 1,
          align: "right",
          verticalAlign: "middle",
          layout: "vertical",
          itemStyle: {
            color: i.font_color
          },
          itemHoverStyle: {
            color: i.font_color
          }
        },
        plotOptions: {
          series: {
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: i.font_color,
                fontSize: i.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color,
            fontSize: i.font_size
          }
        },
        tooltip: {
          headerFormat: "",
          pointFormatter: function pointFormatter() {
            return '<table class="">                <thead>                  <tr>                    <th scope="col"></th>                    <th scope="col">Absolute</th>                    <th scope="col">Relative</th>                  </tr>                </thead>                <tbody>                  <tr>                    <th scope="row">DPS</th>                    <td>' + Intl.NumberFormat().format(this.dps) + "</td>                    <td>" + Math.round(this.dps / this.dps_max * 1e4) / 100 + '%</td>                  </tr>                  <tr>                    <th scope="row">Crit</th>                    <td>' + Intl.NumberFormat().format(this.stat_crit) + "</td>                    <td>" + this.name.split("_")[0] + '%</td>                  </tr>                  <tr>                    <th scope="row">Haste</th>                    <td>' + Intl.NumberFormat().format(this.stat_haste) + "</td>                    <td>" + this.name.split("_")[1] + '%</td>                  </tr>                  <tr>                    <th scope="row">Mastery</th>                    <td>' + Intl.NumberFormat().format(this.stat_mastery) + "</td>                    <td>" + this.name.split("_")[2] + '%</td>                  </tr>                  <tr>                    <th scope="row">Versatility</th>                    <td>' + Intl.NumberFormat().format(this.stat_vers) + "</td>                    <td>" + this.name.split("_")[3] + "%</td>                  </tr>                </tbody>              </table>";
          },
          useHTML: !0,
          borderColor: i.background_color
        },
        xAxis: {
          min: 0,
          max: 80,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        yAxis: {
          min: -10,
          max: 70,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        zAxis: {
          min: 10,
          max: 90,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          reversed: !0,
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        }
      };
      var _n14 = i.background_color,
          _r5 = i.axis_color,
          _s3 = i.font_color,
          _d4 = "https://bloodmallet.com/";
      void 0 !== i.chart_id ? _d4 += "chart/" + i.chart_id : void 0 !== i.wow_class && void 0 !== i.wow_spec && (_d4 += "#" + i.wow_class + "_" + i.wow_spec);
      var _c4 = {
        chart: {
          type: "bar",
          backgroundColor: t,
          style: {
            fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"'
          }
        },
        colors: e,
        credits: {
          href: _d4,
          text: "bloodmallet",
          style: {
            fontSize: a
          }
        },
        legend: {
          align: "right",
          backgroundColor: t,
          borderColor: l,
          borderWidth: 1,
          floating: !1,
          itemMarginBottom: 3,
          itemMarginTop: 0,
          layout: "vertical",
          reversed: !0,
          shadow: !1,
          verticalAlign: "middle",
          x: 0,
          y: 0,
          itemStyle: {
            color: o
          },
          itemHoverStyle: {
            color: o
          },
          title: {
            text: " ",
            style: {
              color: o
            }
          },
          symbolRadius: 0
        },
        plotOptions: {
          series: {
            stacking: "normal",
            borderColor: t,
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            },
            style: {
              textOutline: !1,
              fontSize: a
            },
            point: {
              events: {
                click: function click(e) {
                  var t = this.series.yAxis;
                  t.removePlotLine("helperLine"), t.addPlotLine({
                    value: this.stackY,
                    color: i.font_color,
                    width: 2,
                    id: "helperLine",
                    zIndex: 5,
                    label: {
                      text: this.series.name + " " + this.category,
                      style: {
                        color: i.font_color,
                        fontSize: a
                      },
                      align: "left",
                      verticalAlign: "bottom",
                      rotation: 0,
                      y: -5
                    }
                  });
                }
              }
            }
          }
        },
        series: [],
        title: {
          text: "Loading data...",
          useHTML: !0,
          style: {
            color: o,
            fontSize: a
          }
        },
        subtitle: {
          text: '...from <a href="https://bloodmallet.com">bloodmallet</a>',
          useHTML: !0,
          style: {
            color: o,
            fontSize: a
          }
        },
        tooltip: {
          headerFormat: "<b>{point.x}</b>",
          shared: !0,
          backgroundColor: t,
          borderColor: l,
          style: {
            color: o,
            fontSize: a
          },
          useHTML: !0
        },
        xAxis: {
          categories: [],
          labels: {
            useHTML: !0,
            style: {
              color: o,
              fontSize: a
            }
          },
          gridLineWidth: 0,
          gridLineColor: l,
          lineColor: l,
          tickColor: l
        },
        yAxis: [{
          labels: {
            style: {
              color: l
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: a,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === i.value_style ? h : u,
            style: {
              color: l
            }
          },
          gridLineWidth: 1,
          gridLineColor: l
        }, {
          linkedTo: 0,
          opposite: !0,
          labels: {
            style: {
              color: l
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: a,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === i.value_style ? h : u,
            style: {
              color: l
            }
          },
          gridLineWidth: 1,
          gridLineColor: l
        }]
      };
      return _c4.chart.backgroundColor = _n14, _c4.legend.backgroundColor = _n14, _c4.legend.borderColor = _r5, _c4.legend.itemStyle.color = _s3, _c4.legend.itemHoverStyle.color = _s3, _c4.title.style.color = _s3, _c4.subtitle.style.color = _s3, _c4.tooltip.formatter = function () {
        var e = document.createElement("div");
        e.style.margin = "-4px -7px -7px -7px", e.style.padding = "3px 3px 6px 3px", e.style.backgroundColor = "transparent" !== _n14 ? _n14 : t, "highcharts_old" === i.chart_engine && (e.style.margin = "-7px");
        var o = document.createElement("div");
        e.appendChild(o), o.style.marginLeft = "9px", o.style.marginRight = "9px", o.style.marginBottom = "6px", o.style.fontWeight = "700", o.innerHTML = this.x;
        var l = 0;

        for (var a = this.points.length - 1; a >= 0; a--) {
          l += this.points[a].y;

          var _t25 = !1,
              _o21 = 0;

          var _iteratorNormalCompletion12 = true;
          var _didIteratorError12 = false;
          var _iteratorError12 = undefined;

          try {
            for (var _iterator12 = this.points[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
              var _e20 = _step12.value;
              0 !== _e20.y && 0 !== _o21 && _o21 !== _e20.y ? _t25 = !0 : 0 !== _e20.y && 0 === _o21 && (_o21 = _e20.y);
            }
          } catch (err) {
            _didIteratorError12 = true;
            _iteratorError12 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion12 && _iterator12.return != null) {
                _iterator12.return();
              }
            } finally {
              if (_didIteratorError12) {
                throw _iteratorError12;
              }
            }
          }

          var _n15 = new DOMParser().parseFromString(this.x, "text/html").body.firstChild.innerText;

          if (!i.data.data.hasOwnProperty(_n15)) {
            var _e19 = void 0;

            var _arr8 = Object.keys(i.data.data);

            for (var _i16 = 0; _i16 < _arr8.length; _i16++) {
              var _t26 = _arr8[_i16];
              _t26.slice(_t26.indexOf("} ") + 2) === _n15 && (_e19 = _t26);
            }

            void 0 !== _e19 && (_n15 = _e19);
          }

          var _r6 = i.data.data[_n15].hasOwnProperty(this.points[a].series.name);

          if (0 !== this.points[a].y || _r6 || _t25 && "soulbinds" === i.data_type && "nodes" === i.chart_mode) {
            var _t27 = document.createElement("div");

            e.appendChild(_t27);

            var _o22 = document.createElement("span");

            _t27.appendChild(_o22), _o22.style.marginLeft = "9px", _o22.style.borderLeft = "9px solid " + this.points[a].series.color, _o22.style.paddingLeft = "4px", Number.isInteger(this.points[a].series.name) && _o22.appendChild(document.createTextNode(this.points[a].series.name + ":"));
            var _n16 = "";
            "soulbinds" === i.data_type && "soulbinds" === i.chart_mode || "races" === i.data_type ? _n16 = "" : "relative" === i.value_style && (_n16 = "%"), _t27.appendChild(document.createTextNode("  " + Intl.NumberFormat().format(l) + _n16));
          }
        }

        return e.outerHTML;
      }, _c4.tooltip.backgroundColor = "transparent" !== _n14 ? _n14 : t, _c4.tooltip.borderColor = _r5, _c4.tooltip.style.color = _s3, _c4.xAxis.labels.style.color = _s3, _c4.xAxis.gridLineColor = _r5, _c4.xAxis.lineColor = _r5, _c4.xAxis.tickColor = _r5, _c4.yAxis[0].labels.style.color = _r5, _c4.yAxis[0].stackLabels.style.color = _s3, _c4.yAxis[0].gridLineColor = _r5, _c4.yAxis[0].lineColor = _r5, _c4.yAxis[0].tickColor = _r5, _c4.yAxis[0].title.style.color = _r5, _c4.yAxis[1].labels.style.color = _r5, _c4.yAxis[1].stackLabels.style.color = _s3, _c4.yAxis[1].gridLineColor = _r5, _c4.yAxis[1].lineColor = _r5, _c4.yAxis[1].tickColor = _r5, _c4.yAxis[1].title.style.color = _r5, _c4.credits.style.color = _s3, _c4;
    }
  }

  function E(e, t) {
    var o = document.getElementById("chart"),
        l = o.dataset.filterItemlevels;
    t ? o.dataset.filterItemlevels = l.split(";").filter(function (t) {
      return t !== e;
    }).join(";") : void 0 === l || 0 === l.length ? o.dataset.filterItemlevels = e : o.dataset.filterItemlevels = l + ";" + e;
  }

  function T(e, t) {
    var o = document.getElementById("chart"),
        l = o.dataset.filterSources;
    t ? o.dataset.filterSources = l.split(";").filter(function (t) {
      return t !== e;
    }).join(";") : void 0 === l || 0 === l.length ? o.dataset.filterSources = e : o.dataset.filterSources = l + ";" + e;
  }

  function I(e, t, o) {
    var l = document.createElement("div");
    l.innerHTML = e + ": ";
    var a = document.createElement("span");

    if (a.innerHTML = t + "%", a.classList += S(t >= 0 ? t : 3 - t), void 0 !== o) {
      a.title = "Talent combination: " + o, a.setAttribute("data-toggle", "tooltip"), a.setAttribute("data-placement", "bottom");

      var _e21 = document.createElement("span");

      _e21.classList += "priest-color", _e21.innerHTML = " (?)", a.appendChild(_e21);
    }

    return l.appendChild(a), l;
  }

  function S(e) {
    return n && console.log("get_value_color"), e < 5 ? "mage-color" : e > 10 && e <= 12 ? "druid-color" : e > 12 ? "death_knight-color" : "monk-color";
  }

  function M(e, t) {
    var _iteratorNormalCompletion13 = true;
    var _didIteratorError13 = false;
    var _iteratorError13 = undefined;

    try {
      for (var _iterator13 = t.sorted_data_keys[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
        var _o23 = _step13.value;
        if (_o23[e.slice(0, 1) - 1] === e.slice(1, 2)) return _o23;
      }
    } catch (err) {
      _didIteratorError13 = true;
      _iteratorError13 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion13 && _iterator13.return != null) {
          _iterator13.return();
        }
      } finally {
        if (_didIteratorError13) {
          throw _iteratorError13;
        }
      }
    }

    return !1;
  }

  function N(e, t, o, l) {
    var a = '<a href="https://';
    return "en" === e.language || "EN" === e.language ? a += "www" : a += e.language.toLowerCase(), a += ".wowhead.com/spell=", a += l.talent_data[o.slice(0, 1)][o.slice(1, 2)].spell_id, a += '"', a += ">", a += H(t, l, e), a += "</a>";
  }

  function H(e, t, o) {
    n && console.log("get_translated_name " + e);
    var l = "";

    try {
      l = t.translations[e][r[o.language]];
    } catch (t) {
      n && (console.log("No translation for ".concat(e, " found.")), console.log(t)), l = e;
    }

    return n && console.log("Translated name: " + l), void 0 === l && (l = e), l;
  }

  function P(e, t) {
    var o = e.slice(0, 1),
        l = e.slice(1, 2),
        a = 100,
        n = "";
    var _iteratorNormalCompletion14 = true;
    var _didIteratorError14 = false;
    var _iteratorError14 = undefined;

    try {
      for (var _iterator14 = t.sorted_data_keys[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
        var _e22 = _step14.value;

        if (_e22[o - 1] === l) {
          var _l24 = t.data[_e22],
              _i17 = t.data[_e22.slice(0, o - 1) + "0" + _e22.slice(o, 8)];

          a > F(_i17, _l24) && (a = F(_i17, _l24), n = _e22);
        }
      }
    } catch (err) {
      _didIteratorError14 = true;
      _iteratorError14 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion14 && _iterator14.return != null) {
          _iterator14.return();
        }
      } finally {
        if (_didIteratorError14) {
          throw _iteratorError14;
        }
      }
    }

    return [n, a];
  }

  function D(e, t) {
    var o = e.slice(0, 1),
        l = e.slice(1, 2),
        a = -100,
        n = "";
    var _iteratorNormalCompletion15 = true;
    var _didIteratorError15 = false;
    var _iteratorError15 = undefined;

    try {
      for (var _iterator15 = t.sorted_data_keys[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
        var _e23 = _step15.value;

        if (_e23[o - 1] === l) {
          var _l25 = t.data[_e23],
              _i18 = t.data[_e23.slice(0, o - 1) + "0" + _e23.slice(o, 8)];

          a < F(_i18, _l25) && (a = F(_i18, _l25), n = _e23);
        }
      }
    } catch (err) {
      _didIteratorError15 = true;
      _iteratorError15 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion15 && _iterator15.return != null) {
          _iterator15.return();
        }
      } finally {
        if (_didIteratorError15) {
          throw _iteratorError15;
        }
      }
    }

    return [n, a];
  }

  function B(e, t) {
    n && console.log("get_average_gain");
    var o = [];
    var _iteratorNormalCompletion16 = true;
    var _didIteratorError16 = false;
    var _iteratorError16 = undefined;

    try {
      for (var _iterator16 = t.sorted_data_keys[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
        var _l26 = _step16.value;
        _l26[e.slice(0, 1) - 1] === e.slice(1, 2) && o.push(_l26);
      }
    } catch (err) {
      _didIteratorError16 = true;
      _iteratorError16 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion16 && _iterator16.return != null) {
          _iterator16.return();
        }
      } finally {
        if (_didIteratorError16) {
          throw _iteratorError16;
        }
      }
    }

    var l = 0;

    for (var _i19 = 0; _i19 < o.length; _i19++) {
      var _a16 = _o24[_i19];
      var _o24 = t.data[_a16];
      l += F(t.data[_a16.slice(0, e.slice(0, 1) - 1) + "0" + _a16.slice(e.slice(0, 1), 8)], _o24);
    }

    return Math.round(l / o.length * 100) / 100;
  }

  function F(e, t) {
    return n && console.log("get_percentage_gain"), Math.round(100 * (100 * t / e - 100)) / 100;
  }

  this.init_charts = new function () {
    n && console.log("init_charts");
    var e = document.querySelectorAll("div.bloodmallet_chart"),
        a = [];

    for (var _t28 = 0; _t28 < e.length; _t28++) {
      var _o25 = e[_t28];
      if (a.indexOf(_o25.id) > -1) return void console.error("Multiple Elements use the same ID ('" + _o25.id + "'). Aborting bloodmallet_chart_import.js.");
      a.push(_o25.id);
    }

    for (var _a17 = 0; _a17 < e.length; _a17++) {
      var _i20 = void 0;

      try {
        _i20 = e[_a17].id;
      } catch (e) {
        return void console.error("Each .bloodmallet_chart needs an ID. Aborting bloodmallet_chart_import.js.");
      }

      var _r7 = document.getElementById(e[_a17].id);

      if (_r7) {
        var _e24 = {
          chart_id: void 0,
          wow_class: void 0,
          wow_spec: void 0,
          data_type: "trinkets",
          conduit_rank: "7",
          fight_style: "castingpatchwerk",
          chart_mode: "soulbinds",
          covenant: "Kyrian",
          renown: "35",
          axis_color: l,
          background_color: t,
          font_color: o,
          limit: 7,
          chart_engine: "highcharts",
          tooltip_engine: "wowhead",
          language: "en",
          value_style: "absolute",
          html_element: _r7
        };

        try {
          void 0 !== bloodmallet.style.axis_color && (_e24.axis_color = bloodmallet.style.axis_color), void 0 !== bloodmallet.style.background_color && (_e24.background_color = bloodmallet.style.background_color), void 0 !== bloodmallet.style.font_color && (_e24.font_color = bloodmallet.style.font_color), void 0 !== bloodmallet.settings.entries && (_e24.limit = bloodmallet.settings.entries), void 0 !== bloodmallet.settings.chart_engine && (_e24.chart_engine = bloodmallet.settings.chart_engine), void 0 !== bloodmallet.settings.tooltip_engine && (_e24.tooltip_engine = bloodmallet.settings.tooltip_engine), void 0 !== bloodmallet.settings.language && (_e24.language = bloodmallet.settings.language), void 0 !== bloodmallet.settings.value_style && (_e24.value_style = bloodmallet.settings.value_style);
        } catch (e) {
          n && console.log("Applying page wide settings failed or no page wide settings were found.");
        }

        _r7.getAttribute("data-entries") && (_e24.limit = _r7.getAttribute("data-entries")), _r7.getAttribute("data-fight-style") && (_e24.fight_style = _r7.getAttribute("data-fight-style")), _r7.getAttribute("data-type") && (_e24.data_type = _r7.getAttribute("data-type")), _r7.getAttribute("data-chart-mode") && (_e24.chart_mode = _r7.getAttribute("data-chart-mode")), _r7.getAttribute("data-covenant") && (_e24.covenant = _r7.getAttribute("data-covenant")), _r7.getAttribute("data-renown") && (_e24.renown = _r7.getAttribute("data-renown")), _r7.getAttribute("data-conduit-rank") && (_e24.conduit_rank = _r7.getAttribute("data-conduit-rank")), _r7.getAttribute("data-background-color") && (_e24.background_color = _r7.getAttribute("data-background-color")), _r7.getAttribute("data-font-color") && (_e24.font_color = _r7.getAttribute("data-font-color")), _r7.getAttribute("data-axis-color") && (_e24.axis_color = _r7.getAttribute("data-axis-color")), _r7.getAttribute("data-tooltip-engine") && (_e24.tooltip_engine = _r7.getAttribute("data-tooltip-engine")), _r7.getAttribute("data-chart-engine") && (_e24.chart_engine = _r7.getAttribute("data-chart-engine")), _r7.getAttribute("data-language") && (_e24.language = _r7.getAttribute("data-language")), _r7.getAttribute("data-value-style") && (_e24.value_style = _r7.getAttribute("data-value-style"));

        var _a18 = !0;

        _r7.getAttribute("data-chart-id") ? _e24.chart_id = _r7.getAttribute("data-chart-id") : (_r7.getAttribute("data-wow-class") || (console.error("Required 'data-chart-id' or 'data-wow-class' attribute wasn't found in " + _i20 + "."), _a18 = !1), _e24.wow_class = _r7.getAttribute("data-wow-class"), _r7.getAttribute("data-wow-spec") || (console.error("Required 'data-chart-id' or 'data-wow-spec' attribute wasn't found in " + _i20 + "."), _a18 = !1), _e24.wow_spec = _r7.getAttribute("data-wow-spec"));

        var _s4 = O(_e24),
            _d5 = !1;

        if ("highcharts" == _e24.chart_engine) try {
          _d5 = Highcharts.chart(_i20, _s4);
        } catch (e) {
          return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        } else if ("highcharts_old" == _e24.chart_engine) try {
          var _e25 = _s4;
          _e25.chart.renderTo = _i20, _d5 = new Highcharts.Chart(_e25);
        } catch (e) {
          return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        }
        _a18 ? p(_e24) : _d5.setTitle({
          text: "Wrong chart setup"
        }, {
          text: "Missing 'data-chart-id', 'data-wow-class' or 'data-wow-spec'. See <a href=\"https://github.com/Bloodmallet/bloodmallet_web_frontend/wiki/How-to-import-charts\">wiki</a>"
        }), setTimeout(g, 1, _e24, _r7, _d5, 0);
      }
    }
  }();
}

document.addEventListener("DOMContentLoaded", function () {
  bloodmallet_chart_import();
});