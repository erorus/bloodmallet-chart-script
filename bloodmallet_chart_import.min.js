"use strict";

function bloodmallet_chart_import() {
  var t = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
      e = "#343a40",
      o = "#f8f9fa",
      a = "#828282",
      r = "1.1rem",
      l = !1,
      i = "https://dev.bloodmallet.com/chart/get/";
  var s = {};

  function n(t) {
    l && console.log("load_data");
    var e = t.chart_id,
        o = t.data_type,
        a = t.fight_style,
        r = t.wow_class,
        n = t.wow_spec;

    try {
      if (s[o][a][r][n]) return;
    } catch (t) {
      l && console.log("Data needs to be loaded.");
    }

    try {
      if (s[e]) return;
    } catch (t) {
      l && console.log("Data needs to be loaded.");
    }

    var d = o;
    d.indexOf("azerite") > -1 && (d = "azerite_traits");
    var c = a;
    c += "/" + r, c += "/" + n;
    var h = "";
    h = e ? i + e : i + d + "/" + c;
    var g = new XMLHttpRequest();
    l && console.log("Fetching data from: " + h), g.open("GET", h, !0), g.onload = function (t) {
      if (4 === g.readyState) if (200 === g.status) {
        var _t = JSON.parse(g.responseText);

        e ? s["c" + e] = _t : (s[o] || (s[o] = {}), s[o][a] || (s[o][a] = {}), s[o][a][r] || (s[o][a][r] = {}), s[o][a][r][n] = _t), l && (console.log(_t), console.log("Load and save finished."));
      } else console.error(g.statusText);
    }, g.onerror = function (t) {
      console.error("Fetching data from bloodmallet.com encountered an error, ", t);
    }, g.send(null);
  }

  function d(t, e, o, a) {
    l && console.log("update_chart");
    var r = t.chart_id,
        i = t.data_type,
        n = t.fight_style,
        u = t.wow_class,
        p = t.wow_spec,
        _ = t.limit,
        m = t.chart_engine,
        f = !1;

    if (r) {
      if (void 0 === s["c" + r]) return void (a < 30 && setTimeout(d, 200, t, e, o, a + 1));
    } else try {
      f = s[i][n][u][p];
    } catch (r) {
      return void (a < 30 && setTimeout(d, 200, t, e, o, a + 1));
    }

    if (!0 === (f = void 0 !== r ? s["c" + r] : s[i][n][u][p]).error) return function (t, e) {
      var o = t;
      o.innerHTML = "";
      var a = document.createElement("p");
      a.innerText = "An error occured during simulation.", o.appendChild(a);
      var r = document.createElement("ul"),
          l = document.createElement("li");
      l.textContent = "Title: " + (e.title ? e.title : "~"), r.appendChild(l);
      var i = document.createElement("li");
      i.textContent = "Spec: " + e.wow_spec + " " + e.wow_class, r.appendChild(i);
      var s = document.createElement("li");
      s.textContent = "Type: " + e.simulation_type, r.appendChild(s);
      var n = document.createElement("li");
      n.textContent = "Fight style: " + e.fight_style, r.appendChild(n);
      var d = document.createElement("li");
      d.textContent = "ID: " + e.id, r.appendChild(d);
      var c = document.createElement("li");
      c.textContent = "Custom profile:", r.appendChild(c), c.appendChild(document.createElement("br"));
      var h = document.createElement("textarea");
      h.readOnly = !0, h.value = e.custom_profile, h.placeholder = "No custom profile", h.style.width = "100%", c.appendChild(h);
      var g = document.createElement("li");
      g.textContent = "Log:", r.appendChild(g), g.appendChild(document.createElement("br"));
      var u = document.createElement("textarea");
      u.readOnly = !0, u.value = e.log, u.placeholder = "No log available", u.style.width = "100%", g.appendChild(u), o.appendChild(r);
    }(e, f);
    if (u = f.simc_settings.class, p = f.simc_settings.spec, n = f.simc_settings.fight_style, t.data_type = i = f.data_type, "secondary_distributions" === i) return function (t, e, o) {
      l && console.log("update_secondary_distribution_chart");
      var a = e.id,
          r = t.chart_id,
          i = t.fight_style,
          n = t.wow_class,
          d = t.wow_spec,
          h = (t.chart_engine, !1);
      h = s["c" + r], n = h.simc_settings.class, d = h.simc_settings.spec, i = h.simc_settings.fight_style;
      var u = g(t),
          p = !1;
      if ("highcharts" == t.chart_engine) try {
        p = Highcharts.chart(a, u);
      } catch (t) {
        return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
      } else if ("highcharts_old" == t.chart_engine) try {
        var _t2 = u;
        _t2.chart.renderTo = a, p = new Highcharts.Chart(_t2);
      } catch (t) {
        return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
      }
      o = void 0, o = p;

      var _ = void 0;

      _ = Object.keys(h.data)[0];
      var m = h.data[_][h.sorted_data_keys[_][0]],
          f = h.data[_][h.sorted_data_keys[_][h.sorted_data_keys[_].length - 1]],
          b = c(100, 0, 100),
          y = c(0, 0, 100),
          w = {
        name: Intl.NumberFormat().format(m) + " DPS",
        color: "rgb(" + b[0] + "," + b[1] + "," + b[2] + ")",
        data: []
      };

      var _arr = Object.keys(h.data[_]);

      for (var _i = 0; _i < _arr.length; _i++) {
        var _e = _arr[_i];

        var _o = h.data[_][_e],
            _a = c(_o, f, m),
            _r = 1,
            _l = "#232227",
            _i2 = 5;

        m === _o && (_r = 3, _i2 = 8, _l = t.font_color);

        var _s = void 0;

        if (_e.indexOf("70") > -1) switch (_s = {
          enabled: !0,
          allowOverlap: !0
        }, _e.indexOf("70")) {
          case 0:
            _s.format = "Crit", _s.verticalAlign = "top";
            break;

          case 3:
            _s.format = "Haste";
            break;

          case 6:
            _s.format = "Mastery", _s.verticalAlign = "top";
            break;

          case 9:
            _s.format = "Versatility", _s.verticalAlign = "top";
        }
        var _n = h.secondary_sum;

        var _d = parseInt(_e.split("_")[0]),
            _g = parseInt(_e.split("_")[1]),
            _u = parseInt(_e.split("_")[2]),
            _p = parseInt(_e.split("_")[3]);

        w.data.push({
          x: Math.sqrt(3) / 2 * (_d + 1 / 3 * _g),
          y: Math.sqrt(2 / 3) * _g,
          z: _u + .5 * _d + .5 * _g,
          name: _e,
          color: "rgb(" + _a[0] + "," + _a[1] + "," + _a[2] + ")",
          dps: _o,
          dps_max: m,
          dps_min: f,
          stat_crit: _d * _n / 100,
          stat_haste: _g * _n / 100,
          stat_mastery: _u * _n / 100,
          stat_vers: _p * _n / 100,
          stat_sum: _n,
          marker: {
            radius: _i2,
            lineColor: _l,
            lineWidth: _r
          },
          dataLabels: _s
        });
      }

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      o.addSeries(w, !1), o.addSeries({
        name: Intl.NumberFormat().format(f) + " DPS",
        color: "rgb(" + y[0] + "," + y[1] + "," + y[2] + ")"
      }, !1);
      var x = h.timestamp,
          v = x.split("-")[0],
          C = x.split("-")[1],
          k = x.split("-")[2].split(" ")[0],
          A = x.split(" ")[1].split(":")[0],
          z = x.split(":")[1],
          T = "Last updated ",
          L = new Date() - new Date(Date.UTC(v, C - 1, k, A, z)),
          O = Math.floor(L / 24 / 3600 / 1e3);
      O > 0 && (T += "".concat(O, "d "));
      var S = Math.floor(L / 3600 / 1e3) - 24 * O;
      T += "".concat(S, "h ago"), o.redraw(), function (t) {
        function e(e) {
          var a = (e = o.pointer.normalize(e)).chartX,
              r = e.chartY,
              l = o.options.chart.options3d.alpha,
              i = o.options.chart.options3d.beta,
              s = 5;

          function n(t) {
            t = o.pointer.normalize(t), o.update({
              chart: {
                options3d: {
                  alpha: l + (t.chartY - r) / s,
                  beta: i + (a - t.chartX) / s
                }
              }
            }, void 0, void 0, !1);
          }

          o.unbindDragMouse = t.addEvent(document, "mousemove", n), o.unbindDragTouch = t.addEvent(document, "touchmove", n), t.addEvent(document, "mouseup", o.unbindDragMouse), t.addEvent(document, "touchend", o.unbindDragTouch);
        }

        t.addEvent(o.container, "mousedown", e), t.addEvent(o.container, "touchstart", e);
      }(Highcharts);
    }(t, e, o);
    "azerite_traits" === f.data_type ? -1 === i.indexOf("azerite_items") && (i = "azerite_traits_stacking") : i = f.data_type;
    var b = f;
    var y, w;
    if (i.indexOf("azerite_traits") > -1) {
      if ("azerite_traits_stacking" === i) "all" === t.azerite_tier ? y = b.sorted_data_keys_2.slice(0, _) : "1" === t.azerite_tier || "3" === t.azerite_tier ? y = b.sorted_azerite_tier_3_trait_stacking.slice(0, _) : "2" === t.azerite_tier && (y = b.sorted_azerite_tier_2_trait_stacking.slice(0, _)), w = b.data.baseline[b.simulated_steps[0]];else {
        if ("azerite_traits_itemlevel" !== i) return void console.log("Chart found, but unknown data-type detected.");
        "all" === t.azerite_tier ? y = b.sorted_data_keys.slice(0, _) : "1" === t.azerite_tier || "3" === t.azerite_tier ? y = b.sorted_azerite_tier_3_itemlevel.slice(0, _) : "2" === t.azerite_tier && (y = b.sorted_azerite_tier_2_itemlevel.slice(0, _)), w = b.data.baseline[b.simulated_steps[b.simulated_steps.length - 1]];
      }
    } else y = b.sorted_data_keys.slice(0, _), w = "races" === i ? 0 : ["legendaries", "soul_binds"].includes(i) ? b.data.baseline : b.data.baseline[b.simulated_steps[b.simulated_steps.length - 1]];

    for (l && (console.log(y), console.log("Baseline dps: " + w)), o.setTitle({
      text: b.title
    }, {
      text: b.subtitle
    }, !1); o.series[0];) {
      o.series[0].remove(!1);
    }

    var x = y.map(function (e) {
      return function (t, e, o) {
        l && (console.log("get_category_name"), console.log(e));
        var a = {
          cn: "cn_CN",
          en: "en_US",
          de: "de_DE",
          es: "es_ES",
          fr: "fr_FR",
          it: "it_IT",
          ko: "ko_KR",
          pt: "pt_BR",
          ru: "ru_RU"
        };
        if ("wowhead" != t.tooltip_engine && "wowdb" != t.tooltip_engine) try {
          return o.translations[e][a[t.language]];
        } catch (r) {
          return o.languages[e][a[t.language]];
        }
        if ("races" === t.data_type) try {
          return o.translations[e][a[t.language]];
        } catch (r) {
          return o.languages[e][a[t.language]];
        }

        if ("wowhead" == t.tooltip_engine) {
          var _r2 = document.createElement("a");

          if (_r2.href = "https://" + ("en" === t.language ? "www" : t.language) + ".wowhead.com/", o.hasOwnProperty("item_ids") && o.item_ids.hasOwnProperty(e)) {
            if (_r2.href += "item=" + o.item_ids[e] + "/" + h(e), o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
              _r2.href += "?azerite-powers=" + o.class_id;

              for (var _t4 = 0; _t4 < o.used_azerite_traits_per_item[e].length; _t4++) {
                var _a2 = o.used_azerite_traits_per_item[e][_t4];
                _r2.href += ":" + _a2.id;
              }
            }

            var _t3 = o.simulated_steps[o.simulated_steps.length - 1];
            "string" == typeof _t3 && _t3.indexOf("_") > -1 && (_t3 = _t3.split("_")[1]), _r2.href += "&ilvl=" + _t3;
          } else o.hasOwnProperty("spell_ids") && o.spell_ids.hasOwnProperty(e) && (_r2.href += "spell=" + o.spell_ids[e] + "/" + h(e));

          try {
            _r2.appendChild(document.createTextNode(o.translations[e][a[t.language]]));
          } catch (l) {
            try {
              _r2.appendChild(document.createTextNode(o.languages[e][a[t.language]]));
            } catch (t) {
              _r2.appendChild(document.createTextNode(e)), console.log("Bloodmallet charts: Translation for " + e + " wasn't found. Please help improving the reasource at bloodmallet.com.");
            }
          }

          return _r2.outerHTML;
        }

        if ("wowdb" == t.tooltip_engine) {
          var _r3 = document.createElement("a");

          _r3.href = "http://www.wowdb.com/";

          try {
            _r3.href += "items/" + o.item_ids[e];
          } catch (t) {
            l && (console.log(t), console.log("We're probably looking at a spell."));
          }

          if (_r3.href.indexOf("items") > -1) {
            var _t5 = o.simulated_steps[o.simulated_steps.length - 1];

            if ("string" == typeof _t5 && _t5.indexOf("_") > -1 && (_t5 = _t5.split("_")[1]), _r3.href += "?itemLevel=" + _t5, o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
              _r3.href += "&azerite=", _r3.href += o.class_id + ":0";

              for (var _t6 = 0; _t6 < o.used_azerite_traits_per_item[e].length; _t6++) {
                var _a3 = o.used_azerite_traits_per_item[e][_t6];
                _r3.href += ":" + _a3.id;
              }
            }
          }

          try {
            _r3.href += "spells/" + o.spell_ids[e];
          } catch (t) {
            l && (console.log(t), console.log("We're probably looking at an item."));
          }

          _r3.dataset.tooltipHref = _r3.href;

          var _i3 = void 0;

          try {
            _i3 = document.createTextNode(o.translations[e][a[t.language]]);
          } catch (r) {
            try {
              _i3 = document.createTextNode(o.languages[e][a[t.language]]);
            } catch (t) {
              _i3 = e, console.log("Bloodmallet charts: Translation for " + e + " wasn't found. Please help improving the reasource at bloodmallet.com.");
            }
          }

          return _r3.appendChild(document.createTextNode(_i3)), _r3.outerHTML;
        }
      }(t, e, b);
    });
    l && console.log(x), "highcharts" == m ? o.update({
      xAxis: {
        categories: x
      }
    }, !1) : "highcharts_old" == m && o.xAxis[0].setCategories(x, !1);
    var v = [];

    if ("azerite_traits_stacking" == i) {
      var _t7 = b.simulated_steps[0].replace("1_", "");

      v.push("3_" + _t7), v.push("2_" + _t7), v.push("1_" + _t7);
    } else v = b.simulated_steps;

    if (l && console.log("simulated_steps: " + v), v) {
      var _t8 = {};

      for (var _e2 in b.data) {
        if (b.data.hasOwnProperty(_e2)) {
          var _o2 = b.data[_e2];
          _t8[_e2] = {};
          var _a4 = w;
          "conduits" === i && (_a4 = b.data.baseline[b.covenant_mapping[_e2]]);

          for (var _r4 = v.length - 1; _r4 >= 0; _r4--) {
            var _l2 = v[_r4];
            _o2.hasOwnProperty(_l2) ? (_t8[_e2][_l2] = _o2[_l2] - _a4, _a4 = _o2[_l2]) : _t8[_e2][_l2] = 0;
          }
        }
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = v[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _e3 = _step.value;
          var _a5 = [];

          for (var _o3 = 0; _o3 < y.length; _o3++) {
            var _r6 = y[_o3];

            _a5.push(_t8[_r6][_e3]);
          }

          var _r5 = _e3;
          ["azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(i) > -1 ? _r5 = _e3.split("_")[1] : "azerite_traits_stacking" === i && (_r5 = _e3.split("_")[0]), o.addSeries({
            data: _a5,
            name: _r5
          }, !1);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else if (["legendaries", "soul_binds"].includes(i)) {
      var C = [];

      for (var _t9 = 0; _t9 < y.length; _t9++) {
        var _e4 = y[_t9],
            _o4 = b.data[_e4] - w;

        C.push(_o4);
      }

      o.addSeries({
        data: C,
        name: "Data",
        showInLegend: !1
      }, !1);
    } else {
      C = [];

      for (var _t10 = 0; _t10 < y.length; _t10++) {
        var _e5 = y[_t10],
            _o5 = b.data[_e5];
        C.push(_o5);
      }

      o.addSeries({
        data: C,
        name: "Race",
        showInLegend: !0
      }, !1);
    }

    ["trinkets", "azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(i) > -1 ? o.legend.title.attr({
      text: "Itemlevel"
    }) : "races" === i ? o.legend.title.attr({
      text: ""
    }) : "azerite_traits_stacking" === i && o.legend.title.attr({
      text: "Trait count"
    }), o.redraw(), "highcharts_old" == m && o.reflow(), e.style.height = 200 + 30 * y.length + "px", "highcharts" == m && o.setSize(e.style.width, e.style.height), "wowdb" == t.tooltip_engine && setTimeout(function () {
      !function (t) {
        l && console.log("readd_wowdb_tooltips");

        try {
          CurseTips["wowdb-tooltip"].watchElements(document.getElementById(t).getElementsByTagName("a"));
        } catch (t) {
          console.log("Setting wowdb (CurseTips) tooltips failed. Error: ", t);
        }
      }(e.id);
    }, 1);
  }

  function c(t, e, o) {
    l && console.log("create_color");
    var a = [0, 255, 255],
        r = [255, 255, 0],
        i = [255, 0, 0],
        s = 0,
        n = 0;

    for (var _t11 = 0; _t11 < 3; _t11++) {
      s += Math.abs(i[_t11] - r[_t11]), n += Math.abs(r[_t11] - a[_t11]);
    }

    var d = e + (o - e) * (n / (n + s));

    if (t >= d) {
      var _e6 = (t - d) / (o - d);

      return [Math.floor(i[0] * _e6 + r[0] * (1 - _e6)), Math.floor(i[1] * _e6 + r[1] * (1 - _e6)), Math.floor(i[2] * _e6 + r[2] * (1 - _e6))];
    }

    {
      var _o6 = (t - e) / (d - e);

      return [Math.floor(r[0] * _o6 + a[0] * (1 - _o6)), Math.floor(r[1] * _o6 + a[1] * (1 - _o6)), Math.floor(r[2] * _o6 + a[2] * (1 - _o6))];
    }
  }

  function h(t) {
    return t.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }

  function g(i) {
    if (l && console.log("update_chart_style"), "highcharts" == i.chart_engine || "highcharts_old" == i.chart_engine) {
      if ("secondary_distributions" === i.data_type) return {
        chart: {
          renderTo: "scatter_plot_chart",
          type: "scatter3d",
          backgroundColor: null,
          animation: !1,
          height: 800,
          width: 800,
          options3d: {
            enabled: !0,
            alpha: 10,
            beta: 30,
            depth: 800,
            fitToPlot: !1
          }
        },
        legend: {
          enabled: !0,
          backgroundColor: i.background_color,
          borderColor: i.font_color,
          borderWidth: 1,
          align: "right",
          verticalAlign: "middle",
          layout: "vertical",
          itemStyle: {
            color: i.font_color
          },
          itemHoverStyle: {
            color: i.font_color
          }
        },
        plotOptions: {
          series: {
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: i.font_color,
                fontSize: i.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color,
            fontSize: i.font_size
          }
        },
        tooltip: {
          headerFormat: "",
          pointFormatter: function pointFormatter() {
            return '<table class="">                <thead>                  <tr>                    <th scope="col"></th>                    <th scope="col">Absolute</th>                    <th scope="col">Relative</th>                  </tr>                </thead>                <tbody>                  <tr>                    <th scope="row">DPS</th>                    <td>' + Intl.NumberFormat().format(this.dps) + "</td>                    <td>" + Math.round(this.dps / this.dps_max * 1e4) / 100 + '%</td>                  </tr>                  <tr>                    <th scope="row">Crit</th>                    <td>' + Intl.NumberFormat().format(this.stat_crit) + "</td>                    <td>" + this.name.split("_")[0] + '%</td>                  </tr>                  <tr>                    <th scope="row">Haste</th>                    <td>' + Intl.NumberFormat().format(this.stat_haste) + "</td>                    <td>" + this.name.split("_")[1] + '%</td>                  </tr>                  <tr>                    <th scope="row">Mastery</th>                    <td>' + Intl.NumberFormat().format(this.stat_mastery) + "</td>                    <td>" + this.name.split("_")[2] + '%</td>                  </tr>                  <tr>                    <th scope="row">Versatility</th>                    <td>' + Intl.NumberFormat().format(this.stat_vers) + "</td>                    <td>" + this.name.split("_")[3] + "%</td>                  </tr>                </tbody>              </table>";
          },
          useHTML: !0,
          borderColor: i.background_color
        },
        xAxis: {
          min: 0,
          max: 80,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        yAxis: {
          min: -10,
          max: 70,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        zAxis: {
          min: 10,
          max: 90,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          reversed: !0,
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        }
      };
      var _l3 = i.background_color,
          _s2 = i.axis_color,
          _n2 = i.font_color,
          _d2 = {
        chart: {
          type: "bar",
          backgroundColor: e,
          style: {
            fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"'
          }
        },
        colors: t,
        credits: {
          href: "https://bloodmallet.com/",
          text: "bloodmallet",
          style: {
            fontSize: r
          }
        },
        legend: {
          align: "right",
          backgroundColor: e,
          borderColor: a,
          borderWidth: 1,
          floating: !1,
          itemMarginBottom: 3,
          itemMarginTop: 0,
          layout: "vertical",
          reversed: !0,
          shadow: !1,
          verticalAlign: "middle",
          x: 0,
          y: 0,
          itemStyle: {
            color: o
          },
          itemHoverStyle: {
            color: o
          },
          title: {
            text: " ",
            style: {
              color: o
            }
          },
          symbolRadius: 0
        },
        plotOptions: {
          series: {
            stacking: "normal",
            borderColor: e,
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            },
            style: {
              textOutline: !1,
              fontSize: r
            }
          }
        },
        series: [],
        title: {
          text: "Loading data...",
          useHTML: !0,
          style: {
            color: o,
            fontSize: r
          }
        },
        subtitle: {
          text: '...from <a href="https://bloodmallet.com">bloodmallet</a>',
          useHTML: !0,
          style: {
            color: o,
            fontSize: r
          }
        },
        tooltip: {
          headerFormat: "<b>{point.x}</b>",
          shared: !0,
          backgroundColor: e,
          borderColor: a,
          style: {
            color: o,
            fontSize: r
          },
          useHTML: !0,
          positioner: function positioner(t, e, o) {
            return {
              x: o.plotX,
              y: o.plotY
            };
          }
        },
        xAxis: {
          categories: [],
          labels: {
            useHTML: !0,
            style: {
              color: o,
              fontSize: r
            }
          },
          gridLineWidth: 0,
          gridLineColor: a,
          lineColor: a,
          tickColor: a
        },
        yAxis: [{
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: r,
              fontWeight: "normal"
            }
          },
          title: {
            text: "Δ Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }, {
          linkedTo: 0,
          opposite: !0,
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: r,
              fontWeight: "normal"
            }
          },
          title: {
            text: "Δ Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }]
      };
      return _d2.chart.backgroundColor = _l3, _d2.legend.backgroundColor = _l3, _d2.legend.borderColor = _s2, _d2.legend.itemStyle.color = _n2, _d2.legend.itemHoverStyle.color = _n2, _d2.title.style.color = _n2, _d2.subtitle.style.color = _n2, _d2.tooltip.formatter = function () {
        var t = document.createElement("div");
        t.style.margin = "-4px -7px -7px -7px", t.style.padding = "3px 3px 6px 3px", t.style.backgroundColor = "transparent" !== _l3 ? _l3 : e, "highcharts_old" === i.chart_engine && (t.style.margin = "-7px");
        var o = document.createElement("div");
        t.appendChild(o), o.style.marginLeft = "9px", o.style.marginRight = "9px", o.style.marginBottom = "6px", o.style.fontWeight = "700", o.innerHTML = this.x;
        var a = 0;

        for (var r = this.points.length - 1; r >= 0; r--) {
          if (a += this.points[r].y, 0 !== this.points[r].y) {
            var _e7 = document.createElement("div");

            t.appendChild(_e7);

            var _o7 = document.createElement("span");

            _e7.appendChild(_o7), _o7.style.marginLeft = "9px", _o7.style.borderLeft = "9px solid " + this.points[r].series.color, _o7.style.paddingLeft = "4px", Number.isInteger(this.points[r].series.name) && _o7.appendChild(document.createTextNode(this.points[r].series.name + ":")), _e7.appendChild(document.createTextNode("  " + Intl.NumberFormat().format(a)));
          }
        }

        return t.outerHTML;
      }, _d2.tooltip.backgroundColor = "transparent" !== _l3 ? _l3 : e, _d2.tooltip.borderColor = _s2, _d2.tooltip.style.color = _n2, _d2.xAxis.labels.style.color = _n2, _d2.xAxis.gridLineColor = _s2, _d2.xAxis.lineColor = _s2, _d2.xAxis.tickColor = _s2, _d2.yAxis[0].labels.style.color = _s2, _d2.yAxis[0].stackLabels.style.color = _n2, _d2.yAxis[0].gridLineColor = _s2, _d2.yAxis[0].lineColor = _s2, _d2.yAxis[0].tickColor = _s2, _d2.yAxis[0].title.style.color = _s2, _d2.yAxis[1].labels.style.color = _s2, _d2.yAxis[1].stackLabels.style.color = _n2, _d2.yAxis[1].gridLineColor = _s2, _d2.yAxis[1].lineColor = _s2, _d2.yAxis[1].tickColor = _s2, _d2.yAxis[1].title.style.color = _s2, _d2.credits.style.color = _n2, _d2;
    }
  }

  this.init_charts = new function () {
    l && console.log("init_charts");
    var t = document.querySelectorAll("div.bloodmallet_chart"),
        r = [];

    for (var _e8 = 0; _e8 < t.length; _e8++) {
      var _o8 = t[_e8];
      if (r.indexOf(_o8.id) > -1) return void console.error("Multiple Elements use the same ID ('" + _o8.id + "'). Aborting bloodmallet_chart_import.js.");
      r.push(_o8.id);
    }

    for (var _r7 = 0; _r7 < t.length; _r7++) {
      var _i4 = void 0;

      try {
        _i4 = t[_r7].id;
      } catch (t) {
        return void console.error("Each .bloodmallet_chart needs an ID. Aborting bloodmallet_chart_import.js.");
      }

      var _s3 = document.getElementById(t[_r7].id);

      if (_s3) {
        var _t12 = {
          chart_id: void 0,
          wow_class: void 0,
          wow_spec: void 0,
          data_type: "trinkets",
          azerite_tier: "all",
          fight_style: "patchwerk",
          axis_color: a,
          background_color: e,
          font_color: o,
          limit: 7,
          chart_engine: "highcharts",
          tooltip_engine: "wowhead",
          language: "en"
        };

        try {
          void 0 !== bloodmallet.style.axis_color && (_t12.axis_color = bloodmallet.style.axis_color), void 0 !== bloodmallet.style.background_color && (_t12.background_color = bloodmallet.style.background_color), void 0 !== bloodmallet.style.font_color && (_t12.font_color = bloodmallet.style.font_color), void 0 !== bloodmallet.settings.entries && (_t12.limit = bloodmallet.settings.entries), void 0 !== bloodmallet.settings.chart_engine && (_t12.chart_engine = bloodmallet.settings.chart_engine), void 0 !== bloodmallet.settings.tooltip_engine && (_t12.tooltip_engine = bloodmallet.settings.tooltip_engine), void 0 !== bloodmallet.settings.language && (_t12.language = bloodmallet.settings.language);
        } catch (t) {
          l && console.log("Applying page wide settings failed or no page wide settings were found.");
        }

        _s3.getAttribute("data-entries") && (_t12.limit = _s3.getAttribute("data-entries")), _s3.getAttribute("data-fight-style") && (_t12.fight_style = _s3.getAttribute("data-fight-style")), _s3.getAttribute("data-type") && (_t12.data_type = _s3.getAttribute("data-type")), _s3.getAttribute("data-azerite-tier") && (_t12.azerite_tier = _s3.getAttribute("data-azerite-tier")), _s3.getAttribute("data-background-color") && (_t12.background_color = _s3.getAttribute("data-background-color")), _s3.getAttribute("data-font-color") && (_t12.font_color = _s3.getAttribute("data-font-color")), _s3.getAttribute("data-axis-color") && (_t12.axis_color = _s3.getAttribute("data-axis-color")), _s3.getAttribute("data-tooltip-engine") && (_t12.tooltip_engine = _s3.getAttribute("data-tooltip-engine")), _s3.getAttribute("data-chart-engine") && (_t12.chart_engine = _s3.getAttribute("data-chart-engine")), _s3.getAttribute("data-language") && (_t12.language = _s3.getAttribute("data-language"));

        var _r8 = !0;

        _s3.getAttribute("data-chart-id") ? _t12.chart_id = _s3.getAttribute("data-chart-id") : (_s3.getAttribute("data-wow-class") || (console.error("Required 'data-chart-id' or 'data-wow-class' attribute wasn't found in " + _i4 + "."), _r8 = !1), _t12.wow_class = _s3.getAttribute("data-wow-class"), _s3.getAttribute("data-wow-spec") || (console.error("Required 'data-chart-id' or 'data-wow-spec' attribute wasn't found in " + _i4 + "."), _r8 = !1), _t12.wow_spec = _s3.getAttribute("data-wow-spec"));

        var _c = g(_t12),
            _h = !1;

        if ("highcharts" == _t12.chart_engine) try {
          _h = Highcharts.chart(_i4, _c);
        } catch (t) {
          return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
        } else if ("highcharts_old" == _t12.chart_engine) try {
          var _t13 = _c;
          _t13.chart.renderTo = _i4, _h = new Highcharts.Chart(_t13);
        } catch (t) {
          return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
        }
        _r8 ? n(_t12) : _h.setTitle({
          text: "Wrong chart setup"
        }, {
          text: "Missing 'data-chart-id', 'data-wow-class' or 'data-wow-spec'. See <a href=\"https://github.com/Bloodmallet/bloodmallet.github.io/wiki/How-to-import-charts-or-data\">wiki</a>"
        }), setTimeout(d, 1, _t12, _s3, _h, 0);
      }
    }
  }();
}

document.addEventListener("DOMContentLoaded", function () {
  bloodmallet_chart_import();
});