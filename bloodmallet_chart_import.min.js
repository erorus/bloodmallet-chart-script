"use strict";

function bloodmallet_chart_import() {
  var e = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
      t = "#343a40",
      o = "#f8f9fa",
      a = "#828282",
      l = "1.1rem",
      r = !1,
      i = "https://bloodmallet.com/chart/get/";
  var n = {};

  function s(e) {
    r && console.log("load_data");
    var t = e.chart_id,
        o = e.data_type,
        a = e.fight_style,
        l = e.wow_class,
        s = e.wow_spec;

    try {
      if (n[o][a][l][s]) return;
    } catch (e) {
      r && console.log("Data needs to be loaded.");
    }

    try {
      if (n[t]) return;
    } catch (e) {
      r && console.log("Data needs to be loaded.");
    }

    var d = o;
    d.indexOf("azerite") > -1 && (d = "azerite_traits");
    var c = a;
    c += "/" + l, c += "/" + s;
    var h = "";
    h = t ? i + t : i + d + "/" + c;
    var g = new XMLHttpRequest();
    r && console.log("Fetching data from: " + h), g.open("GET", h, !0), g.onload = function (e) {
      if (4 === g.readyState) if (200 === g.status) {
        var _e = JSON.parse(g.responseText);

        t ? n["c" + t] = _e : (n[o] || (n[o] = {}), n[o][a] || (n[o][a] = {}), n[o][a][l] || (n[o][a][l] = {}), n[o][a][l][s] = _e), r && (console.log(_e), console.log("Load and save finished."));
      } else console.error(g.statusText);
    }, g.onerror = function (e) {
      console.error("Fetching data from bloodmallet.com encountered an error, ", e);
    }, g.send(null);
  }

  function d(e, t, o, a) {
    r && console.log("update_chart");
    var l = e.chart_id,
        i = e.data_type,
        s = e.fight_style,
        p = e.wow_class,
        v = e.wow_spec,
        C = e.limit,
        k = e.chart_engine,
        T = !1;

    if (l) {
      if (void 0 === n["c" + l]) return void (a < 30 && setTimeout(d, 200, e, t, o, a + 1));
    } else try {
      T = n[i][s][p][v];
    } catch (l) {
      return void (a < 30 && setTimeout(d, 200, e, t, o, a + 1));
    }

    if (!0 === (T = void 0 !== l ? n["c" + l] : n[i][s][p][v]).error) return function (e, t) {
      var o = e;
      o.innerHTML = "";
      var a = document.createElement("p");
      a.innerText = "An error occured during simulation.", o.appendChild(a);
      var l = document.createElement("ul"),
          r = document.createElement("li");
      r.textContent = "Title: " + (t.title ? t.title : "~"), l.appendChild(r);
      var i = document.createElement("li");
      i.textContent = "Spec: " + t.wow_spec + " " + t.wow_class, l.appendChild(i);
      var n = document.createElement("li");
      n.textContent = "Type: " + t.simulation_type, l.appendChild(n);
      var s = document.createElement("li");
      s.textContent = "Fight style: " + t.fight_style, l.appendChild(s);
      var d = document.createElement("li");
      d.textContent = "ID: " + t.id, l.appendChild(d);
      var c = document.createElement("li");
      c.textContent = "Custom profile:", l.appendChild(c), c.appendChild(document.createElement("br"));
      var h = document.createElement("textarea");
      h.readOnly = !0, h.value = t.custom_profile, h.placeholder = "No custom profile", h.style.width = "100%", c.appendChild(h);
      var g = document.createElement("li");
      g.textContent = "Log:", l.appendChild(g), g.appendChild(document.createElement("br"));
      var u = document.createElement("textarea");
      u.readOnly = !0, u.value = t.log, u.placeholder = "No log available", u.style.width = "100%", g.appendChild(u), o.appendChild(l);
    }(t, T);
    if (p = T.simc_settings.class, v = T.simc_settings.spec, s = T.simc_settings.fight_style, e.data_type = i = T.data_type, function (e, t) {
      if (!["bloodmallet.com", "127.0.0.1"].includes(window.location.hostname)) return;
      r && console.log("provide_meta_data");
      document.getElementById("meta-info").hidden = !1;

      for (var _e2 in t.simc_settings) {
        var _o = document.createTextNode(t.simc_settings[_e2]),
            _a = document.getElementById("c_" + _e2);

        _a.innerText = "", _a.appendChild(_o);
      }

      var o = document.createElement("a");
      o.href = "https://github.com/simulationcraft/simc/commit/" + t.simc_settings.simc_hash, o.innerText = t.simc_settings.simc_hash.substring(0, 7);
      var a = document.getElementById("c_simc_hash");
      a.innerText = "", a.appendChild(o);

      for (var _e3 in t.profile.character) {
        try {
          var _o2 = document.getElementById("c_" + _e3);

          _o2.innerHTML = "";

          var _a2 = document.createTextNode(t.profile.character[_e3].split(" ").map(function (e) {
            return e[0].toUpperCase() + e.substring(1);
          }).join(" "));

          _o2.appendChild(_a2);
        } catch (e) {}
      }

      var l = t.profile.character.talents;
      var i = document.getElementById("c_talents");
      i.innerHTML = "";

      for (var _o3 = 0; _o3 < l.length; _o3++) {
        var _a3 = l[_o3];

        var _r = document.createElement("a");

        _r.href = "", _r.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/";

        try {
          _r.href += "spell=" + t.talent_data[parseInt(_o3) + 1][parseInt(_a3)].spell_id;
        } catch (e) {
          continue;
        }

        _r.dataset.whIconSize = "medium", i.appendChild(_r);
      }

      for (var _o4 in t.profile.items) {
        var _a4 = document.createElement("a");

        _a4.href = "", _a4.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", _a4.href += "item=" + t.profile.items[_o4].id;
        var _l = [];

        try {
          _l.push("bonus=" + t.profile.items[_o4].bonus_id.split("/").join(":"));
        } catch (e) {}

        _l.length > 0 && (_a4.href += "?" + _l.join("&")), _a4.dataset.whIconSize = "medium";

        var _r2 = document.getElementById("c_" + _o4);

        _r2.innerHTML = "", _r2.appendChild(_a4);
      }

      "talents" === e.data_type && (document.getElementById("talent-warning").hidden = !1, function (e, t) {
        console.log("build_talent_table"), document.getElementById("talent-table").hidden = !1;
        var o = [];

        for (var _e4 = 1; _e4 < 8; _e4++) {
          for (var _t = 1; _t < 4; _t++) {
            o.push(_e4.toString() + _t.toString());
          }
        }

        for (var _i = 0; _i < o.length; _i++) {
          var _a5 = _o5[_i];

          var _o5 = document.getElementById(_a5);

          try {
            var _l2 = document.createElement("h5"),
                _i2 = t.talent_data[_a5.slice(0, 1)][_a5.slice(1, 2)];

            _l2.innerHTML = f(e, _i2.name, _a5, t), _o5.innerHTML = "", _o5.appendChild(_l2), _o5.appendChild(_("Mean", w(_a5, t))), _o5.appendChild(_("Min", y(_a5, t)[1], y(_a5, t)[0])), _o5.appendChild(_("Max", b(_a5, t)[1], b(_a5, t)[0]));

            var _n = m(_a5, t),
                _s = _n.slice(0, _a5.slice(0, 1) - 1) + "0" + _n.slice(_a5.slice(0, 1), 8),
                _d = t.data[_n],
                _c = t.data[_s];

            _o5.appendChild(_("Max dps", x(_c, _d), _n)), _n = m(_a5, t);

            var _h = x(t.data[t.sorted_data_keys[0]], t.data[_n]);

            _o5.appendChild(_("Max dps minus global best", _h, _n));
          } catch (e) {
            _o5.innerHTML = "-", r && console.warn(e);
          }
        }

        $(function () {
          $('[data-toggle="tooltip"]').tooltip();
        });
      }(e, t));

      try {
        $WowheadPower.refreshLinks();
      } catch (e) {}
    }(e, T), "secondary_distributions" === i) return function (e, t, o) {
      r && console.log("update_secondary_distribution_chart");
      var a = t.id,
          l = e.chart_id,
          i = e.fight_style,
          s = e.wow_class,
          d = e.wow_spec,
          c = (e.chart_engine, !1);
      c = n["c" + l], s = c.simc_settings.class, d = c.simc_settings.spec, i = c.simc_settings.fight_style;

      var g = u(e),
          _ = !1;

      if ("highcharts" == e.chart_engine) try {
        _ = Highcharts.chart(a, g);
      } catch (e) {
        return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
      } else if ("highcharts_old" == e.chart_engine) try {
        var _e5 = g;
        _e5.chart.renderTo = a, _ = new Highcharts.Chart(_e5);
      } catch (e) {
        return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
      }
      o = void 0, o = _;
      var p = void 0;
      p = Object.keys(c.data)[0];
      var m = c.data[p][c.sorted_data_keys[p][0]],
          f = c.data[p][c.sorted_data_keys[p][c.sorted_data_keys[p].length - 1]],
          y = h(100, 0, 100),
          b = h(0, 0, 100),
          w = {
        name: Intl.NumberFormat().format(m) + " DPS",
        color: "rgb(" + y[0] + "," + y[1] + "," + y[2] + ")",
        data: []
      };

      var _arr = Object.keys(c.data[p]);

      for (var _i3 = 0; _i3 < _arr.length; _i3++) {
        var _t2 = _arr[_i3];

        var _o6 = c.data[p][_t2],
            _a6 = h(_o6, f, m),
            _l3 = 1,
            _r3 = "#232227",
            _i4 = 5;

        m === _o6 && (_l3 = 3, _i4 = 8, _r3 = e.font_color);

        var _n2 = void 0;

        if (_t2.indexOf("70") > -1) switch (_n2 = {
          enabled: !0,
          allowOverlap: !0
        }, _t2.indexOf("70")) {
          case 0:
            _n2.format = "Crit", _n2.verticalAlign = "top";
            break;

          case 3:
            _n2.format = "Haste";
            break;

          case 6:
            _n2.format = "Mastery", _n2.verticalAlign = "top";
            break;

          case 9:
            _n2.format = "Versatility", _n2.verticalAlign = "top";
        }
        var _s2 = c.secondary_sum;

        var _d2 = parseInt(_t2.split("_")[0]),
            _g = parseInt(_t2.split("_")[1]),
            _u = parseInt(_t2.split("_")[2]),
            _2 = parseInt(_t2.split("_")[3]);

        w.data.push({
          x: Math.sqrt(3) / 2 * (_d2 + 1 / 3 * _g),
          y: Math.sqrt(2 / 3) * _g,
          z: _u + .5 * _d2 + .5 * _g,
          name: _t2,
          color: "rgb(" + _a6[0] + "," + _a6[1] + "," + _a6[2] + ")",
          dps: _o6,
          dps_max: m,
          dps_min: f,
          stat_crit: _d2 * _s2 / 100,
          stat_haste: _g * _s2 / 100,
          stat_mastery: _u * _s2 / 100,
          stat_vers: _2 * _s2 / 100,
          stat_sum: _s2,
          marker: {
            radius: _i4,
            lineColor: _r3,
            lineWidth: _l3
          },
          dataLabels: _n2
        });
      }

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      o.addSeries(w, !1), o.addSeries({
        name: Intl.NumberFormat().format(f) + " DPS",
        color: "rgb(" + b[0] + "," + b[1] + "," + b[2] + ")"
      }, !1);
      var x = c.timestamp,
          v = x.split("-")[0],
          C = x.split("-")[1],
          k = x.split("-")[2].split(" ")[0],
          T = x.split(" ")[1].split(":")[0],
          A = x.split(":")[1],
          z = "Last updated ",
          L = new Date() - new Date(Date.UTC(v, C - 1, k, T, A)),
          E = Math.floor(L / 24 / 3600 / 1e3);
      E > 0 && (z += "".concat(E, "d "));
      var M = Math.floor(L / 3600 / 1e3) - 24 * E;
      z += "".concat(M, "h ago"), o.redraw(), function (e) {
        function t(t) {
          var a = (t = o.pointer.normalize(t)).chartX,
              l = t.chartY,
              r = o.options.chart.options3d.alpha,
              i = o.options.chart.options3d.beta,
              n = 5;

          function s(e) {
            e = o.pointer.normalize(e), o.update({
              chart: {
                options3d: {
                  alpha: r + (e.chartY - l) / n,
                  beta: i + (a - e.chartX) / n
                }
              }
            }, void 0, void 0, !1);
          }

          o.unbindDragMouse = e.addEvent(document, "mousemove", s), o.unbindDragTouch = e.addEvent(document, "touchmove", s), e.addEvent(document, "mouseup", o.unbindDragMouse), e.addEvent(document, "touchend", o.unbindDragTouch);
        }

        e.addEvent(o.container, "mousedown", t), e.addEvent(o.container, "touchstart", t);
      }(Highcharts);
    }(e, t, o);
    "azerite_traits" === T.data_type ? -1 === i.indexOf("azerite_items") && (i = "azerite_traits_stacking") : i = T.data_type;
    var A = T;
    var z, L;
    if (i.indexOf("azerite_traits") > -1) {
      if ("azerite_traits_stacking" === i) "all" === e.azerite_tier ? z = A.sorted_data_keys_2.slice(0, C) : "1" === e.azerite_tier || "3" === e.azerite_tier ? z = A.sorted_azerite_tier_3_trait_stacking.slice(0, C) : "2" === e.azerite_tier && (z = A.sorted_azerite_tier_2_trait_stacking.slice(0, C)), L = A.data.baseline[A.simulated_steps[0]];else {
        if ("azerite_traits_itemlevel" !== i) return void console.log("Chart found, but unknown data-type detected.");
        "all" === e.azerite_tier ? z = A.sorted_data_keys.slice(0, C) : "1" === e.azerite_tier || "3" === e.azerite_tier ? z = A.sorted_azerite_tier_3_itemlevel.slice(0, C) : "2" === e.azerite_tier && (z = A.sorted_azerite_tier_2_itemlevel.slice(0, C)), L = A.data.baseline[A.simulated_steps[A.simulated_steps.length - 1]];
      }
    } else z = A.sorted_data_keys.slice(0, C), L = ["races", "talents"].includes(i) ? 0 : ["legendaries", "soul_binds", "covenants"].includes(i) ? A.data.baseline : A.data.baseline[A.simulated_steps[A.simulated_steps.length - 1]];

    for (r && (console.log(z), console.log("Baseline dps: " + L)), o.setTitle({
      text: A.title
    }, {
      text: A.subtitle
    }, !1); o.series[0];) {
      o.series[0].remove(!1);
    }

    var E = z.map(function (t) {
      return function (e, t, o) {
        r && (console.log("get_category_name"), console.log(t));
        var a = {
          cn: "cn_CN",
          en: "en_US",
          de: "de_DE",
          es: "es_ES",
          fr: "fr_FR",
          it: "it_IT",
          ko: "ko_KR",
          pt: "pt_BR",
          ru: "ru_RU"
        };
        if ("wowhead" != e.tooltip_engine && "wowdb" != e.tooltip_engine) try {
          return o.translations[t][a[e.language]];
        } catch (l) {
          return o.languages[t][a[e.language]];
        }
        if ("races" === e.data_type) try {
          return o.translations[t][a[e.language]];
        } catch (l) {
          return o.languages[t][a[e.language]];
        }

        if ("wowhead" == e.tooltip_engine) {
          var _l4 = document.createElement("a");

          if (_l4.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", o.hasOwnProperty("item_ids") && o.item_ids.hasOwnProperty(t)) {
            if (_l4.href += "item=" + o.item_ids[t] + "/" + g(t), o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
              _l4.href += "?azerite-powers=" + o.class_id;

              for (var _e7 = 0; _e7 < o.used_azerite_traits_per_item[t].length; _e7++) {
                var _a7 = o.used_azerite_traits_per_item[t][_e7];
                _l4.href += ":" + _a7.id;
              }
            }

            var _e6 = o.simulated_steps[o.simulated_steps.length - 1];
            "string" == typeof _e6 && _e6.indexOf("_") > -1 && (_e6 = _e6.split("_")[1]), _l4.href += "&ilvl=" + _e6;
          } else o.hasOwnProperty("spell_ids") && o.spell_ids.hasOwnProperty(t) && (_l4.href += "spell=" + o.spell_ids[t] + "/" + g(t));

          try {
            _l4.appendChild(document.createTextNode(o.translations[t][a[e.language]]));
          } catch (r) {
            try {
              _l4.appendChild(document.createTextNode(o.languages[t][a[e.language]]));
            } catch (e) {
              _l4.appendChild(document.createTextNode(t)), console.log("Bloodmallet charts: Translation for " + t + " wasn't found. Please help improving the reasource at bloodmallet.com.");
            }
          }

          return _l4.outerHTML;
        }

        if ("wowdb" == e.tooltip_engine) {
          var _l5 = document.createElement("a");

          _l5.href = "http://www.wowdb.com/";

          try {
            _l5.href += "items/" + o.item_ids[t];
          } catch (e) {
            r && (console.log(e), console.log("We're probably looking at a spell."));
          }

          if (_l5.href.indexOf("items") > -1) {
            var _e8 = o.simulated_steps[o.simulated_steps.length - 1];

            if ("string" == typeof _e8 && _e8.indexOf("_") > -1 && (_e8 = _e8.split("_")[1]), _l5.href += "?itemLevel=" + _e8, o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
              _l5.href += "&azerite=", _l5.href += o.class_id + ":0";

              for (var _e9 = 0; _e9 < o.used_azerite_traits_per_item[t].length; _e9++) {
                var _a8 = o.used_azerite_traits_per_item[t][_e9];
                _l5.href += ":" + _a8.id;
              }
            }
          }

          try {
            _l5.href += "spells/" + o.spell_ids[t];
          } catch (e) {
            r && (console.log(e), console.log("We're probably looking at an item."));
          }

          _l5.dataset.tooltipHref = _l5.href;

          var _i5 = void 0;

          try {
            _i5 = document.createTextNode(o.translations[t][a[e.language]]);
          } catch (l) {
            try {
              _i5 = document.createTextNode(o.languages[t][a[e.language]]);
            } catch (e) {
              _i5 = t, console.log("Bloodmallet charts: Translation for " + t + " wasn't found. Please help improving the reasource at bloodmallet.com.");
            }
          }

          return _l5.appendChild(document.createTextNode(_i5)), _l5.outerHTML;
        }
      }(e, t, A);
    });
    r && console.log(E), "highcharts" == k ? o.update({
      xAxis: {
        categories: E
      }
    }, !1) : "highcharts_old" == k && o.xAxis[0].setCategories(E, !1);
    var M = [];

    if ("azerite_traits_stacking" == i) {
      var _e10 = A.simulated_steps[0].replace("1_", "");

      M.push("3_" + _e10), M.push("2_" + _e10), M.push("1_" + _e10);
    } else M = A.simulated_steps;

    if (r && console.log("simulated_steps: " + M), M) {
      var _t3 = {};

      for (var _e11 in A.data) {
        if (A.data.hasOwnProperty(_e11)) {
          var _o7 = A.data[_e11];
          _t3[_e11] = {};
          var _a9 = L;
          "conduits" === i && (_a9 = A.data.baseline[A.covenant_mapping[_e11]]);

          for (var _l6 = M.length - 1; _l6 >= 0; _l6--) {
            var _r4 = M[_l6];
            _o7.hasOwnProperty(_r4) ? (_t3[_e11][_r4] = _o7[_r4] - _a9, _a9 = _o7[_r4]) : _t3[_e11][_r4] = 0;
          }
        }
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = M[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _a10 = _step.value;
          var _l7 = [];

          for (var _o8 = 0; _o8 < z.length; _o8++) {
            var _r6 = z[_o8];

            _l7.push(c(e, _t3[_r6][_a10], L));
          }

          var _r5 = _a10;
          ["azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(i) > -1 ? _r5 = _a10.split("_")[1] : "azerite_traits_stacking" === i && (_r5 = _a10.split("_")[0]), o.addSeries({
            data: _l7,
            name: _r5
          }, !1);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else if (["legendaries", "soul_binds", "covenants"].includes(i)) {
      var I = [];

      for (var _t4 = 0; _t4 < z.length; _t4++) {
        var _o9 = z[_t4],
            _a11 = A.data[_o9] - L;

        I.push(c(e, _a11, L));
      }

      o.addSeries({
        data: I,
        name: "Data",
        showInLegend: !1
      }, !1);
    } else {
      I = [];

      for (var _e12 = 0; _e12 < z.length; _e12++) {
        var _t5 = z[_e12],
            _o10 = A.data[_t5];
        I.push(_o10);
      }

      o.addSeries({
        data: I,
        name: "DPS",
        showInLegend: !1
      }, !1);
    }

    ["trinkets", "azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(i) > -1 ? o.legend.title.attr({
      text: "Itemlevel"
    }) : "races" === i ? o.legend.title.attr({
      text: ""
    }) : "azerite_traits_stacking" === i && o.legend.title.attr({
      text: "Trait count"
    }), o.redraw(), "highcharts_old" == k && o.reflow(), t.style.height = 200 + 30 * z.length + "px", "highcharts" == k && o.setSize(t.style.width, t.style.height), "wowdb" == e.tooltip_engine && setTimeout(function () {
      !function (e) {
        r && console.log("readd_wowdb_tooltips");

        try {
          CurseTips["wowdb-tooltip"].watchElements(document.getElementById(e).getElementsByTagName("a"));
        } catch (e) {
          console.log("Setting wowdb (CurseTips) tooltips failed. Error: ", e);
        }
      }(t.id);
    }, 1);
  }

  function c(e, t, o) {
    return "absolute" === e.value_style ? t : "relative" === e.value_style ? Math.round(1e4 * t / o) / 100 : void console.error("Unknown value-style", e.value_style);
  }

  function h(e, t, o) {
    r && console.log("create_color");
    var a = [0, 255, 255],
        l = [255, 255, 0],
        i = [255, 0, 0],
        n = 0,
        s = 0;

    for (var _e13 = 0; _e13 < 3; _e13++) {
      n += Math.abs(i[_e13] - l[_e13]), s += Math.abs(l[_e13] - a[_e13]);
    }

    var d = t + (o - t) * (s / (s + n));

    if (e >= d) {
      var _t6 = (e - d) / (o - d);

      return [Math.floor(i[0] * _t6 + l[0] * (1 - _t6)), Math.floor(i[1] * _t6 + l[1] * (1 - _t6)), Math.floor(i[2] * _t6 + l[2] * (1 - _t6))];
    }

    {
      var _o11 = (e - t) / (d - t);

      return [Math.floor(l[0] * _o11 + a[0] * (1 - _o11)), Math.floor(l[1] * _o11 + a[1] * (1 - _o11)), Math.floor(l[2] * _o11 + a[2] * (1 - _o11))];
    }
  }

  function g(e) {
    return e.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }

  function u(i) {
    if (r && console.log("update_chart_style"), "highcharts" == i.chart_engine || "highcharts_old" == i.chart_engine) {
      if ("secondary_distributions" === i.data_type) return {
        chart: {
          renderTo: "scatter_plot_chart",
          type: "scatter3d",
          backgroundColor: null,
          animation: !1,
          height: 800,
          width: 800,
          options3d: {
            enabled: !0,
            alpha: 10,
            beta: 30,
            depth: 800,
            fitToPlot: !1
          }
        },
        legend: {
          enabled: !0,
          backgroundColor: i.background_color,
          borderColor: i.font_color,
          borderWidth: 1,
          align: "right",
          verticalAlign: "middle",
          layout: "vertical",
          itemStyle: {
            color: i.font_color
          },
          itemHoverStyle: {
            color: i.font_color
          }
        },
        plotOptions: {
          series: {
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: i.font_color,
                fontSize: i.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color,
            fontSize: i.font_size
          }
        },
        tooltip: {
          headerFormat: "",
          pointFormatter: function pointFormatter() {
            return '<table class="">                <thead>                  <tr>                    <th scope="col"></th>                    <th scope="col">Absolute</th>                    <th scope="col">Relative</th>                  </tr>                </thead>                <tbody>                  <tr>                    <th scope="row">DPS</th>                    <td>' + Intl.NumberFormat().format(this.dps) + "</td>                    <td>" + Math.round(this.dps / this.dps_max * 1e4) / 100 + '%</td>                  </tr>                  <tr>                    <th scope="row">Crit</th>                    <td>' + Intl.NumberFormat().format(this.stat_crit) + "</td>                    <td>" + this.name.split("_")[0] + '%</td>                  </tr>                  <tr>                    <th scope="row">Haste</th>                    <td>' + Intl.NumberFormat().format(this.stat_haste) + "</td>                    <td>" + this.name.split("_")[1] + '%</td>                  </tr>                  <tr>                    <th scope="row">Mastery</th>                    <td>' + Intl.NumberFormat().format(this.stat_mastery) + "</td>                    <td>" + this.name.split("_")[2] + '%</td>                  </tr>                  <tr>                    <th scope="row">Versatility</th>                    <td>' + Intl.NumberFormat().format(this.stat_vers) + "</td>                    <td>" + this.name.split("_")[3] + "%</td>                  </tr>                </tbody>              </table>";
          },
          useHTML: !0,
          borderColor: i.background_color
        },
        xAxis: {
          min: 0,
          max: 80,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        yAxis: {
          min: -10,
          max: 70,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        zAxis: {
          min: 10,
          max: 90,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          reversed: !0,
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        }
      };
      var _r7 = i.background_color,
          _n3 = i.axis_color,
          _s3 = i.font_color,
          _d3 = "https://bloodmallet.com/";
      void 0 !== i.chart_id ? _d3 += "chart/" + i.chart_id : void 0 !== i.wow_class && void 0 !== i.wow_spec && (_d3 += "#" + i.wow_class + "_" + i.wow_spec);
      var _c2 = {
        chart: {
          type: "bar",
          backgroundColor: t,
          style: {
            fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"'
          }
        },
        colors: e,
        credits: {
          href: _d3,
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        legend: {
          align: "right",
          backgroundColor: t,
          borderColor: a,
          borderWidth: 1,
          floating: !1,
          itemMarginBottom: 3,
          itemMarginTop: 0,
          layout: "vertical",
          reversed: !0,
          shadow: !1,
          verticalAlign: "middle",
          x: 0,
          y: 0,
          itemStyle: {
            color: o
          },
          itemHoverStyle: {
            color: o
          },
          title: {
            text: " ",
            style: {
              color: o
            }
          },
          symbolRadius: 0
        },
        plotOptions: {
          series: {
            stacking: "normal",
            borderColor: t,
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            },
            style: {
              textOutline: !1,
              fontSize: l
            }
          }
        },
        series: [],
        title: {
          text: "Loading data...",
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        subtitle: {
          text: '...from <a href="https://bloodmallet.com">bloodmallet</a>',
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        tooltip: {
          headerFormat: "<b>{point.x}</b>",
          shared: !0,
          backgroundColor: t,
          borderColor: a,
          style: {
            color: o,
            fontSize: l
          },
          useHTML: !0
        },
        xAxis: {
          categories: [],
          labels: {
            useHTML: !0,
            style: {
              color: o,
              fontSize: l
            }
          },
          gridLineWidth: 0,
          gridLineColor: a,
          lineColor: a,
          tickColor: a
        },
        yAxis: [{
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === i.value_style ? "Δ Damage per second" : "% Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }, {
          linkedTo: 0,
          opposite: !0,
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === i.value_style ? "Δ Damage per second" : "% Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }]
      };
      return _c2.chart.backgroundColor = _r7, _c2.legend.backgroundColor = _r7, _c2.legend.borderColor = _n3, _c2.legend.itemStyle.color = _s3, _c2.legend.itemHoverStyle.color = _s3, _c2.title.style.color = _s3, _c2.subtitle.style.color = _s3, _c2.tooltip.formatter = function () {
        var e = document.createElement("div");
        e.style.margin = "-4px -7px -7px -7px", e.style.padding = "3px 3px 6px 3px", e.style.backgroundColor = "transparent" !== _r7 ? _r7 : t, "highcharts_old" === i.chart_engine && (e.style.margin = "-7px");
        var o = document.createElement("div");
        e.appendChild(o), o.style.marginLeft = "9px", o.style.marginRight = "9px", o.style.marginBottom = "6px", o.style.fontWeight = "700", o.innerHTML = this.x;
        var a = 0;

        for (var l = this.points.length - 1; l >= 0; l--) {
          if (a += this.points[l].y, 0 !== this.points[l].y) {
            var _t7 = document.createElement("div");

            e.appendChild(_t7);

            var _o12 = document.createElement("span");

            _t7.appendChild(_o12), _o12.style.marginLeft = "9px", _o12.style.borderLeft = "9px solid " + this.points[l].series.color, _o12.style.paddingLeft = "4px", Number.isInteger(this.points[l].series.name) && _o12.appendChild(document.createTextNode(this.points[l].series.name + ":")), _t7.appendChild(document.createTextNode("  " + Intl.NumberFormat().format(a) + ("relative" === i.value_style ? "%" : "")));
          }
        }

        return e.outerHTML;
      }, _c2.tooltip.backgroundColor = "transparent" !== _r7 ? _r7 : t, _c2.tooltip.borderColor = _n3, _c2.tooltip.style.color = _s3, _c2.xAxis.labels.style.color = _s3, _c2.xAxis.gridLineColor = _n3, _c2.xAxis.lineColor = _n3, _c2.xAxis.tickColor = _n3, _c2.yAxis[0].labels.style.color = _n3, _c2.yAxis[0].stackLabels.style.color = _s3, _c2.yAxis[0].gridLineColor = _n3, _c2.yAxis[0].lineColor = _n3, _c2.yAxis[0].tickColor = _n3, _c2.yAxis[0].title.style.color = _n3, _c2.yAxis[1].labels.style.color = _n3, _c2.yAxis[1].stackLabels.style.color = _s3, _c2.yAxis[1].gridLineColor = _n3, _c2.yAxis[1].lineColor = _n3, _c2.yAxis[1].tickColor = _n3, _c2.yAxis[1].title.style.color = _n3, _c2.credits.style.color = _s3, _c2;
    }
  }

  function _(e, t, o) {
    var a = document.createElement("div");
    a.innerHTML = e + ": ";
    var l = document.createElement("span");

    if (l.innerHTML = t + "%", l.classList += p(t >= 0 ? t : 3 - t), void 0 !== o) {
      l.title = "Talent combination: " + o, l.setAttribute("data-toggle", "tooltip"), l.setAttribute("data-placement", "bottom");

      var _e14 = document.createElement("span");

      _e14.classList += "priest-color", _e14.innerHTML = " (?)", l.appendChild(_e14);
    }

    return a.appendChild(l), a;
  }

  function p(e) {
    return r && console.log("get_value_color"), e < 5 ? "mage-color" : e > 10 && e <= 12 ? "druid-color" : e > 12 ? "death_knight-color" : "monk-color";
  }

  function m(e, t) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = t.sorted_data_keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _o13 = _step2.value;
        if (_o13[e.slice(0, 1) - 1] === e.slice(1, 2)) return _o13;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return !1;
  }

  function f(e, t, o, a) {
    var l = '<a href="https://';
    return "en" === e.language || "EN" === e.language ? l += "www" : l += e.language.toLowerCase(), l += ".wowhead.com/spell=", l += a.talent_data[o.slice(0, 1)][o.slice(1, 2)].spell_id, l += '"', l += ">", l += function (e, t) {
      r && console.log("get_translated_name " + e);
      var o = {
        "zh-hans": "cn_CN",
        en: "en_US",
        de: "de_DE",
        es: "es_ES",
        fr: "fr_FR",
        it: "it_IT",
        ko: "ko_KR",
        pt: "pt_BR",
        ru: "ru_RU"
      },
          a = "";

      try {
        a = t.translations[e][o[language]];
      } catch (t) {
        r && (console.log("No translation for ".concat(e, " found.")), console.log(t)), a = e;
      }

      r && console.log("Translated name: " + a);
      return a;
    }(t, a), l += "</a>";
  }

  function y(e, t) {
    var o = e.slice(0, 1),
        a = e.slice(1, 2),
        l = 100,
        r = "";
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = t.sorted_data_keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _e15 = _step3.value;

        if (_e15[o - 1] === a) {
          var _a12 = t.data[_e15],
              _i6 = t.data[_e15.slice(0, o - 1) + "0" + _e15.slice(o, 8)];

          l > x(_i6, _a12) && (l = x(_i6, _a12), r = _e15);
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return [r, l];
  }

  function b(e, t) {
    var o = e.slice(0, 1),
        a = e.slice(1, 2),
        l = -100,
        r = "";
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = t.sorted_data_keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var _e16 = _step4.value;

        if (_e16[o - 1] === a) {
          var _a13 = t.data[_e16],
              _i7 = t.data[_e16.slice(0, o - 1) + "0" + _e16.slice(o, 8)];

          l < x(_i7, _a13) && (l = x(_i7, _a13), r = _e16);
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return [r, l];
  }

  function w(e, t) {
    r && console.log("get_average_gain");
    var o = [];
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = t.sorted_data_keys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var _a14 = _step5.value;
        _a14[e.slice(0, 1) - 1] === e.slice(1, 2) && o.push(_a14);
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    var a = 0;

    for (var _i8 = 0; _i8 < o.length; _i8++) {
      var _l8 = _o14[_i8];
      var _o14 = t.data[_l8];
      a += x(t.data[_l8.slice(0, e.slice(0, 1) - 1) + "0" + _l8.slice(e.slice(0, 1), 8)], _o14);
    }

    return Math.round(a / o.length * 100) / 100;
  }

  function x(e, t) {
    return r && console.log("get_percentage_gain"), Math.round(100 * (100 * t / e - 100)) / 100;
  }

  this.init_charts = new function () {
    r && console.log("init_charts");
    var e = document.querySelectorAll("div.bloodmallet_chart"),
        l = [];

    for (var _t8 = 0; _t8 < e.length; _t8++) {
      var _o15 = e[_t8];
      if (l.indexOf(_o15.id) > -1) return void console.error("Multiple Elements use the same ID ('" + _o15.id + "'). Aborting bloodmallet_chart_import.js.");
      l.push(_o15.id);
    }

    for (var _l9 = 0; _l9 < e.length; _l9++) {
      var _i9 = void 0;

      try {
        _i9 = e[_l9].id;
      } catch (e) {
        return void console.error("Each .bloodmallet_chart needs an ID. Aborting bloodmallet_chart_import.js.");
      }

      var _n4 = document.getElementById(e[_l9].id);

      if (_n4) {
        var _e17 = {
          chart_id: void 0,
          wow_class: void 0,
          wow_spec: void 0,
          data_type: "trinkets",
          azerite_tier: "all",
          fight_style: "patchwerk",
          axis_color: a,
          background_color: t,
          font_color: o,
          limit: 7,
          chart_engine: "highcharts",
          tooltip_engine: "wowhead",
          language: "en",
          value_style: "absolute"
        };

        try {
          void 0 !== bloodmallet.style.axis_color && (_e17.axis_color = bloodmallet.style.axis_color), void 0 !== bloodmallet.style.background_color && (_e17.background_color = bloodmallet.style.background_color), void 0 !== bloodmallet.style.font_color && (_e17.font_color = bloodmallet.style.font_color), void 0 !== bloodmallet.settings.entries && (_e17.limit = bloodmallet.settings.entries), void 0 !== bloodmallet.settings.chart_engine && (_e17.chart_engine = bloodmallet.settings.chart_engine), void 0 !== bloodmallet.settings.tooltip_engine && (_e17.tooltip_engine = bloodmallet.settings.tooltip_engine), void 0 !== bloodmallet.settings.language && (_e17.language = bloodmallet.settings.language), void 0 !== bloodmallet.settings.value_style && (_e17.value_style = bloodmallet.settings.value_style);
        } catch (e) {
          r && console.log("Applying page wide settings failed or no page wide settings were found.");
        }

        _n4.getAttribute("data-entries") && (_e17.limit = _n4.getAttribute("data-entries")), _n4.getAttribute("data-fight-style") && (_e17.fight_style = _n4.getAttribute("data-fight-style")), _n4.getAttribute("data-type") && (_e17.data_type = _n4.getAttribute("data-type")), _n4.getAttribute("data-azerite-tier") && (_e17.azerite_tier = _n4.getAttribute("data-azerite-tier")), _n4.getAttribute("data-background-color") && (_e17.background_color = _n4.getAttribute("data-background-color")), _n4.getAttribute("data-font-color") && (_e17.font_color = _n4.getAttribute("data-font-color")), _n4.getAttribute("data-axis-color") && (_e17.axis_color = _n4.getAttribute("data-axis-color")), _n4.getAttribute("data-tooltip-engine") && (_e17.tooltip_engine = _n4.getAttribute("data-tooltip-engine")), _n4.getAttribute("data-chart-engine") && (_e17.chart_engine = _n4.getAttribute("data-chart-engine")), _n4.getAttribute("data-language") && (_e17.language = _n4.getAttribute("data-language")), _n4.getAttribute("data-value-style") && (_e17.value_style = _n4.getAttribute("data-value-style"));

        var _l10 = !0;

        _n4.getAttribute("data-chart-id") ? _e17.chart_id = _n4.getAttribute("data-chart-id") : (_n4.getAttribute("data-wow-class") || (console.error("Required 'data-chart-id' or 'data-wow-class' attribute wasn't found in " + _i9 + "."), _l10 = !1), _e17.wow_class = _n4.getAttribute("data-wow-class"), _n4.getAttribute("data-wow-spec") || (console.error("Required 'data-chart-id' or 'data-wow-spec' attribute wasn't found in " + _i9 + "."), _l10 = !1), _e17.wow_spec = _n4.getAttribute("data-wow-spec"));

        var _c3 = u(_e17),
            _h2 = !1;

        if ("highcharts" == _e17.chart_engine) try {
          _h2 = Highcharts.chart(_i9, _c3);
        } catch (e) {
          return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        } else if ("highcharts_old" == _e17.chart_engine) try {
          var _e18 = _c3;
          _e18.chart.renderTo = _i9, _h2 = new Highcharts.Chart(_e18);
        } catch (e) {
          return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        }
        _l10 ? s(_e17) : _h2.setTitle({
          text: "Wrong chart setup"
        }, {
          text: "Missing 'data-chart-id', 'data-wow-class' or 'data-wow-spec'. See <a href=\"https://github.com/Bloodmallet/bloodmallet_web_frontend/wiki/How-to-import-charts\">wiki</a>"
        }), setTimeout(d, 1, _e17, _n4, _h2, 0);
      }
    }
  }();
}

document.addEventListener("DOMContentLoaded", function () {
  bloodmallet_chart_import();
});