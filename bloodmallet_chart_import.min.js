"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function bloodmallet_chart_import() {
  var t = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
      e = "#343a40",
      o = "#f8f9fa",
      a = "#828282",
      l = "1.1rem",
      r = !1,
      i = "https://bloodmallet.com/chart/get/",
      n = {
    cn: "cn_CN",
    en: "en_US",
    de: "de_DE",
    es: "es_ES",
    fr: "fr_FR",
    it: "it_IT",
    ko: "ko_KR",
    pt: "pt_BR",
    ru: "ru_RU",
    "zh-hans": "cn_CN"
  },
      s = {
    Kyrian: {
      id: 1,
      color: "#69ccf0"
    },
    Venthyr: {
      id: 2,
      color: "#c41f3b"
    },
    "Night Fae": {
      id: 3,
      color: "#a330c9"
    },
    Necrolord: {
      id: 4,
      color: "#abd473"
    }
  },
      d = {
    unholy: "#abd473",
    frost: "#69ccf0",
    blood: "#c41f3b"
  },
      c = "Î” Damage per second",
      h = "% Damage per second";

  function g(t) {
    r && console.log("load_data");
    var e = t.chart_id,
        o = t.data_type,
        a = t.fight_style,
        l = t.wow_class,
        n = t.wow_spec;

    try {
      if (u(t)) return;
    } catch (t) {
      r && (console.log("Data needs to be loaded."), console.log(t));
    }

    var s = a;
    s += "/" + l, s += "/" + n;
    var d = "";
    d = e ? i + e : i + o + "/" + s;
    var c = new XMLHttpRequest();
    r && console.log("Fetching data from: " + d), c.open("GET", d, !0), c.onload = function (e) {
      if (4 === c.readyState) if (200 === c.status) {
        var _e = JSON.parse(c.responseText);

        t.html_element.dataset.loadedData = c.responseText, r && (console.log(_e), console.log("Load and save finished."));
      } else console.error(c.statusText);
    }, c.onerror = function (t) {
      console.error("Fetching data from bloodmallet.com encountered an error, ", t);
    }, c.send(null);
  }

  function u(t) {
    return JSON.parse(t.html_element.dataset.loadedData);
  }

  function f(t, e, o, a) {
    r && console.log("update_chart");
    var l = t.data_type,
        i = t.limit,
        n = t.chart_engine,
        h = !1;

    try {
      h = u(t);
    } catch (l) {
      return void (a < 30 && setTimeout(f, 200, t, e, o, a + 1));
    }

    if (t.data = h, "highcharts_old" != n && o.update({
      accessibility: {
        enable: !1
      }
    }, !1), !0 === h.error || "error" === h.status) return function (t, e) {
      var o = t;

      if (o.innerHTML = "", "error" === e.status) {
        var _t = document.createElement("p");

        _t.innerText = e.message, o.appendChild(_t);
      } else {
        var _t2 = document.createElement("p");

        _t2.innerText = "An error occured during simulation.", o.appendChild(_t2);

        var _a = document.createElement("ul"),
            _l = document.createElement("li");

        _l.textContent = "Title: " + (e.title ? e.title : "~"), _a.appendChild(_l);

        var _r = document.createElement("li");

        _r.textContent = "Spec: " + e.wow_spec + " " + e.wow_class, _a.appendChild(_r);

        var _i = document.createElement("li");

        _i.textContent = "Type: " + e.simulation_type, _a.appendChild(_i);

        var _n = document.createElement("li");

        _n.textContent = "Fight style: " + e.fight_style, _a.appendChild(_n);

        var _s = document.createElement("li");

        _s.textContent = "ID: " + e.id, _a.appendChild(_s);

        var _d = document.createElement("li");

        _d.textContent = "Custom profile:", _a.appendChild(_d), _d.appendChild(document.createElement("br"));

        var _c = document.createElement("textarea");

        _c.value = e.custom_profile, _c.placeholder = "No custom profile", _c.style.width = "100%", _c.classList.add("form-control"), _d.appendChild(_c);

        var _h = document.createElement("li");

        _h.textContent = "Log:", _a.appendChild(_h), _h.appendChild(document.createElement("br"));

        var _g = document.createElement("textarea");

        _g.value = e.log, _g.placeholder = "No log available", _g.style.width = "100%", _g.classList.add("form-control"), _h.appendChild(_g), o.appendChild(_a);
      }
    }(e, h);
    if (wow_class = h.simc_settings.class, wow_spec = h.simc_settings.spec, fight_style = h.simc_settings.fight_style, t.data_type = l = h.data_type, ("legendaries" === t.data_type || "tier_set" === t.data_type) && (t.value_style = "absolute"), x(t, h), "secondary_distributions" === l) return function (t, e, o) {
      r && console.log("update_secondary_distribution_chart");
      var a = e.id,
          l = (t.chart_id, t.fight_style),
          i = t.wow_class,
          n = t.wow_spec,
          s = (t.chart_engine, !1);
      s = u(t), i = s.simc_settings.class, n = s.simc_settings.spec, l = s.simc_settings.fight_style;
      var d = w(t),
          c = !1;
      if ("highcharts" == t.chart_engine) try {
        c = Highcharts.chart(a, d);
      } catch (t) {
        return console.log("When trying to create a highcharts chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(t);
      } else if ("highcharts_old" == t.chart_engine) try {
        var _t3 = d;
        _t3.chart.renderTo = a, c = new Highcharts.Chart(_t3);
      } catch (t) {
        return console.log("When trying to create a highcharts_old chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(t);
      }
      o = void 0, o = c, !1;
      var h = "baseline";
      0;

      var g = s.data[h][s.sorted_data_keys[h][0]],
          f = s.data[h][s.sorted_data_keys[h][s.sorted_data_keys[h].length - 1]],
          p = _(100, 0, 100),
          m = _(0, 0, 100),
          y = {
        name: Intl.NumberFormat().format(g) + " DPS",
        color: "rgb(" + p[0] + "," + p[1] + "," + p[2] + ")",
        data: []
      };

      var _arr = Object.keys(s.data[h]);

      for (var _i2 = 0; _i2 < _arr.length; _i2++) {
        var _e2 = _arr[_i2];

        var _o = void 0,
            _a2 = s.data[h][_e2],
            _l2 = _(_a2, f, g),
            _r2 = 1,
            _i3 = "#232227",
            _n2 = 5;

        if (g === _a2 && (_r2 = 3, _n2 = 8, _i3 = t.font_color), _e2.indexOf("70") > -1) switch (_o = {
          enabled: !0,
          allowOverlap: !0
        }, _e2.indexOf("70")) {
          case 0:
            _o.format = "Crit", _o.verticalAlign = "top";
            break;

          case 3:
            _o.format = "Haste";
            break;

          case 6:
            _o.format = "Mastery", _o.verticalAlign = "top";
            break;

          case 9:
            _o.format = "Versatility", _o.verticalAlign = "top";
        }
        var _d2 = s.secondary_sum;

        var _c2 = parseInt(_e2.split("_")[0]),
            _u = parseInt(_e2.split("_")[1]),
            _p = parseInt(_e2.split("_")[2]),
            _m = parseInt(_e2.split("_")[3]);

        y.data.push({
          x: Math.sqrt(3) / 2 * (_c2 + 1 / 3 * _u),
          y: Math.sqrt(2 / 3) * _u,
          z: _p + .5 * _c2 + .5 * _u,
          name: _e2,
          color: "rgb(" + _l2[0] + "," + _l2[1] + "," + _l2[2] + ")",
          dps: _a2,
          dps_max: g,
          dps_min: f,
          stat_crit: _c2 * _d2 / 100,
          stat_haste: _u * _d2 / 100,
          stat_mastery: _p * _d2 / 100,
          stat_vers: _m * _d2 / 100,
          stat_sum: _d2,
          marker: {
            radius: _n2,
            lineColor: _i3,
            lineWidth: _r2
          },
          dataLabels: _o
        });
      }

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      o.addSeries(y, !1), o.addSeries({
        name: Intl.NumberFormat().format(f) + " DPS",
        color: "rgb(" + m[0] + "," + m[1] + "," + m[2] + ")"
      }, !1);
      var b = s.timestamp,
          x = b.split("-")[0],
          v = b.split("-")[1],
          k = b.split("-")[2].split(" ")[0],
          C = b.split(" ")[1].split(":")[0],
          A = b.split(":")[1],
          O = "Last updated ",
          L = new Date() - new Date(Date.UTC(x, v - 1, k, C, A)),
          S = Math.floor(L / 24 / 3600 / 1e3);
      S > 0 && (O += "".concat(S, "d "));
      var T = Math.floor(L / 3600 / 1e3) - 24 * S;
      O += "".concat(T, "h ago"), o.redraw(), function (t) {
        function e(e) {
          var a = (e = o.pointer.normalize(e)).chartX,
              l = e.chartY,
              r = o.options.chart.options3d.alpha,
              i = o.options.chart.options3d.beta,
              n = 5;

          function s(t) {
            t = o.pointer.normalize(t), o.update({
              chart: {
                options3d: {
                  alpha: r + (t.chartY - l) / n,
                  beta: i + (a - t.chartX) / n
                }
              }
            }, void 0, void 0, !1);
          }

          o.unbindDragMouse = t.addEvent(document, "mousemove", s), o.unbindDragTouch = t.addEvent(document, "touchmove", s), t.addEvent(document, "mouseup", o.unbindDragMouse), t.addEvent(document, "touchend", o.unbindDragTouch);
        }

        t.addEvent(o.container, "mousedown", e), t.addEvent(o.container, "touchstart", e);
      }(Highcharts);
    }(t, e, o);
    if ("talent_target_scaling" === l) return function (t, e, o) {
      r && console.log("update_talent_target_scaling_chart");
      var a = e.id,
          l = (t.chart_id, t.fight_style),
          i = t.wow_class,
          n = t.wow_spec,
          s = (t.chart_engine, u(t));
      document.getElementById("post_chart").hidden = !1, i = s.profile.character.class, n = s.profile.character.spec, l = s.simc_settings.fight_style;
      var d = w(t),
          c = !1;
      if ("highcharts" == t.chart_engine) try {
        c = Highcharts.chart(a, d);
      } catch (t) {
        return console.log("When trying to create a highcharts chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(t);
      } else if ("highcharts_old" == t.chart_engine) try {
        var _t4 = d;
        _t4.chart.renderTo = a, c = new Highcharts.Chart(_t4);
      } catch (t) {
        return console.log("When trying to create a highcharts_old chart the following error occurred. Did you include the necessary Highcharts scripts?"), void console.log(t);
      }
      o = void 0, o = c;

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = s.sorted_data_keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _e3 = _step.value;

          var _a3 = s.data[_e3],
              _l3 = Object.keys(_a3);

          var _r3 = -1;

          _r3 = t.talent_target_scaling_min_target_count > -1 ? t.talent_target_scaling_min_target_count : Math.min.apply(Math, _toConsumableArray(_l3.map(function (t) {
            return parseInt(t);
          })));

          var _i4 = -1;

          _i4 = t.talent_target_scaling_max_target_count > -1 ? t.talent_target_scaling_max_target_count : Math.max.apply(Math, _toConsumableArray(_l3.map(function (t) {
            return parseInt(t);
          })));
          var _n3 = [];

          for (var _t5 = _r3; _t5 <= _i4; _t5++) {
            _l3.indexOf(_t5.toString()) >= -1 ? _n3.push([_t5, _a3[_t5]]) : _n3.push([_t5, null]);
          }

          var _d3 = {
            name: _e3,
            data: _n3
          };
          o.addSeries(_d3, !1), o.update({
            xAxis: {
              min: _r3 - .5,
              max: _i4 + .5
            }
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      o.redraw();
    }(t, e, o);
    l = h.data_type;
    var g = h;
    var y,
        b,
        k = {};
    y = Object.keys(g).indexOf("sorted_data_keys") > -1 && ["windfury_totem", "power_infusion"].indexOf(l) > -1 && "absolute" === t.value_style ? g.sorted_data_keys_2.slice(0, i) : Object.keys(g).indexOf("sorted_data_keys") > -1 ? g.sorted_data_keys.slice(0, i) : Object.keys(g.data), b = ["races", "talents", "soulbinds", "tier_set", "windfury_totem", "power_infusion"].includes(l) ? 0 : ["legendaries", "soulbind_nodes", "covenants", "domination_shards"].includes(l) ? g.data.baseline : g.data.baseline[g.simulated_steps[g.simulated_steps.length - 1]];

    var _arr2 = Object.keys(g.data);

    for (var _i5 = 0; _i5 < _arr2.length; _i5++) {
      var _t12 = _arr2[_i5];
      "{" === _t12[0] && "}" === _t12[_t12.length - 1] && (k[_t12] = g.data[_t12]);
    }

    r && (console.log(y), console.log("Baseline dps: " + b), console.log("other baseline dps:"), console.log(k));
    var C = [];

    if (C = "soulbinds" === l ? void 0 : "tier_set" === l ? ["4p", "2p", "no tier"] : g.simulated_steps, r && console.log("simulated_steps: " + C), "trinkets" === l) {
      if (void 0 !== t.html_element.dataset.filterItemlevels) {
        var _e5 = t.html_element.dataset.filterItemlevels.split(";");

        C = C.filter(function (t) {
          return -1 === _e5.indexOf(t.toString());
        });
      }

      if (y = y.filter(function (t) {
        return C.some(function (e) {
          return void 0 !== g.data[t][e];
        });
      }), void 0 !== t.html_element.dataset.filterActivePassive) {
        var _e6 = t.html_element.dataset.filterActivePassive.split(";");

        var _o2 = [];
        _e6.map(function (t) {
          "active" === t ? _o2.push(!0) : "passive" === t && _o2.push(!1);
        }), y = y.filter(function (t) {
          return -1 === _o2.indexOf(g.data_active[t]);
        });
      }

      if (void 0 !== t.html_element.dataset.filterSources) {
        var _e7 = t.html_element.dataset.filterSources.split(";");

        y = y.filter(function (t) {
          return -1 === _e7.indexOf(g.data_sources[t]);
        });
      }

      var _e4 = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = y[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _t6 = _step2.value;

          var _o3 = void 0;

          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = C[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _e8 = _step3.value;
              (void 0 === _o3 && void 0 !== g.data[_t6][_e8] || void 0 !== g.data[_t6][_e8] && g.data[_t6][_e8] > _o3) && (_o3 = g.data[_t6][_e8]);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          _e4.push([_t6, _o3]);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      _e4.sort(function (t, e) {
        return e[1] - t[1];
      }), y = _e4.map(function (t) {
        return t[0];
      });
    }

    var A,
        O = g.subtitle;

    for ("power_infusion" === l && (O += "<br/>* Spec APL doesn't support external PI. Fallback for set PI timings was used to generate data."), o.setTitle({
      text: g.title
    }, {
      text: O
    }, !1); o.series[0];) {
      o.series[0].remove(!1);
    }

    if (A = ["talents"].indexOf(l) > -1 ? y.map(function (e) {
      var o = [];

      for (var _a4 = 0; _a4 < e.length; _a4++) {
        o.push(m(t, (_a4 + 1).toString() + e[_a4], g));
      }

      return o.join("");
    }) : ["tier_set", "talent_target-scaling"].indexOf(l) > -1 ? y.map(function (e) {
      return m(t, e, g);
    }) : y.map(function (e) {
      var o = e.indexOf("} ") > -1 ? e.slice(e.indexOf("} ") + 2, e.length) : e;
      return o = o.indexOf(" +") > -1 ? o.slice(0, o.indexOf(" +")) : o, m(t, o, g);
    }), "power_infusion" === l && (A = A.map(function (t) {
      return Object.keys(h).indexOf("profile_without_pi_support") > -1 && h.profile_without_pi_support.indexOf(t) > -1 ? t + "*" : t;
    })), r && console.log(A), "highcharts" == n ? o.update({
      xAxis: {
        categories: A
      }
    }, !1) : "highcharts_old" == n && o.xAxis[0].setCategories(A, !1), C) {
      var _e9 = {};

      for (var _o4 in g.data) {
        if (g.data.hasOwnProperty(_o4)) {
          var _a5 = g.data[_o4];
          _e9[_o4] = {};
          var _r4 = b;
          "conduits" === l && (_r4 = g.data.baseline[g.covenant_mapping[_o4]]);

          for (var _l4 = C.length - 1; _l4 >= 0; _l4--) {
            var _i6 = C[_l4];

            var _n4 = _a5.hasOwnProperty(t.covenant) ? _a5[t.covenant] : _a5;

            Number.isInteger(_n4) ? (_e9[_o4][_i6] = Math.max(_n4 - _r4, 0), _r4 = 0 === _e9[_o4][_i6] ? _r4 : _n4) : _n4.hasOwnProperty(_i6) ? (_e9[_o4][_i6] = Math.max(_n4[_i6] - _r4, 0), _r4 = 0 === _e9[_o4][_i6] ? _r4 : _n4[_i6]) : _e9[_o4][_i6] = 0;
          }
        }
      }

      r && (console.log("simulated_steps", C), console.log(_e9));
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = C[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var _a6 = _step4.value;
          var _l5 = [];

          for (var _o5 = 0; _o5 < y.length; _o5++) {
            var _r6 = y[_o5];

            var _i7 = p(t, _e9[_r6][_a6], b);

            _l5.push(_i7);
          }

          var _r5 = _a6;
          o.addSeries({
            data: _l5,
            name: _r5
          }, !1);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    } else if (["soulbind_nodes", "covenants"].includes(l)) {
      var L = [];

      for (var _e10 = 0; _e10 < y.length; _e10++) {
        var _o6 = y[_e10],
            _a7 = g.data[_o6] - b;

        L.push(p(t, _a7, b));
      }

      o.addSeries({
        data: L,
        name: "Data",
        showInLegend: !1
      }, !1);
    } else if (["legendaries"].includes(l)) {
      var _e11 = [],
          _a8 = "{" + g.profile.character.covenant + "}",
          _l6 = {};

      var _arr3 = Object.keys(k);

      for (var _i8 = 0; _i8 < _arr3.length; _i8++) {
        var _t7 = _arr3[_i8];
        _l6[_t7] = [];
      }

      _l6[_a8] = [];
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = y[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _o7 = _step5.value;
          var _r8 = b;

          if (_o7.indexOf("} ") > -1) {
            var _e12 = _o7.slice(0, _o7.indexOf("} ") + 1);

            _r8 = k[_e12], _l6[_e12].push(p(t, _r8, b));

            var _arr5 = Object.keys(_l6);

            for (var _i11 = 0; _i11 < _arr5.length; _i11++) {
              var _t8 = _arr5[_i11];
              _t8 !== _e12 && _l6[_t8].push(0);
            }
          } else {
            var _arr6 = Object.keys(_l6);

            for (var _i12 = 0; _i12 < _arr6.length; _i12++) {
              var _e13 = _arr6[_i12];
              _e13 !== _a8 ? _l6[_e13].push(0) : _l6[_e13].push(p(t, _r8, _r8));
            }
          }

          var _i10 = g.data[_o7] - _r8;

          _e11.push(p(t, _i10, _r8));
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      o.addSeries({
        data: _e11,
        name: "Legendary effect",
        showInLegend: !0,
        color: "#ff7d0a"
      }, !1);
      var _r7 = {
        night_fae: "Night Fae",
        necrolord: "Necrolord",
        venthyr: "Venthyr",
        kyrian: "Kyrian"
      };

      var _arr4 = Object.keys(_l6);

      for (var _i9 = 0; _i9 < _arr4.length; _i9++) {
        var _t9 = _arr4[_i9];
        o.addSeries({
          data: _l6[_t9],
          name: _r7[_t9.slice(1, _t9.length - 1)],
          showInLegend: !0,
          color: s[_r7[_t9.slice(1, _t9.length - 1)]].color
        }, !1);
      }
    } else if (["windfury_totem", "power_infusion"].includes(l)) {
      var _e14 = [],
          _a9 = {
        "Blood Death Knight": "#c41f3b",
        "Frost Death Knight": "#c41f3b",
        "Unholy Death Knight": "#c41f3b",
        "Havoc Demon Hunter": "#a330c9",
        "Vengeance Demon Hunter": "#a330c9",
        "Balance Druid": "#ff7d0a",
        "Feral Druid": "#ff7d0a",
        "Guardian Druid": "#ff7d0a",
        "Devastation Evoker": "#33937F",
        "Beast_Mastery Hunter": "#abd473",
        "Marksmanship Hunter": "#abd473",
        "Survival Hunter": "#abd473",
        "Arcane Mage": "#69ccf0",
        "Fire Mage": "#69ccf0",
        "Frost Mage": "#69ccf0",
        "Brewmaster Monk": "#00ff96",
        "Windwalker Monk": "#00ff96",
        "Protection Paladin": "#f58cba",
        "Retribution Paladin": "#f58cba",
        "Shadow Priest": "#ffffff",
        "Assassination Rogue": "#fff569",
        "Outlaw Rogue": "#fff569",
        "Subtlety Rogue": "#fff569",
        "Elemental Shaman": "#0070de",
        "Enhancement Shaman": "#0070de",
        "Affliction Warlock": "#9482c9",
        "Demonology Warlock": "#9482c9",
        "Destruction Warlock": "#9482c9",
        "Arms Warrior": "#c79c6e",
        "Fury Warrior": "#c79c6e",
        "Protection Warrior": "#c79c6e"
      };
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = y[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var _o8 = _step6.value;

          var _l7 = g.data["{" + _o8 + "}"],
              _r9 = g.data[_o8] - _l7;

          _e14.push({
            y: p(t, _r9, _l7),
            color: _a9[_o8]
          });
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      o.addSeries({
        data: _e14,
        name: (S = l, S.split("_").map(function (t) {
          return t[0].toUpperCase() + t.substring(1);
        }).join(" ")),
        showInLegend: !1
      }, !1);
    } else if (["domination_shards"].includes(l)) {
      var _arr7 = Object.keys(d);

      for (var _i13 = 0; _i13 < _arr7.length; _i13++) {
        var _e16 = _arr7[_i13];
        var _a11 = [];
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = y[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var _o10 = _step8.value;
            var _l9 = _o10,
                _r10 = b;

            if (_o10.indexOf(" +") > -1 && (_l9 = _o10.split(" +")[0], _r10 = g.data[_l9]), g.shard_type[_l9] === _e16) {
              var _e17 = g.data[_o10] - _r10;

              _a11.push(p(t, _e17, _r10));
            } else _a11.push(p(t, 0, _r10));
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }

        o.addSeries({
          data: _a11,
          name: _e16 + (y[0].indexOf(" +") > -1 ? " set" : ""),
          showInLegend: !0,
          color: d[_e16]
        }, !1);
      }

      if (y[0].indexOf(" +") > -1) {
        var _e15 = [];
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = y[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var _o9 = _step7.value;

            var _a10 = _o9.split(" +")[0],
                _l8 = g.data[_a10] - b;

            _e15.push(p(t, _l8, b));
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }

        o.addSeries({
          data: _e15,
          name: "shard",
          showInLegend: !0,
          color: "#ff7d0a"
        }, !1);
      }
    } else if (["soulbinds"].includes(l)) {
      var _iteratorNormalCompletion9 = true;
      var _didIteratorError9 = false;
      var _iteratorError9 = undefined;

      try {
        for (var _iterator9 = Object.keys(s).sort().reverse()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
          var _e18 = _step9.value;
          var _a12 = s[_e18].id;
          var _l10 = [];
          var _iteratorNormalCompletion10 = true;
          var _didIteratorError10 = false;
          var _iteratorError10 = undefined;

          try {
            for (var _iterator10 = y[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
              var _t10 = _step10.value;
              var _e19 = 0;
              g.covenant_mapping[_t10][0] === _a12 && (_e19 = Math.max.apply(Math, _toConsumableArray(Object.values(g.data[_t10])))), _l10.push(_e19);
            }
          } catch (err) {
            _didIteratorError10 = true;
            _iteratorError10 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
                _iterator10.return();
              }
            } finally {
              if (_didIteratorError10) {
                throw _iteratorError10;
              }
            }
          }

          o.addSeries({
            data: _l10,
            name: v(_e18, g, t),
            showInLegend: !0,
            color: s[_e18].color
          }, !1);
        }
      } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
            _iterator9.return();
          }
        } finally {
          if (_didIteratorError9) {
            throw _iteratorError9;
          }
        }
      }

      o.yAxis[0].options.title.text = c, o.yAxis[1].options.title.text = c;
    } else {
      L = [];

      for (var _t11 = 0; _t11 < y.length; _t11++) {
        var _e20 = y[_t11],
            _o11 = g.data[_e20];
        L.push(_o11);
      }

      o.addSeries({
        data: L,
        name: "DPS",
        showInLegend: !1
      }, !1);
    }

    var S;
    ["trinkets"].indexOf(l) > -1 ? o.legend.title.attr({
      text: "Itemlevel"
    }) : "races" !== l && "domination_shards" !== l || o.legend.title.attr({
      text: ""
    }), "highcharts_old" == n && o.reflow(), e.style.height = 200 + 30 * y.length + "px", "highcharts" == n && o.setSize(void 0, e.style.height), "wowdb" == t.tooltip_engine ? setTimeout(function () {
      !function (t) {
        r && console.log("readd_wowdb_tooltips");

        try {
          CurseTips["wowdb-tooltip"].watchElements(document.getElementById(t).getElementsByTagName("a"));
        } catch (t) {
          console.log("Setting wowdb (CurseTips) tooltips failed. Error: ", t);
        }
      }(e.id), o.redraw();
    }, 1) : "wowhead" == t.tooltip_engine ? setTimeout(function () {
      window.$WowheadPower.refreshLinks(), o.redraw();
    }, 1) : setTimeout(function () {
      o.redraw();
    }, 1);
  }

  function p(t, e, o) {
    return "absolute" === t.value_style ? e : "relative" === t.value_style ? Math.round(1e4 * e / o) / 100 : void console.error("Unknown value-style", t.value_style);
  }

  function _(t, e, o) {
    r && console.log("create_color");
    var a = [0, 255, 255],
        l = [255, 255, 0],
        i = [255, 0, 0],
        n = 0,
        s = 0;

    for (var _t13 = 0; _t13 < 3; _t13++) {
      n += Math.abs(i[_t13] - l[_t13]), s += Math.abs(l[_t13] - a[_t13]);
    }

    var d = e + (o - e) * (s / (s + n));

    if (t >= d) {
      var _e21 = (t - d) / (o - d);

      return [Math.floor(i[0] * _e21 + l[0] * (1 - _e21)), Math.floor(i[1] * _e21 + l[1] * (1 - _e21)), Math.floor(i[2] * _e21 + l[2] * (1 - _e21))];
    }

    {
      var _o12 = (t - e) / (d - e);

      return [Math.floor(l[0] * _o12 + a[0] * (1 - _o12)), Math.floor(l[1] * _o12 + a[1] * (1 - _o12)), Math.floor(l[2] * _o12 + a[2] * (1 - _o12))];
    }
  }

  function m(t, e, o) {
    if (r && (console.log("get_category_name"), console.log(e)), "wowhead" != t.tooltip_engine && "wowdb" != t.tooltip_engine) return v(e, o, t);
    if (["races", "windfury_totem", "power_infusion"].includes(t.data_type)) return v(e, o, t);

    if (["tier_set", "talent_target_scaling"].includes(t.data_type)) {
      var _a13 = '<a href="#' + ("override-profile-" + o.sorted_data_keys.indexOf(e)) + '">';

      return _a13 += v(e, o, t), _a13 += "</a>", _a13;
    }

    if (["soulbinds"].includes(t.data_type)) {
      var _a14 = '<a href="#' + e + '">';

      return _a14 += v(e, o, t), _a14 += "</a>", _a14;
    }

    if ("wowhead" == t.tooltip_engine) {
      var _a15 = document.createElement("a");

      if (_a15.href = "https://" + ("en" === t.language ? "www" : t.language) + ".wowhead.com/", o.hasOwnProperty("item_ids") && o.item_ids.hasOwnProperty(e)) {
        if (_a15.href += "item=" + o.item_ids[e] + "/" + b(e), void 0 !== o.simulated_steps) {
          var _t14 = o.simulated_steps[o.simulated_steps.length - 1];
          "string" == typeof _t14 && _t14.indexOf("_") > -1 && (_t14 = _t14.split("_")[1]), _a15.href += "&ilvl=" + _t14;
        }
      } else if (o.hasOwnProperty("spell_ids") && o.spell_ids.hasOwnProperty(e)) _a15.href += "spell=" + o.spell_ids[e] + "/" + b(e);else if ("talents" === t.data_type) {
        if ("0" === e[1]) return e[1];
        _a15.href += "spell=" + o.talent_data[e[0]][e[1]].spell_id;
      }

      return "talents" === t.data_type ? _a15.appendChild(document.createTextNode(e[1])) : _a15.appendChild(document.createTextNode(v(e, o, t))), _a15.outerHTML;
    }

    if ("wowdb" == t.tooltip_engine) {
      var _a16,
          _l11 = document.createElement("a");

      _l11.href = "http://www.wowdb.com/";

      try {
        _l11.href += "items/" + o.item_ids[e];
      } catch (t) {
        r && (console.log(t), console.log("We're probably looking at a spell."));
      }

      if (_l11.href.indexOf("items") > -1) {
        var _t15 = o.simulated_steps[o.simulated_steps.length - 1];
        "string" == typeof _t15 && _t15.indexOf("_") > -1 && (_t15 = _t15.split("_")[1]), _l11.href += "?itemLevel=" + _t15;
      }

      try {
        _l11.href += "spells/" + o.spell_ids[e];
      } catch (t) {
        r && (console.log(t), console.log("We're probably looking at an item."));
      }

      if ("talents" === t.data_type) {
        if ("0" === e[1]) return e[1];
        _l11.href += "spells/" + o.talent_data[e[0]][e[1]].spell_id;
      }

      return _l11.dataset.tooltipHref = _l11.href, _a16 = "talents" === t.data_type ? e[1] : v(e, o, t), _l11.appendChild(document.createTextNode(_a16)), _l11.outerHTML;
    }
  }

  function y(t) {
    t.setTitle({
      text: "Wrong chart setup"
    }, {
      text: "Missing 'data-chart-id', 'data-wow-class' or 'data-wow-spec'. See <a href=\"https://github.com/Bloodmallet/bloodmallet_web_frontend/wiki/How-to-import-charts\">wiki</a>"
    });
  }

  function b(t) {
    return t.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }

  function w(i) {
    if (r && console.log("update_chart_style"), "highcharts" == i.chart_engine || "highcharts_old" == i.chart_engine) {
      var _r11 = "https://bloodmallet.com/";
      if (void 0 !== i.chart_id ? _r11 += "chart/" + i.chart_id : void 0 !== i.wow_class && void 0 !== i.wow_spec && void 0 !== i.data_type && (_r11 += "chart/" + i.wow_class + "/" + i.wow_spec + "/" + i.data_type), "secondary_distributions" === i.data_type) return {
        accessibility: {
          enabled: !1
        },
        credits: {
          enabled: !1
        },
        chart: {
          renderTo: "scatter_plot_chart",
          type: "scatter3d",
          backgroundColor: null,
          className: "mx-auto",
          animation: !1,
          height: 800,
          width: 800,
          options3d: {
            enabled: !0,
            alpha: 10,
            beta: 30,
            depth: 800,
            fitToPlot: !1
          }
        },
        legend: {
          enabled: !0,
          backgroundColor: i.background_color,
          borderColor: i.font_color,
          borderWidth: 1,
          align: "right",
          verticalAlign: "middle",
          layout: "vertical",
          itemStyle: {
            color: i.font_color
          },
          itemHoverStyle: {
            color: i.font_color
          }
        },
        plotOptions: {
          series: {
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: i.font_color,
                fontSize: i.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color,
            fontSize: i.font_size
          }
        },
        tooltip: {
          headerFormat: "",
          pointFormatter: function pointFormatter() {
            return '<table class="">                <thead>                  <tr>                    <th scope="col"></th>                    <th scope="col">Absolute</th>                    <th scope="col">Relative</th>                  </tr>                </thead>                <tbody>                  <tr>                    <th scope="row">DPS</th>                    <td>' + Intl.NumberFormat().format(this.dps) + "</td>                    <td>" + Math.round(this.dps / this.dps_max * 1e4) / 100 + '%</td>                  </tr>                  <tr>                    <th scope="row">Crit</th>                    <td>' + Intl.NumberFormat().format(this.stat_crit) + "</td>                    <td>" + this.name.split("_")[0] + '%</td>                  </tr>                  <tr>                    <th scope="row">Haste</th>                    <td>' + Intl.NumberFormat().format(this.stat_haste) + "</td>                    <td>" + this.name.split("_")[1] + '%</td>                  </tr>                  <tr>                    <th scope="row">Mastery</th>                    <td>' + Intl.NumberFormat().format(this.stat_mastery) + "</td>                    <td>" + this.name.split("_")[2] + '%</td>                  </tr>                  <tr>                    <th scope="row">Versatility</th>                    <td>' + Intl.NumberFormat().format(this.stat_vers) + "</td>                    <td>" + this.name.split("_")[3] + "%</td>                  </tr>                </tbody>              </table>";
          },
          useHTML: !0,
          borderColor: i.background_color
        },
        xAxis: {
          min: 0,
          max: 80,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        yAxis: {
          min: -10,
          max: 70,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        zAxis: {
          min: 10,
          max: 90,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          reversed: !0,
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        }
      };
      if ("talent_target_scaling" === i.data_type) return {
        accessibility: {
          enabled: !1
        },
        credits: {
          href: _r11,
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        chart: {
          backgroundColor: null,
          animation: !1
        },
        colors: t,
        legend: {
          enabled: !0,
          backgroundColor: i.background_color,
          borderColor: i.font_color,
          borderWidth: 1,
          align: "center",
          verticalAlign: "top",
          layout: "horizontal",
          itemStyle: {
            color: i.font_color
          },
          itemHoverStyle: {
            color: i.font_color
          }
        },
        plotOptions: {
          series: {
            connectNulls: !0,
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: i.font_color,
                fontSize: i.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color,
            fontSize: i.font_size
          }
        },
        xAxis: {
          tickInterval: 1,
          title: {
            text: "Target count",
            style: {
              color: o
            }
          },
          labels: {
            enabled: !0,
            style: {
              color: o
            }
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        yAxis: {
          title: {
            text: "DPS",
            style: {
              color: o
            }
          },
          labels: {
            enabled: !0,
            style: {
              color: o
            }
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        }
      };
      var _n5 = i.background_color,
          _s2 = i.axis_color,
          _d4 = i.font_color,
          _g2 = {
        accessibility: {
          enabled: !1
        },
        chart: {
          type: "bar",
          backgroundColor: e,
          style: {
            fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"'
          }
        },
        colors: t,
        credits: {
          href: _r11,
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        legend: {
          align: "right",
          backgroundColor: e,
          borderColor: a,
          borderWidth: 1,
          floating: !1,
          itemMarginBottom: 3,
          itemMarginTop: 0,
          layout: "vertical",
          reversed: !0,
          shadow: !1,
          verticalAlign: "middle",
          x: 0,
          y: 0,
          itemStyle: {
            color: o
          },
          itemHoverStyle: {
            color: o
          },
          title: {
            text: " ",
            style: {
              color: o
            }
          },
          symbolRadius: 0
        },
        plotOptions: {
          series: {
            stacking: "normal",
            borderColor: e,
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            },
            style: {
              textOutline: !1,
              fontSize: l
            },
            point: {
              events: {
                click: function click(t) {
                  var e = this.series.yAxis;
                  e.removePlotLine("helperLine"), e.addPlotLine({
                    value: this.stackY,
                    color: i.font_color,
                    width: 2,
                    id: "helperLine",
                    zIndex: 5,
                    label: {
                      text: this.series.name + " " + this.category,
                      style: {
                        color: i.font_color,
                        fontSize: l
                      },
                      align: "left",
                      verticalAlign: "bottom",
                      rotation: 0,
                      y: -5
                    }
                  });
                }
              }
            }
          }
        },
        series: [],
        title: {
          text: "Loading data...",
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        subtitle: {
          text: '...from <a href="https://bloodmallet.com">bloodmallet</a>',
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        tooltip: {
          headerFormat: "<b>{point.x}</b>",
          shared: !0,
          backgroundColor: e,
          borderColor: a,
          style: {
            color: o,
            fontSize: l
          },
          useHTML: !0
        },
        xAxis: {
          categories: [],
          labels: {
            useHTML: !0,
            style: {
              color: o,
              fontSize: l
            }
          },
          gridLineWidth: 0,
          gridLineColor: a,
          lineColor: a,
          tickColor: a
        },
        yAxis: [{
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === i.value_style ? c : h,
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }, {
          linkedTo: 0,
          opposite: !0,
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === i.value_style ? c : h,
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }]
      };
      return _g2.chart.backgroundColor = _n5, _g2.legend.backgroundColor = _n5, _g2.legend.borderColor = _s2, _g2.legend.itemStyle.color = _d4, _g2.legend.itemHoverStyle.color = _d4, _g2.title.style.color = _d4, _g2.subtitle.style.color = _d4, _g2.tooltip.formatter = function () {
        var t = document.createElement("div");
        t.style.margin = "-4px -7px -7px -7px", t.style.padding = "3px 3px 6px 3px", t.style.backgroundColor = "transparent" !== _n5 ? _n5 : e, "highcharts_old" === i.chart_engine && (t.style.margin = "-7px");
        var o = document.createElement("div");
        t.appendChild(o), o.style.marginLeft = "9px", o.style.marginRight = "9px", o.style.marginBottom = "6px", o.style.fontWeight = "700", o.innerHTML = this.x;
        var a = 0;

        for (var l = this.points.length - 1; l >= 0; l--) {
          a += this.points[l].y;

          var _e22 = void 0,
              _o13 = !1,
              _r12 = 0;

          var _iteratorNormalCompletion11 = true;
          var _didIteratorError11 = false;
          var _iteratorError11 = undefined;

          try {
            for (var _iterator11 = this.points[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
              var _t17 = _step11.value;
              0 !== _t17.y && 0 !== _r12 && _r12 !== _t17.y ? _o13 = !0 : 0 !== _t17.y && 0 === _r12 && (_r12 = _t17.y);
            }
          } catch (err) {
            _didIteratorError11 = true;
            _iteratorError11 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion11 && _iterator11.return != null) {
                _iterator11.return();
              }
            } finally {
              if (_didIteratorError11) {
                throw _iteratorError11;
              }
            }
          }

          if ("talents" !== i.data_type) {
            var _t16 = new DOMParser().parseFromString(this.x, "text/html").body.firstChild.innerText;

            if (!i.data.data.hasOwnProperty(_t16)) {
              var _e23 = void 0;

              var _arr8 = Object.keys(i.data.data);

              for (var _i14 = 0; _i14 < _arr8.length; _i14++) {
                var _o15 = _arr8[_i14];
                _o15.slice(_o15.indexOf("} ") + 2) === _t16 && (_e23 = _o15);
              }

              void 0 !== _e23 && (_t16 = _e23);
            }

            void 0 === _t16 && (_t16 = this.x);

            var _o14 = C(_t16, i.data, i);

            i.data.data.hasOwnProperty(_o14) && (_e22 = i.data.data[_o14].hasOwnProperty(this.points[l].series.name));
          }

          if (0 !== this.points[l].y || _e22) {
            var _e24 = document.createElement("div");

            t.appendChild(_e24);

            var _o16 = document.createElement("span");

            _e24.appendChild(_o16), _o16.style.marginLeft = "9px", _o16.style.borderLeft = "9px solid " + this.points[l].series.color, _o16.style.paddingLeft = "4px", Number.isInteger(this.points[l].series.name) && _o16.appendChild(document.createTextNode(this.points[l].series.name + ":"));
            var _r13 = "";
            ["soulbinds", "races", "talents"].includes(i.data_type) ? _r13 = "" : "relative" === i.value_style && (_r13 = "%"), _e24.appendChild(document.createTextNode("Â Â " + Intl.NumberFormat().format(a) + _r13));
          }
        }

        return t.outerHTML;
      }, _g2.tooltip.backgroundColor = "transparent" !== _n5 ? _n5 : e, _g2.tooltip.borderColor = _s2, _g2.tooltip.style.color = _d4, _g2.xAxis.labels.style.color = _d4, _g2.xAxis.gridLineColor = _s2, _g2.xAxis.lineColor = _s2, _g2.xAxis.tickColor = _s2, _g2.yAxis[0].labels.style.color = _s2, _g2.yAxis[0].stackLabels.style.color = _d4, _g2.yAxis[0].gridLineColor = _s2, _g2.yAxis[0].lineColor = _s2, _g2.yAxis[0].tickColor = _s2, _g2.yAxis[0].title.style.color = _s2, _g2.yAxis[1].labels.style.color = _s2, _g2.yAxis[1].stackLabels.style.color = _d4, _g2.yAxis[1].gridLineColor = _s2, _g2.yAxis[1].lineColor = _s2, _g2.yAxis[1].tickColor = _s2, _g2.yAxis[1].title.style.color = _s2, _g2.credits.style.color = _d4, _g2;
    }
  }

  function x(t, e) {}

  function v(t, e, o) {
    r && console.log("get_translated_name " + t);
    var a = "";

    try {
      a = e.translations[t][n[o.language]];
    } catch (e) {
      r && (console.log("No translation for ".concat(t, " found.")), console.log(e)), a = t;
    }

    return r && console.log("Translated name: " + a), void 0 === a && (a = t), a;
  }

  function k(t, e) {
    return Object.keys(t).find(function (o) {
      return t[o] === e;
    });
  }

  function C(t, e, o) {
    r && console.log("get_base_name_from_translation " + t);

    var _arr9 = Object.keys(e.translations);

    for (var _i15 = 0; _i15 < _arr9.length; _i15++) {
      var _a17 = _arr9[_i15];
      if (n[o.language] === k(e.translations[_a17], t)) return r && console.log("Base name: " + _a17), _a17;
    }

    return t;
  }

  this.init_charts = new function () {
    r && console.log("init_charts");
    var t = document.querySelectorAll("div.bloodmallet_chart"),
        l = [];

    for (var _e25 = 0; _e25 < t.length; _e25++) {
      var _o17 = t[_e25];
      if (l.indexOf(_o17.id) > -1) return void console.error("Multiple Elements use the same ID ('" + _o17.id + "'). Aborting bloodmallet_chart_import.js.");
      l.push(_o17.id);
    }

    for (var _l12 = 0; _l12 < t.length; _l12++) {
      var _i16 = void 0;

      try {
        _i16 = t[_l12].id;
      } catch (t) {
        return void console.error("Each .bloodmallet_chart needs an ID. Aborting bloodmallet_chart_import.js.");
      }

      var _n6 = document.getElementById(t[_l12].id);

      if (_n6) {
        var _t18 = {
          chart_id: void 0,
          wow_class: void 0,
          wow_spec: void 0,
          data_type: "trinkets",
          fight_style: "castingpatchwerk",
          covenant: "Kyrian",
          axis_color: a,
          background_color: e,
          font_color: o,
          limit: 7,
          chart_engine: "highcharts",
          tooltip_engine: "wowhead",
          language: "en",
          value_style: "absolute",
          talent_target_scaling_min_target_count: -1,
          talent_target_scaling_max_target_count: -1,
          html_element: _n6
        };

        try {
          void 0 !== bloodmallet.style.axis_color && (_t18.axis_color = bloodmallet.style.axis_color), void 0 !== bloodmallet.style.background_color && (_t18.background_color = bloodmallet.style.background_color), void 0 !== bloodmallet.style.font_color && (_t18.font_color = bloodmallet.style.font_color), void 0 !== bloodmallet.settings.entries && (_t18.limit = bloodmallet.settings.entries), void 0 !== bloodmallet.settings.chart_engine && (_t18.chart_engine = bloodmallet.settings.chart_engine), void 0 !== bloodmallet.settings.tooltip_engine && (_t18.tooltip_engine = bloodmallet.settings.tooltip_engine), void 0 !== bloodmallet.settings.language && (_t18.language = bloodmallet.settings.language), void 0 !== bloodmallet.settings.value_style && (_t18.value_style = bloodmallet.settings.value_style);
        } catch (t) {
          r && console.log("Applying page wide settings failed or no page wide settings were found.");
        }

        _n6.getAttribute("data-entries") && (_t18.limit = _n6.getAttribute("data-entries")), _n6.getAttribute("data-fight-style") && (_t18.fight_style = _n6.getAttribute("data-fight-style")), _n6.getAttribute("data-type") && (_t18.data_type = _n6.getAttribute("data-type")), _n6.getAttribute("data-covenant") && (_t18.covenant = _n6.getAttribute("data-covenant")), _n6.getAttribute("data-background-color") && (_t18.background_color = _n6.getAttribute("data-background-color")), _n6.getAttribute("data-font-color") && (_t18.font_color = _n6.getAttribute("data-font-color")), _n6.getAttribute("data-axis-color") && (_t18.axis_color = _n6.getAttribute("data-axis-color")), _n6.getAttribute("data-tooltip-engine") && (_t18.tooltip_engine = _n6.getAttribute("data-tooltip-engine")), _n6.getAttribute("data-chart-engine") && (_t18.chart_engine = _n6.getAttribute("data-chart-engine")), _n6.getAttribute("data-language") && (_t18.language = _n6.getAttribute("data-language")), _n6.getAttribute("data-value-style") && (_t18.value_style = _n6.getAttribute("data-value-style")), _n6.getAttribute("data-talent-target-scaling-min-target-count") && (_t18.talent_target_scaling_min_target_count = parseInt(_n6.getAttribute("data-talent-target-scaling-min-target-count"))), _n6.getAttribute("data-talent-target-scaling-max-target-count") && (_t18.talent_target_scaling_max_target_count = parseInt(_n6.getAttribute("data-talent-target-scaling-max-target-count")));

        var _l13 = !0;

        _n6.getAttribute("data-chart-id") ? _t18.chart_id = _n6.getAttribute("data-chart-id") : (_n6.getAttribute("data-wow-class") || (console.error("Required 'data-chart-id' or 'data-wow-class' attribute wasn't found in " + _i16 + "."), _l13 = !1), _t18.wow_class = _n6.getAttribute("data-wow-class"), _n6.getAttribute("data-wow-spec") || (console.error("Required 'data-chart-id' or 'data-wow-spec' attribute wasn't found in " + _i16 + "."), _l13 = !1), _t18.wow_spec = _n6.getAttribute("data-wow-spec"));

        var _s3 = w(_t18),
            _d5 = !1;

        if ("highcharts" == _t18.chart_engine) try {
          _d5 = Highcharts.chart(_i16, _s3);
        } catch (t) {
          return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
        } else if ("highcharts_old" == _t18.chart_engine) try {
          var _t19 = _s3;
          _t19.chart.renderTo = _i16, _d5 = new Highcharts.Chart(_t19);
        } catch (t) {
          return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
        }
        _l13 ? g(_t18) : y(_d5), setTimeout(f, 1, _t18, _n6, _d5, 0);
      }
    }
  }();
}

document.addEventListener("DOMContentLoaded", function () {
  bloodmallet_chart_import();
});