"use strict";

function bloodmallet_chart_import() {
  var t = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
      e = "#343a40",
      o = "#f8f9fa",
      a = "#828282",
      l = "1.1rem",
      r = !1,
      i = "https://dev.bloodmallet.com/chart/get/";
  var n = {};

  function s(t) {
    r && console.log("load_data");
    var e = t.chart_id,
        o = t.data_type,
        a = t.fight_style,
        l = t.wow_class,
        s = t.wow_spec;

    try {
      if (n[o][a][l][s]) return;
    } catch (t) {
      r && console.log("Data needs to be loaded.");
    }

    try {
      if (n[e]) return;
    } catch (t) {
      r && console.log("Data needs to be loaded.");
    }

    var d = o;
    d.indexOf("azerite") > -1 && (d = "azerite_traits");
    var c = a;
    c += "/" + l, c += "/" + s;
    var h = "";
    h = e ? i + e : i + d + "/" + c;
    var g = new XMLHttpRequest();
    r && console.log("Fetching data from: " + h), g.open("GET", h, !0), g.onload = function (t) {
      if (4 === g.readyState) if (200 === g.status) {
        var _t = JSON.parse(g.responseText);

        e ? n["c" + e] = _t : (n[o] || (n[o] = {}), n[o][a] || (n[o][a] = {}), n[o][a][l] || (n[o][a][l] = {}), n[o][a][l][s] = _t), r && (console.log(_t), console.log("Load and save finished."));
      } else console.error(g.statusText);
    }, g.onerror = function (t) {
      console.error("Fetching data from bloodmallet.com encountered an error, ", t);
    }, g.send(null);
  }

  function d(t, e, o, a) {
    r && console.log("update_chart");
    var l = t.chart_id,
        i = t.data_type,
        s = t.fight_style,
        p = t.wow_class,
        x = t.wow_spec,
        C = t.limit,
        v = t.chart_engine,
        k = !1;

    if (l) {
      if (void 0 === n["c" + l]) return void (a < 30 && setTimeout(d, 200, t, e, o, a + 1));
    } else try {
      k = n[i][s][p][x];
    } catch (l) {
      return void (a < 30 && setTimeout(d, 200, t, e, o, a + 1));
    }

    if (!0 === (k = void 0 !== l ? n["c" + l] : n[i][s][p][x]).error) return function (t, e) {
      var o = t;
      o.innerHTML = "";
      var a = document.createElement("p");
      a.innerText = "An error occured during simulation.", o.appendChild(a);
      var l = document.createElement("ul"),
          r = document.createElement("li");
      r.textContent = "Title: " + (e.title ? e.title : "~"), l.appendChild(r);
      var i = document.createElement("li");
      i.textContent = "Spec: " + e.wow_spec + " " + e.wow_class, l.appendChild(i);
      var n = document.createElement("li");
      n.textContent = "Type: " + e.simulation_type, l.appendChild(n);
      var s = document.createElement("li");
      s.textContent = "Fight style: " + e.fight_style, l.appendChild(s);
      var d = document.createElement("li");
      d.textContent = "ID: " + e.id, l.appendChild(d);
      var c = document.createElement("li");
      c.textContent = "Custom profile:", l.appendChild(c), c.appendChild(document.createElement("br"));
      var h = document.createElement("textarea");
      h.readOnly = !0, h.value = e.custom_profile, h.placeholder = "No custom profile", h.style.width = "100%", c.appendChild(h);
      var g = document.createElement("li");
      g.textContent = "Log:", l.appendChild(g), g.appendChild(document.createElement("br"));
      var u = document.createElement("textarea");
      u.readOnly = !0, u.value = e.log, u.placeholder = "No log available", u.style.width = "100%", g.appendChild(u), o.appendChild(l);
    }(e, k);
    if (p = k.simc_settings.class, x = k.simc_settings.spec, s = k.simc_settings.fight_style, t.data_type = i = k.data_type, "secondary_distributions" === i) return function (t, e, o) {
      r && console.log("update_secondary_distribution_chart");
      var a = e.id,
          l = t.chart_id,
          i = t.fight_style,
          s = t.wow_class,
          d = t.wow_spec,
          h = (t.chart_engine, !1);
      h = n["c" + l], s = h.simc_settings.class, d = h.simc_settings.spec, i = h.simc_settings.fight_style;
      var u = g(t),
          p = !1;
      if ("highcharts" == t.chart_engine) try {
        p = Highcharts.chart(a, u);
      } catch (t) {
        return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
      } else if ("highcharts_old" == t.chart_engine) try {
        var _t2 = u;
        _t2.chart.renderTo = a, p = new Highcharts.Chart(_t2);
      } catch (t) {
        return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
      }
      o = void 0, o = p;
      var m = void 0;
      m = Object.keys(h.data)[0];
      var _ = h.data[m][h.sorted_data_keys[m][0]],
          f = h.data[m][h.sorted_data_keys[m][h.sorted_data_keys[m].length - 1]],
          y = c(100, 0, 100),
          b = c(0, 0, 100),
          w = {
        name: Intl.NumberFormat().format(_) + " DPS",
        color: "rgb(" + y[0] + "," + y[1] + "," + y[2] + ")",
        data: []
      };

      var _arr = Object.keys(h.data[m]);

      for (var _i = 0; _i < _arr.length; _i++) {
        var _e = _arr[_i];

        var _o = h.data[m][_e],
            _a = c(_o, f, _),
            _l = 1,
            _r = "#232227",
            _i2 = 5;

        _ === _o && (_l = 3, _i2 = 8, _r = t.font_color);

        var _n = void 0;

        if (_e.indexOf("70") > -1) switch (_n = {
          enabled: !0,
          allowOverlap: !0
        }, _e.indexOf("70")) {
          case 0:
            _n.format = "Crit", _n.verticalAlign = "top";
            break;

          case 3:
            _n.format = "Haste";
            break;

          case 6:
            _n.format = "Mastery", _n.verticalAlign = "top";
            break;

          case 9:
            _n.format = "Versatility", _n.verticalAlign = "top";
        }
        var _s = h.secondary_sum;

        var _d = parseInt(_e.split("_")[0]),
            _g = parseInt(_e.split("_")[1]),
            _u = parseInt(_e.split("_")[2]),
            _p = parseInt(_e.split("_")[3]);

        w.data.push({
          x: Math.sqrt(3) / 2 * (_d + 1 / 3 * _g),
          y: Math.sqrt(2 / 3) * _g,
          z: _u + .5 * _d + .5 * _g,
          name: _e,
          color: "rgb(" + _a[0] + "," + _a[1] + "," + _a[2] + ")",
          dps: _o,
          dps_max: _,
          dps_min: f,
          stat_crit: _d * _s / 100,
          stat_haste: _g * _s / 100,
          stat_mastery: _u * _s / 100,
          stat_vers: _p * _s / 100,
          stat_sum: _s,
          marker: {
            radius: _i2,
            lineColor: _r,
            lineWidth: _l
          },
          dataLabels: _n
        });
      }

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      o.addSeries(w, !1), o.addSeries({
        name: Intl.NumberFormat().format(f) + " DPS",
        color: "rgb(" + b[0] + "," + b[1] + "," + b[2] + ")"
      }, !1);
      var x = h.timestamp,
          C = x.split("-")[0],
          v = x.split("-")[1],
          k = x.split("-")[2].split(" ")[0],
          T = x.split(" ")[1].split(":")[0],
          A = x.split(":")[1],
          z = "Last updated ",
          L = new Date() - new Date(Date.UTC(C, v - 1, k, T, A)),
          E = Math.floor(L / 24 / 3600 / 1e3);
      E > 0 && (z += "".concat(E, "d "));
      var M = Math.floor(L / 3600 / 1e3) - 24 * E;
      z += "".concat(M, "h ago"), o.redraw(), function (t) {
        function e(e) {
          var a = (e = o.pointer.normalize(e)).chartX,
              l = e.chartY,
              r = o.options.chart.options3d.alpha,
              i = o.options.chart.options3d.beta,
              n = 5;

          function s(t) {
            t = o.pointer.normalize(t), o.update({
              chart: {
                options3d: {
                  alpha: r + (t.chartY - l) / n,
                  beta: i + (a - t.chartX) / n
                }
              }
            }, void 0, void 0, !1);
          }

          o.unbindDragMouse = t.addEvent(document, "mousemove", s), o.unbindDragTouch = t.addEvent(document, "touchmove", s), t.addEvent(document, "mouseup", o.unbindDragMouse), t.addEvent(document, "touchend", o.unbindDragTouch);
        }

        t.addEvent(o.container, "mousedown", e), t.addEvent(o.container, "touchstart", e);
      }(Highcharts);
    }(t, e, o);
    "azerite_traits" === k.data_type ? -1 === i.indexOf("azerite_items") && (i = "azerite_traits_stacking") : i = k.data_type;
    var T = k;
    var A, z;
    if (i.indexOf("azerite_traits") > -1) {
      if ("azerite_traits_stacking" === i) "all" === t.azerite_tier ? A = T.sorted_data_keys_2.slice(0, C) : "1" === t.azerite_tier || "3" === t.azerite_tier ? A = T.sorted_azerite_tier_3_trait_stacking.slice(0, C) : "2" === t.azerite_tier && (A = T.sorted_azerite_tier_2_trait_stacking.slice(0, C)), z = T.data.baseline[T.simulated_steps[0]];else {
        if ("azerite_traits_itemlevel" !== i) return void console.log("Chart found, but unknown data-type detected.");
        "all" === t.azerite_tier ? A = T.sorted_data_keys.slice(0, C) : "1" === t.azerite_tier || "3" === t.azerite_tier ? A = T.sorted_azerite_tier_3_itemlevel.slice(0, C) : "2" === t.azerite_tier && (A = T.sorted_azerite_tier_2_itemlevel.slice(0, C)), z = T.data.baseline[T.simulated_steps[T.simulated_steps.length - 1]];
      }
    } else A = T.sorted_data_keys.slice(0, C), z = ["races", "talents"].includes(i) ? 0 : ["legendaries", "soul_binds"].includes(i) ? T.data.baseline : T.data.baseline[T.simulated_steps[T.simulated_steps.length - 1]];

    for (r && (console.log(A), console.log("Baseline dps: " + z)), o.setTitle({
      text: T.title
    }, {
      text: T.subtitle
    }, !1); o.series[0];) {
      o.series[0].remove(!1);
    }

    var L = A.map(function (e) {
      return function (t, e, o) {
        r && (console.log("get_category_name"), console.log(e));
        var a = {
          cn: "cn_CN",
          en: "en_US",
          de: "de_DE",
          es: "es_ES",
          fr: "fr_FR",
          it: "it_IT",
          ko: "ko_KR",
          pt: "pt_BR",
          ru: "ru_RU"
        };
        if ("wowhead" != t.tooltip_engine && "wowdb" != t.tooltip_engine) try {
          return o.translations[e][a[t.language]];
        } catch (l) {
          return o.languages[e][a[t.language]];
        }
        if ("races" === t.data_type) try {
          return o.translations[e][a[t.language]];
        } catch (l) {
          return o.languages[e][a[t.language]];
        }

        if ("wowhead" == t.tooltip_engine) {
          var _l2 = document.createElement("a");

          if (_l2.href = "https://" + ("en" === t.language ? "www" : t.language) + ".wowhead.com/", o.hasOwnProperty("item_ids") && o.item_ids.hasOwnProperty(e)) {
            if (_l2.href += "item=" + o.item_ids[e] + "/" + h(e), o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
              _l2.href += "?azerite-powers=" + o.class_id;

              for (var _t4 = 0; _t4 < o.used_azerite_traits_per_item[e].length; _t4++) {
                var _a2 = o.used_azerite_traits_per_item[e][_t4];
                _l2.href += ":" + _a2.id;
              }
            }

            var _t3 = o.simulated_steps[o.simulated_steps.length - 1];
            "string" == typeof _t3 && _t3.indexOf("_") > -1 && (_t3 = _t3.split("_")[1]), _l2.href += "&ilvl=" + _t3;
          } else o.hasOwnProperty("spell_ids") && o.spell_ids.hasOwnProperty(e) && (_l2.href += "spell=" + o.spell_ids[e] + "/" + h(e));

          try {
            _l2.appendChild(document.createTextNode(o.translations[e][a[t.language]]));
          } catch (r) {
            try {
              _l2.appendChild(document.createTextNode(o.languages[e][a[t.language]]));
            } catch (t) {
              _l2.appendChild(document.createTextNode(e)), console.log("Bloodmallet charts: Translation for " + e + " wasn't found. Please help improving the reasource at bloodmallet.com.");
            }
          }

          return _l2.outerHTML;
        }

        if ("wowdb" == t.tooltip_engine) {
          var _l3 = document.createElement("a");

          _l3.href = "http://www.wowdb.com/";

          try {
            _l3.href += "items/" + o.item_ids[e];
          } catch (t) {
            r && (console.log(t), console.log("We're probably looking at a spell."));
          }

          if (_l3.href.indexOf("items") > -1) {
            var _t5 = o.simulated_steps[o.simulated_steps.length - 1];

            if ("string" == typeof _t5 && _t5.indexOf("_") > -1 && (_t5 = _t5.split("_")[1]), _l3.href += "?itemLevel=" + _t5, o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
              _l3.href += "&azerite=", _l3.href += o.class_id + ":0";

              for (var _t6 = 0; _t6 < o.used_azerite_traits_per_item[e].length; _t6++) {
                var _a3 = o.used_azerite_traits_per_item[e][_t6];
                _l3.href += ":" + _a3.id;
              }
            }
          }

          try {
            _l3.href += "spells/" + o.spell_ids[e];
          } catch (t) {
            r && (console.log(t), console.log("We're probably looking at an item."));
          }

          _l3.dataset.tooltipHref = _l3.href;

          var _i3 = void 0;

          try {
            _i3 = document.createTextNode(o.translations[e][a[t.language]]);
          } catch (l) {
            try {
              _i3 = document.createTextNode(o.languages[e][a[t.language]]);
            } catch (t) {
              _i3 = e, console.log("Bloodmallet charts: Translation for " + e + " wasn't found. Please help improving the reasource at bloodmallet.com.");
            }
          }

          return _l3.appendChild(document.createTextNode(_i3)), _l3.outerHTML;
        }
      }(t, e, T);
    });
    r && console.log(L), "highcharts" == v ? o.update({
      xAxis: {
        categories: L
      }
    }, !1) : "highcharts_old" == v && o.xAxis[0].setCategories(L, !1);
    var E = [];

    if ("azerite_traits_stacking" == i) {
      var _t7 = T.simulated_steps[0].replace("1_", "");

      E.push("3_" + _t7), E.push("2_" + _t7), E.push("1_" + _t7);
    } else E = T.simulated_steps;

    if (r && console.log("simulated_steps: " + E), E) {
      var _t8 = {};

      for (var _e2 in T.data) {
        if (T.data.hasOwnProperty(_e2)) {
          var _o2 = T.data[_e2];
          _t8[_e2] = {};
          var _a4 = z;
          "conduits" === i && (_a4 = T.data.baseline[T.covenant_mapping[_e2]]);

          for (var _l4 = E.length - 1; _l4 >= 0; _l4--) {
            var _r2 = E[_l4];
            _o2.hasOwnProperty(_r2) ? (_t8[_e2][_r2] = _o2[_r2] - _a4, _a4 = _o2[_r2]) : _t8[_e2][_r2] = 0;
          }
        }
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = E[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _e3 = _step.value;
          var _a5 = [];

          for (var _o3 = 0; _o3 < A.length; _o3++) {
            var _l6 = A[_o3];

            _a5.push(_t8[_l6][_e3]);
          }

          var _l5 = _e3;
          ["azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(i) > -1 ? _l5 = _e3.split("_")[1] : "azerite_traits_stacking" === i && (_l5 = _e3.split("_")[0]), o.addSeries({
            data: _a5,
            name: _l5
          }, !1);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else if (["legendaries", "soul_binds"].includes(i)) {
      var M = [];

      for (var _t9 = 0; _t9 < A.length; _t9++) {
        var _e4 = A[_t9],
            _o4 = T.data[_e4] - z;

        M.push(_o4);
      }

      o.addSeries({
        data: M,
        name: "Data",
        showInLegend: !1
      }, !1);
    } else {
      M = [];

      for (var _t10 = 0; _t10 < A.length; _t10++) {
        var _e5 = A[_t10],
            _o5 = T.data[_e5];
        M.push(_o5);
      }

      o.addSeries({
        data: M,
        name: "DPS",
        showInLegend: !1
      }, !1);
    }

    ["trinkets", "azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(i) > -1 ? o.legend.title.attr({
      text: "Itemlevel"
    }) : "races" === i ? o.legend.title.attr({
      text: ""
    }) : "azerite_traits_stacking" === i && o.legend.title.attr({
      text: "Trait count"
    }), o.redraw(), "highcharts_old" == v && o.reflow(), e.style.height = 200 + 30 * A.length + "px", "highcharts" == v && o.setSize(e.style.width, e.style.height), "wowdb" == t.tooltip_engine && setTimeout(function () {
      !function (t) {
        r && console.log("readd_wowdb_tooltips");

        try {
          CurseTips["wowdb-tooltip"].watchElements(document.getElementById(t).getElementsByTagName("a"));
        } catch (t) {
          console.log("Setting wowdb (CurseTips) tooltips failed. Error: ", t);
        }
      }(e.id);
    }, 1), function (t, e) {
      if (!["bloodmallet.com", "127.0.0.1"].includes(window.location.hostname)) return;
      r && console.log("provide_meta_data");
      document.getElementById("meta-info").hidden = !1;

      for (var _t11 in e.simc_settings) {
        var _o6 = document.createTextNode(e.simc_settings[_t11]),
            _a6 = document.getElementById("c_" + _t11);

        _a6.innerText = "", _a6.appendChild(_o6);
      }

      var o = document.createElement("a");
      o.href = "https://github.com/simulationcraft/simc/commit/" + e.simc_settings.simc_hash, o.innerText = e.simc_settings.simc_hash.substring(0, 7);
      var a = document.getElementById("c_simc_hash");
      a.innerText = "", a.appendChild(o);

      for (var _t12 in e.profile.character) {
        try {
          var _o7 = document.getElementById("c_" + _t12);

          _o7.innerHTML = "";

          var _a7 = document.createTextNode(e.profile.character[_t12].split(" ").map(function (t) {
            return t[0].toUpperCase() + t.substring(1);
          }).join(" "));

          _o7.appendChild(_a7);
        } catch (t) {}
      }

      var l = e.profile.character.talents;
      var i = document.getElementById("c_talents");
      i.innerHTML = "";

      for (var _o8 = 0; _o8 < l.length; _o8++) {
        var _a8 = l[_o8];

        var _r3 = document.createElement("a");

        _r3.href = "", _r3.href = "https://" + ("en" === t.language ? "www" : t.language) + ".wowhead.com/";

        try {
          _r3.href += "spell=" + e.talent_data[parseInt(_o8) + 1][parseInt(_a8)].spell_id;
        } catch (t) {
          continue;
        }

        _r3.dataset.whIconSize = "medium", i.appendChild(_r3);
      }

      for (var _o9 in e.profile.items) {
        var _a9 = document.createElement("a");

        _a9.href = "", _a9.href = "https://" + ("en" === t.language ? "www" : t.language) + ".wowhead.com/", _a9.href += "item=" + e.profile.items[_o9].id;
        var _l7 = [];

        try {
          _l7.push("bonus=" + e.profile.items[_o9].bonus_id.split("/").join(":"));
        } catch (t) {}

        _l7.length > 0 && (_a9.href += "?" + _l7.join("&")), _a9.dataset.whIconSize = "medium";

        var _r4 = document.getElementById("c_" + _o9);

        _r4.innerHTML = "", _r4.appendChild(_a9);
      }

      "talents" === t.data_type && function (t, e) {
        console.log("build_talent_table"), document.getElementById("talent-table").hidden = !1;
        var o = [];

        for (var _t13 = 1; _t13 < 8; _t13++) {
          for (var _e6 = 1; _e6 < 4; _e6++) {
            o.push(_t13.toString() + _e6.toString());
          }
        }

        for (var _i4 = 0; _i4 < o.length; _i4++) {
          var _a10 = _o10[_i4];

          var _o10 = document.getElementById(_a10);

          try {
            var _l8 = document.createElement("h5"),
                _i5 = e.talent_data[_a10.slice(0, 1)][_a10.slice(1, 2)];

            _l8.innerHTML = _(t, _i5.name, _a10, e), _o10.innerHTML = "", _o10.appendChild(_l8), _o10.appendChild(u("Mean", b(_a10, e))), _o10.appendChild(u("Min", f(_a10, e)[1], f(_a10, e)[0])), _o10.appendChild(u("Max", y(_a10, e)[1], y(_a10, e)[0]));

            var _n2 = m(_a10, e),
                _s2 = _n2.slice(0, _a10.slice(0, 1) - 1) + "0" + _n2.slice(_a10.slice(0, 1), 8),
                _d2 = e.data[_n2],
                _c = e.data[_s2];

            _o10.appendChild(u("Max dps", w(_c, _d2), _n2)), _n2 = m(_a10, e);

            var _h = w(e.data[e.sorted_data_keys[0]], e.data[_n2]);

            _o10.appendChild(u("Max dps minus global best", _h, _n2));
          } catch (t) {
            _o10.innerHTML = "-", r && console.warn(t);
          }
        }

        $(function () {
          $('[data-toggle="tooltip"]').tooltip();
        });
      }(t, e);

      try {
        $WowheadPower.refreshLinks();
      } catch (t) {}
    }(t, T);
  }

  function c(t, e, o) {
    r && console.log("create_color");
    var a = [0, 255, 255],
        l = [255, 255, 0],
        i = [255, 0, 0],
        n = 0,
        s = 0;

    for (var _t14 = 0; _t14 < 3; _t14++) {
      n += Math.abs(i[_t14] - l[_t14]), s += Math.abs(l[_t14] - a[_t14]);
    }

    var d = e + (o - e) * (s / (s + n));

    if (t >= d) {
      var _e7 = (t - d) / (o - d);

      return [Math.floor(i[0] * _e7 + l[0] * (1 - _e7)), Math.floor(i[1] * _e7 + l[1] * (1 - _e7)), Math.floor(i[2] * _e7 + l[2] * (1 - _e7))];
    }

    {
      var _o11 = (t - e) / (d - e);

      return [Math.floor(l[0] * _o11 + a[0] * (1 - _o11)), Math.floor(l[1] * _o11 + a[1] * (1 - _o11)), Math.floor(l[2] * _o11 + a[2] * (1 - _o11))];
    }
  }

  function h(t) {
    return t.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }

  function g(i) {
    if (r && console.log("update_chart_style"), "highcharts" == i.chart_engine || "highcharts_old" == i.chart_engine) {
      if ("secondary_distributions" === i.data_type) return {
        chart: {
          renderTo: "scatter_plot_chart",
          type: "scatter3d",
          backgroundColor: null,
          animation: !1,
          height: 800,
          width: 800,
          options3d: {
            enabled: !0,
            alpha: 10,
            beta: 30,
            depth: 800,
            fitToPlot: !1
          }
        },
        legend: {
          enabled: !0,
          backgroundColor: i.background_color,
          borderColor: i.font_color,
          borderWidth: 1,
          align: "right",
          verticalAlign: "middle",
          layout: "vertical",
          itemStyle: {
            color: i.font_color
          },
          itemHoverStyle: {
            color: i.font_color
          }
        },
        plotOptions: {
          series: {
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: i.font_color,
                fontSize: i.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: i.font_color,
            fontSize: i.font_size
          }
        },
        tooltip: {
          headerFormat: "",
          pointFormatter: function pointFormatter() {
            return '<table class="">                <thead>                  <tr>                    <th scope="col"></th>                    <th scope="col">Absolute</th>                    <th scope="col">Relative</th>                  </tr>                </thead>                <tbody>                  <tr>                    <th scope="row">DPS</th>                    <td>' + Intl.NumberFormat().format(this.dps) + "</td>                    <td>" + Math.round(this.dps / this.dps_max * 1e4) / 100 + '%</td>                  </tr>                  <tr>                    <th scope="row">Crit</th>                    <td>' + Intl.NumberFormat().format(this.stat_crit) + "</td>                    <td>" + this.name.split("_")[0] + '%</td>                  </tr>                  <tr>                    <th scope="row">Haste</th>                    <td>' + Intl.NumberFormat().format(this.stat_haste) + "</td>                    <td>" + this.name.split("_")[1] + '%</td>                  </tr>                  <tr>                    <th scope="row">Mastery</th>                    <td>' + Intl.NumberFormat().format(this.stat_mastery) + "</td>                    <td>" + this.name.split("_")[2] + '%</td>                  </tr>                  <tr>                    <th scope="row">Versatility</th>                    <td>' + Intl.NumberFormat().format(this.stat_vers) + "</td>                    <td>" + this.name.split("_")[3] + "%</td>                  </tr>                </tbody>              </table>";
          },
          useHTML: !0,
          borderColor: i.background_color
        },
        xAxis: {
          min: 0,
          max: 80,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        yAxis: {
          min: -10,
          max: 70,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        },
        zAxis: {
          min: 10,
          max: 90,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          reversed: !0,
          gridLineWidth: 1,
          gridLineColor: i.axis_color
        }
      };
      var _r5 = i.background_color,
          _n3 = i.axis_color,
          _s3 = i.font_color,
          _d3 = {
        chart: {
          type: "bar",
          backgroundColor: e,
          style: {
            fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"'
          }
        },
        colors: t,
        credits: {
          href: "https://bloodmallet.com/",
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        legend: {
          align: "right",
          backgroundColor: e,
          borderColor: a,
          borderWidth: 1,
          floating: !1,
          itemMarginBottom: 3,
          itemMarginTop: 0,
          layout: "vertical",
          reversed: !0,
          shadow: !1,
          verticalAlign: "middle",
          x: 0,
          y: 0,
          itemStyle: {
            color: o
          },
          itemHoverStyle: {
            color: o
          },
          title: {
            text: " ",
            style: {
              color: o
            }
          },
          symbolRadius: 0
        },
        plotOptions: {
          series: {
            stacking: "normal",
            borderColor: e,
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            },
            style: {
              textOutline: !1,
              fontSize: l
            }
          }
        },
        series: [],
        title: {
          text: "Loading data...",
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        subtitle: {
          text: '...from <a href="https://bloodmallet.com">bloodmallet</a>',
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        tooltip: {
          headerFormat: "<b>{point.x}</b>",
          shared: !0,
          backgroundColor: e,
          borderColor: a,
          style: {
            color: o,
            fontSize: l
          },
          useHTML: !0,
          positioner: function positioner(t, e, o) {
            return {
              x: o.plotX,
              y: o.plotY
            };
          }
        },
        xAxis: {
          categories: [],
          labels: {
            useHTML: !0,
            style: {
              color: o,
              fontSize: l
            }
          },
          gridLineWidth: 0,
          gridLineColor: a,
          lineColor: a,
          tickColor: a
        },
        yAxis: [{
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "Δ Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }, {
          linkedTo: 0,
          opposite: !0,
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "Δ Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }]
      };
      return _d3.chart.backgroundColor = _r5, _d3.legend.backgroundColor = _r5, _d3.legend.borderColor = _n3, _d3.legend.itemStyle.color = _s3, _d3.legend.itemHoverStyle.color = _s3, _d3.title.style.color = _s3, _d3.subtitle.style.color = _s3, _d3.tooltip.formatter = function () {
        var t = document.createElement("div");
        t.style.margin = "-4px -7px -7px -7px", t.style.padding = "3px 3px 6px 3px", t.style.backgroundColor = "transparent" !== _r5 ? _r5 : e, "highcharts_old" === i.chart_engine && (t.style.margin = "-7px");
        var o = document.createElement("div");
        t.appendChild(o), o.style.marginLeft = "9px", o.style.marginRight = "9px", o.style.marginBottom = "6px", o.style.fontWeight = "700", o.innerHTML = this.x;
        var a = 0;

        for (var l = this.points.length - 1; l >= 0; l--) {
          if (a += this.points[l].y, 0 !== this.points[l].y) {
            var _e8 = document.createElement("div");

            t.appendChild(_e8);

            var _o12 = document.createElement("span");

            _e8.appendChild(_o12), _o12.style.marginLeft = "9px", _o12.style.borderLeft = "9px solid " + this.points[l].series.color, _o12.style.paddingLeft = "4px", Number.isInteger(this.points[l].series.name) && _o12.appendChild(document.createTextNode(this.points[l].series.name + ":")), _e8.appendChild(document.createTextNode("  " + Intl.NumberFormat().format(a)));
          }
        }

        return t.outerHTML;
      }, _d3.tooltip.backgroundColor = "transparent" !== _r5 ? _r5 : e, _d3.tooltip.borderColor = _n3, _d3.tooltip.style.color = _s3, _d3.xAxis.labels.style.color = _s3, _d3.xAxis.gridLineColor = _n3, _d3.xAxis.lineColor = _n3, _d3.xAxis.tickColor = _n3, _d3.yAxis[0].labels.style.color = _n3, _d3.yAxis[0].stackLabels.style.color = _s3, _d3.yAxis[0].gridLineColor = _n3, _d3.yAxis[0].lineColor = _n3, _d3.yAxis[0].tickColor = _n3, _d3.yAxis[0].title.style.color = _n3, _d3.yAxis[1].labels.style.color = _n3, _d3.yAxis[1].stackLabels.style.color = _s3, _d3.yAxis[1].gridLineColor = _n3, _d3.yAxis[1].lineColor = _n3, _d3.yAxis[1].tickColor = _n3, _d3.yAxis[1].title.style.color = _n3, _d3.credits.style.color = _s3, _d3;
    }
  }

  function u(t, e, o) {
    var a = document.createElement("div");
    a.innerHTML = t + ": ";
    var l = document.createElement("span");

    if (l.innerHTML = e + "%", l.classList += p(e >= 0 ? e : 3 - e), void 0 !== o) {
      l.title = "Talent combination: " + o, l.setAttribute("data-toggle", "tooltip"), l.setAttribute("data-placement", "bottom");

      var _t15 = document.createElement("span");

      _t15.classList += "priest-color", _t15.innerHTML = " (?)", l.appendChild(_t15);
    }

    return a.appendChild(l), a;
  }

  function p(t) {
    return r && console.log("get_value_color"), t < 5 ? "mage-color" : t > 10 && t <= 12 ? "druid-color" : t > 12 ? "death_knight-color" : "monk-color";
  }

  function m(t, e) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = e.sorted_data_keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _o13 = _step2.value;
        if (_o13[t.slice(0, 1) - 1] === t.slice(1, 2)) return _o13;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return !1;
  }

  function _(t, e, o, a) {
    var l = '<a href="https://';
    return "en" === t.language || "EN" === t.language ? l += "www" : l += t.language.toLowerCase(), l += ".wowhead.com/spell=", l += a.talent_data[o.slice(0, 1)][o.slice(1, 2)].spell_id, l += '"', l += ">", l += function (t, e) {
      r && console.log("get_translated_name " + t);
      var o = {
        "zh-hans": "cn_CN",
        en: "en_US",
        de: "de_DE",
        es: "es_ES",
        fr: "fr_FR",
        it: "it_IT",
        ko: "ko_KR",
        pt: "pt_BR",
        ru: "ru_RU"
      },
          a = "";

      try {
        a = e.translations[t][o[language]];
      } catch (e) {
        r && (console.log("No translation for ".concat(t, " found.")), console.log(e)), a = t;
      }

      r && console.log("Translated name: " + a);
      return a;
    }(e, a), l += "</a>";
  }

  function f(t, e) {
    var o = t.slice(0, 1),
        a = t.slice(1, 2),
        l = 100,
        r = "";
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = e.sorted_data_keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _t16 = _step3.value;

        if (_t16[o - 1] === a) {
          var _a11 = e.data[_t16],
              _i6 = e.data[_t16.slice(0, o - 1) + "0" + _t16.slice(o, 8)];

          l > w(_i6, _a11) && (l = w(_i6, _a11), r = _t16);
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return [r, l];
  }

  function y(t, e) {
    var o = t.slice(0, 1),
        a = t.slice(1, 2),
        l = -100,
        r = "";
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = e.sorted_data_keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var _t17 = _step4.value;

        if (_t17[o - 1] === a) {
          var _a12 = e.data[_t17],
              _i7 = e.data[_t17.slice(0, o - 1) + "0" + _t17.slice(o, 8)];

          l < w(_i7, _a12) && (l = w(_i7, _a12), r = _t17);
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return [r, l];
  }

  function b(t, e) {
    r && console.log("get_average_gain");
    var o = [];
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = e.sorted_data_keys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var _a13 = _step5.value;
        _a13[t.slice(0, 1) - 1] === t.slice(1, 2) && o.push(_a13);
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    var a = 0;

    for (var _i8 = 0; _i8 < o.length; _i8++) {
      var _l9 = _o14[_i8];
      var _o14 = e.data[_l9];
      a += w(e.data[_l9.slice(0, t.slice(0, 1) - 1) + "0" + _l9.slice(t.slice(0, 1), 8)], _o14);
    }

    return Math.round(a / o.length * 100) / 100;
  }

  function w(t, e) {
    return r && console.log("get_percentage_gain"), Math.round(100 * (100 * e / t - 100)) / 100;
  }

  this.init_charts = new function () {
    r && console.log("init_charts");
    var t = document.querySelectorAll("div.bloodmallet_chart"),
        l = [];

    for (var _e9 = 0; _e9 < t.length; _e9++) {
      var _o15 = t[_e9];
      if (l.indexOf(_o15.id) > -1) return void console.error("Multiple Elements use the same ID ('" + _o15.id + "'). Aborting bloodmallet_chart_import.js.");
      l.push(_o15.id);
    }

    for (var _l10 = 0; _l10 < t.length; _l10++) {
      var _i9 = void 0;

      try {
        _i9 = t[_l10].id;
      } catch (t) {
        return void console.error("Each .bloodmallet_chart needs an ID. Aborting bloodmallet_chart_import.js.");
      }

      var _n4 = document.getElementById(t[_l10].id);

      if (_n4) {
        var _t18 = {
          chart_id: void 0,
          wow_class: void 0,
          wow_spec: void 0,
          data_type: "trinkets",
          azerite_tier: "all",
          fight_style: "patchwerk",
          axis_color: a,
          background_color: e,
          font_color: o,
          limit: 7,
          chart_engine: "highcharts",
          tooltip_engine: "wowhead",
          language: "en"
        };

        try {
          void 0 !== bloodmallet.style.axis_color && (_t18.axis_color = bloodmallet.style.axis_color), void 0 !== bloodmallet.style.background_color && (_t18.background_color = bloodmallet.style.background_color), void 0 !== bloodmallet.style.font_color && (_t18.font_color = bloodmallet.style.font_color), void 0 !== bloodmallet.settings.entries && (_t18.limit = bloodmallet.settings.entries), void 0 !== bloodmallet.settings.chart_engine && (_t18.chart_engine = bloodmallet.settings.chart_engine), void 0 !== bloodmallet.settings.tooltip_engine && (_t18.tooltip_engine = bloodmallet.settings.tooltip_engine), void 0 !== bloodmallet.settings.language && (_t18.language = bloodmallet.settings.language);
        } catch (t) {
          r && console.log("Applying page wide settings failed or no page wide settings were found.");
        }

        _n4.getAttribute("data-entries") && (_t18.limit = _n4.getAttribute("data-entries")), _n4.getAttribute("data-fight-style") && (_t18.fight_style = _n4.getAttribute("data-fight-style")), _n4.getAttribute("data-type") && (_t18.data_type = _n4.getAttribute("data-type")), _n4.getAttribute("data-azerite-tier") && (_t18.azerite_tier = _n4.getAttribute("data-azerite-tier")), _n4.getAttribute("data-background-color") && (_t18.background_color = _n4.getAttribute("data-background-color")), _n4.getAttribute("data-font-color") && (_t18.font_color = _n4.getAttribute("data-font-color")), _n4.getAttribute("data-axis-color") && (_t18.axis_color = _n4.getAttribute("data-axis-color")), _n4.getAttribute("data-tooltip-engine") && (_t18.tooltip_engine = _n4.getAttribute("data-tooltip-engine")), _n4.getAttribute("data-chart-engine") && (_t18.chart_engine = _n4.getAttribute("data-chart-engine")), _n4.getAttribute("data-language") && (_t18.language = _n4.getAttribute("data-language"));

        var _l11 = !0;

        _n4.getAttribute("data-chart-id") ? _t18.chart_id = _n4.getAttribute("data-chart-id") : (_n4.getAttribute("data-wow-class") || (console.error("Required 'data-chart-id' or 'data-wow-class' attribute wasn't found in " + _i9 + "."), _l11 = !1), _t18.wow_class = _n4.getAttribute("data-wow-class"), _n4.getAttribute("data-wow-spec") || (console.error("Required 'data-chart-id' or 'data-wow-spec' attribute wasn't found in " + _i9 + "."), _l11 = !1), _t18.wow_spec = _n4.getAttribute("data-wow-spec"));

        var _c2 = g(_t18),
            _h2 = !1;

        if ("highcharts" == _t18.chart_engine) try {
          _h2 = Highcharts.chart(_i9, _c2);
        } catch (t) {
          return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
        } else if ("highcharts_old" == _t18.chart_engine) try {
          var _t19 = _c2;
          _t19.chart.renderTo = _i9, _h2 = new Highcharts.Chart(_t19);
        } catch (t) {
          return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(t);
        }
        _l11 ? s(_t18) : _h2.setTitle({
          text: "Wrong chart setup"
        }, {
          text: "Missing 'data-chart-id', 'data-wow-class' or 'data-wow-spec'. See <a href=\"https://github.com/Bloodmallet/bloodmallet.github.io/wiki/How-to-import-charts-or-data\">wiki</a>"
        }), setTimeout(d, 1, _t18, _n4, _h2, 0);
      }
    }
  }();
}

document.addEventListener("DOMContentLoaded", function () {
  bloodmallet_chart_import();
});