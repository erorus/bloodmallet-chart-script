"use strict";

function bloodmallet_chart_import() {
  var e = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
      t = "#343a40",
      o = "#f8f9fa",
      a = "#828282",
      l = "1.1rem",
      i = !1,
      r = "https://bloodmallet.com/chart/get/",
      n = {
    cn: "cn_CN",
    en: "en_US",
    de: "de_DE",
    es: "es_ES",
    fr: "fr_FR",
    it: "it_IT",
    ko: "ko_KR",
    pt: "pt_BR",
    ru: "ru_RU"
  };

  function s(e) {
    i && console.log("load_data");
    var t = e.chart_id,
        o = e.data_type,
        a = e.fight_style,
        l = e.wow_class,
        n = e.wow_spec;

    try {
      if (d(e)) return;
    } catch (e) {
      i && console.log("Data needs to be loaded.");
    }

    var s = o;
    s.indexOf("azerite") > -1 && (s = "azerite_traits");
    var c = a;
    c += "/" + l, c += "/" + n;
    var h = "";
    h = t ? r + t : r + s + "/" + c;
    var u = new XMLHttpRequest();
    i && console.log("Fetching data from: " + h), u.open("GET", h, !0), u.onload = function (t) {
      if (4 === u.readyState) if (200 === u.status) {
        var _t = JSON.parse(u.responseText);

        e.html_element.dataset.loadedData = u.responseText, i && (console.log(_t), console.log("Load and save finished."));
      } else console.error(u.statusText);
    }, u.onerror = function (e) {
      console.error("Fetching data from bloodmallet.com encountered an error, ", e);
    }, u.send(null);
  }

  function d(e) {
    return JSON.parse(e.html_element.dataset.loadedData);
  }

  function c(e, t, o, a) {
    i && console.log("update_chart");
    e.chart_id;
    var l = e.data_type,
        r = e.fight_style,
        s = e.wow_class,
        f = e.wow_spec,
        T = e.limit,
        A = e.chart_engine,
        E = !1;

    try {
      E = d(e);
    } catch (l) {
      return void (a < 30 && setTimeout(c, 200, e, t, o, a + 1));
    }

    if (!0 === E.error) return function (e, t) {
      var o = e;
      o.innerHTML = "";
      var a = document.createElement("p");
      a.innerText = "An error occured during simulation.", o.appendChild(a);
      var l = document.createElement("ul"),
          i = document.createElement("li");
      i.textContent = "Title: " + (t.title ? t.title : "~"), l.appendChild(i);
      var r = document.createElement("li");
      r.textContent = "Spec: " + t.wow_spec + " " + t.wow_class, l.appendChild(r);
      var n = document.createElement("li");
      n.textContent = "Type: " + t.simulation_type, l.appendChild(n);
      var s = document.createElement("li");
      s.textContent = "Fight style: " + t.fight_style, l.appendChild(s);
      var d = document.createElement("li");
      d.textContent = "ID: " + t.id, l.appendChild(d);
      var c = document.createElement("li");
      c.textContent = "Custom profile:", l.appendChild(c), c.appendChild(document.createElement("br"));
      var h = document.createElement("textarea");
      h.readOnly = !0, h.value = t.custom_profile, h.placeholder = "No custom profile", h.style.width = "100%", c.appendChild(h);
      var u = document.createElement("li");
      u.textContent = "Log:", l.appendChild(u), u.appendChild(document.createElement("br"));
      var g = document.createElement("textarea");
      g.readOnly = !0, g.value = t.log, g.placeholder = "No log available", g.style.width = "100%", u.appendChild(g), o.appendChild(l);
    }(t, E);
    if (s = E.simc_settings.class, f = E.simc_settings.spec, r = E.simc_settings.fight_style, e.data_type = l = E.data_type, function (e, t) {
      if (!["bloodmallet.com", "127.0.0.1:8000"].includes(window.location.host)) return;
      i && console.log("provide_meta_data");
      ["trinkets", "covenants", "conduits", "soulbind_nodes"].includes(e.data_type) && (document.getElementById("value_style_switch").hidden = !1);
      ["soulbinds"].includes(e.data_type) && (document.getElementById("chart_options").hidden = !1);
      document.getElementById("meta-info").hidden = !1;

      for (var _e in t.simc_settings) {
        var _o = document.createTextNode(t.simc_settings[_e]),
            _a = document.getElementById("c_" + _e);

        _a.innerText = "", _a.appendChild(_o);
      }

      var o = document.createElement("a");
      o.href = "https://github.com/simulationcraft/simc/commit/" + t.simc_settings.simc_hash, o.innerText = t.simc_settings.simc_hash.substring(0, 7);
      var a = document.getElementById("c_simc_hash");
      a.innerText = "", a.appendChild(o);

      for (var _e2 in t.profile.character) {
        try {
          var _o2 = document.getElementById("c_" + _e2);

          _o2.innerHTML = "";

          var _a2 = document.createTextNode(t.profile.character[_e2].split(" ").map(function (e) {
            return e[0].toUpperCase() + e.substring(1);
          }).join(" "));

          _o2.appendChild(_a2);
        } catch (e) {}
      }

      var l = void 0 !== t.profile.character.talents ? t.profile.character.talents : "0000000";
      var r = document.getElementById("c_talents");
      r.innerHTML = "";

      for (var _o3 = 0; _o3 < l.length; _o3++) {
        var _a3 = l[_o3];

        var _i = document.createElement("a");

        _i.href = "", _i.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/";

        try {
          _i.href += "spell=" + t.talent_data[parseInt(_o3) + 1][parseInt(_a3)].spell_id;
        } catch (e) {
          continue;
        }

        _i.dataset.whIconSize = "medium", r.appendChild(_i);
      }

      for (var _o4 in t.profile.items) {
        var _a4 = document.createElement("a");

        _a4.href = "", _a4.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", _a4.href += "item=" + t.profile.items[_o4].id;
        var _l = [];

        try {
          _l.push("bonus=" + t.profile.items[_o4].bonus_id.split("/").join(":"));
        } catch (e) {}

        try {
          t.profile.items[_o4].hasOwnProperty("ilevel") && _l.push("ilvl=" + t.profile.items[_o4].ilevel);
        } catch (e) {}

        _l.length > 0 && (_a4.href += "?" + _l.join("&")), _a4.dataset.whIconSize = "medium";

        var _i2 = document.getElementById("c_" + _o4);

        _i2.innerHTML = "", _i2.appendChild(_a4);
      }

      "talents" === e.data_type && (document.getElementById("talent-warning").hidden = !1, function (e, t) {
        i && console.log("build_talent_table");
        document.getElementById("talent-table").hidden = !1;
        var o = [];

        for (var _e3 = 1; _e3 < 8; _e3++) {
          for (var _t2 = 1; _t2 < 4; _t2++) {
            o.push(_e3.toString() + _t2.toString());
          }
        }

        for (var _i3 = 0; _i3 < o.length; _i3++) {
          var _a5 = _o5[_i3];

          var _o5 = document.getElementById(_a5);

          try {
            var _l2 = document.createElement("h5"),
                _r = t.talent_data[_a5.slice(0, 1)][_a5.slice(1, 2)];

            _l2.innerHTML = b(e, _r.name, _a5, t), _o5.innerHTML = "", _o5.appendChild(_l2), _o5.appendChild(m("Mean", C(_a5, t))), _o5.appendChild(m("Min", x(_a5, t)[1], x(_a5, t)[0])), _o5.appendChild(m("Max", v(_a5, t)[1], v(_a5, t)[0]));

            var _n = y(_a5, t),
                _s = _n.slice(0, _a5.slice(0, 1) - 1) + "0" + _n.slice(_a5.slice(0, 1), 8),
                _d = t.data[_n],
                _c = t.data[_s];

            _o5.appendChild(m("Max dps", k(_c, _d), _n)), _n = y(_a5, t);

            var _h = k(t.data[t.sorted_data_keys[0]], t.data[_n]);

            _o5.appendChild(m("Max dps minus global best", _h, _n));
          } catch (e) {
            _o5.innerHTML = "-", i && console.warn(e);
          }
        }

        $(function () {
          $('[data-toggle="tooltip"]').tooltip();
        });
      }(e, t));

      if ("soulbinds" === e.data_type) {
        var _o6 = document.getElementById("post_chart");

        _o6.hidden = !1, _o6.innerHTML = "", Object.keys(t.covenant_ids).forEach(function (a) {
          var l = t.covenant_ids[a];
          var i = document.createElement("h3");
          i.appendChild(document.createTextNode(w(a, t))), _o6.appendChild(i);
          var r = 0;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = t.sorted_data_keys[t.simulated_steps[0]][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _a6 = _step.value;

              if (t.covenant_mapping[_a6].indexOf(l) > -1) {
                r += 1;

                var _l3 = document.createElement("h4");

                _l3.appendChild(document.createTextNode(r + ". " + w(_a6, t))), _l3.classList += "ml-3", _l3.id = _a6, _o6.appendChild(_l3);

                var _i4 = document.createElement("p");

                _i4.classList += "ml-5";
                var _s2 = [];
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = t.soul_bind_paths[t.simulated_steps[0]][_a6][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _o7 = _step2.value;

                    if (t.data.hasOwnProperty(_o7)) {
                      var _a7 = document.createElement("a");

                      _a7.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", t.hasOwnProperty("spell_ids") && t.spell_ids.hasOwnProperty(_o7) && (_a7.href += "spell=" + t.spell_ids[_o7] + "/" + p(_o7)), _a7.appendChild(document.createTextNode(t.translations[_o7][n[e.language]])), _s2.push(_a7);
                    }
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }

                for (var _e4 = 0; _e4 < _s2.length; _e4++) {
                  0 !== _e4 && _i4.appendChild(document.createTextNode(", ")), _i4.appendChild(_s2[_e4]);
                }

                _o6.appendChild(_i4);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      }

      try {
        $WowheadPower.refreshLinks();
      } catch (e) {}
    }(e, E), "secondary_distributions" === l) return function (e, t, o) {
      i && console.log("update_secondary_distribution_chart");
      var a = t.id,
          l = (e.chart_id, e.fight_style),
          r = e.wow_class,
          n = e.wow_spec,
          s = (e.chart_engine, !1);
      s = d(e), r = s.simc_settings.class, n = s.simc_settings.spec, l = s.simc_settings.fight_style;

      var c = _(e),
          h = !1;

      if ("highcharts" == e.chart_engine) try {
        h = Highcharts.chart(a, c);
      } catch (e) {
        return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
      } else if ("highcharts_old" == e.chart_engine) try {
        var _e5 = c;
        _e5.chart.renderTo = a, h = new Highcharts.Chart(_e5);
      } catch (e) {
        return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
      }
      o = void 0, o = h;
      var g = void 0;
      g = Object.keys(s.data)[0];
      var p = s.data[g][s.sorted_data_keys[g][0]],
          m = s.data[g][s.sorted_data_keys[g][s.sorted_data_keys[g].length - 1]],
          f = u(100, 0, 100),
          y = u(0, 0, 100),
          b = {
        name: Intl.NumberFormat().format(p) + " DPS",
        color: "rgb(" + f[0] + "," + f[1] + "," + f[2] + ")",
        data: []
      };

      var _arr = Object.keys(s.data[g]);

      for (var _i5 = 0; _i5 < _arr.length; _i5++) {
        var _t3 = _arr[_i5];

        var _o8 = s.data[g][_t3],
            _a8 = u(_o8, m, p),
            _l4 = 1,
            _i6 = "#232227",
            _r2 = 5;

        p === _o8 && (_l4 = 3, _r2 = 8, _i6 = e.font_color);

        var _n2 = void 0;

        if (_t3.indexOf("70") > -1) switch (_n2 = {
          enabled: !0,
          allowOverlap: !0
        }, _t3.indexOf("70")) {
          case 0:
            _n2.format = "Crit", _n2.verticalAlign = "top";
            break;

          case 3:
            _n2.format = "Haste";
            break;

          case 6:
            _n2.format = "Mastery", _n2.verticalAlign = "top";
            break;

          case 9:
            _n2.format = "Versatility", _n2.verticalAlign = "top";
        }
        var _d2 = s.secondary_sum;

        var _c2 = parseInt(_t3.split("_")[0]),
            _h2 = parseInt(_t3.split("_")[1]),
            _2 = parseInt(_t3.split("_")[2]),
            _f = parseInt(_t3.split("_")[3]);

        b.data.push({
          x: Math.sqrt(3) / 2 * (_c2 + 1 / 3 * _h2),
          y: Math.sqrt(2 / 3) * _h2,
          z: _2 + .5 * _c2 + .5 * _h2,
          name: _t3,
          color: "rgb(" + _a8[0] + "," + _a8[1] + "," + _a8[2] + ")",
          dps: _o8,
          dps_max: p,
          dps_min: m,
          stat_crit: _c2 * _d2 / 100,
          stat_haste: _h2 * _d2 / 100,
          stat_mastery: _2 * _d2 / 100,
          stat_vers: _f * _d2 / 100,
          stat_sum: _d2,
          marker: {
            radius: _r2,
            lineColor: _i6,
            lineWidth: _l4
          },
          dataLabels: _n2
        });
      }

      for (; o.series[0];) {
        o.series[0].remove(!1);
      }

      o.addSeries(b, !1), o.addSeries({
        name: Intl.NumberFormat().format(m) + " DPS",
        color: "rgb(" + y[0] + "," + y[1] + "," + y[2] + ")"
      }, !1);
      var w = s.timestamp,
          x = w.split("-")[0],
          v = w.split("-")[1],
          C = w.split("-")[2].split(" ")[0],
          k = w.split(" ")[1].split(":")[0],
          T = w.split(":")[1],
          A = "Last updated ",
          E = new Date() - new Date(Date.UTC(x, v - 1, C, k, T)),
          L = Math.floor(E / 24 / 3600 / 1e3);
      L > 0 && (A += "".concat(L, "d "));
      var z = Math.floor(E / 3600 / 1e3) - 24 * L;
      A += "".concat(z, "h ago"), o.redraw(), function (e) {
        function t(t) {
          var a = (t = o.pointer.normalize(t)).chartX,
              l = t.chartY,
              i = o.options.chart.options3d.alpha,
              r = o.options.chart.options3d.beta,
              n = 5;

          function s(e) {
            e = o.pointer.normalize(e), o.update({
              chart: {
                options3d: {
                  alpha: i + (e.chartY - l) / n,
                  beta: r + (a - e.chartX) / n
                }
              }
            }, void 0, void 0, !1);
          }

          o.unbindDragMouse = e.addEvent(document, "mousemove", s), o.unbindDragTouch = e.addEvent(document, "touchmove", s), e.addEvent(document, "mouseup", o.unbindDragMouse), e.addEvent(document, "touchend", o.unbindDragTouch);
        }

        e.addEvent(o.container, "mousedown", t), e.addEvent(o.container, "touchstart", t);
      }(Highcharts);
    }(e, t, o);
    "azerite_traits" === E.data_type ? -1 === l.indexOf("azerite_items") && (l = "azerite_traits_stacking") : l = E.data_type;
    var L = E;
    var z, M;
    if (l.indexOf("azerite_traits") > -1) {
      if ("azerite_traits_stacking" === l) "all" === e.azerite_tier ? z = L.sorted_data_keys_2.slice(0, T) : "1" === e.azerite_tier || "3" === e.azerite_tier ? z = L.sorted_azerite_tier_3_trait_stacking.slice(0, T) : "2" === e.azerite_tier && (z = L.sorted_azerite_tier_2_trait_stacking.slice(0, T)), M = L.data.baseline[L.simulated_steps[0]];else {
        if ("azerite_traits_itemlevel" !== l) return void console.log("Chart found, but unknown data-type detected.");
        "all" === e.azerite_tier ? z = L.sorted_data_keys.slice(0, T) : "1" === e.azerite_tier || "3" === e.azerite_tier ? z = L.sorted_azerite_tier_3_itemlevel.slice(0, T) : "2" === e.azerite_tier && (z = L.sorted_azerite_tier_2_itemlevel.slice(0, T)), M = L.data.baseline[L.simulated_steps[L.simulated_steps.length - 1]];
      }
    } else z = "soulbinds" === l ? "nodes" === e.chart_mode ? L["sorted_data_keys_" + p(e.covenant).replace("-", "_") + "_" + e.conduit_rank].slice(0, T) : L.sorted_data_keys[e.conduit_rank].slice(0, T) : L.sorted_data_keys.slice(0, T), M = ["races", "talents"].includes(l) ? 0 : ["legendaries", "soulbind_nodes", "soulbinds", "covenants"].includes(l) ? L.data.baseline : L.data.baseline[L.simulated_steps[L.simulated_steps.length - 1]];

    for (i && (console.log(z), console.log("Baseline dps: " + M)), o.setTitle({
      text: L.title
    }, {
      text: L.subtitle
    }, !1); o.series[0];) {
      o.series[0].remove(!1);
    }

    var I = void 0;
    I = "talents" === l ? z.map(function (t) {
      var o = [];

      for (var _a9 = 0; _a9 < t.length; _a9++) {
        o.push(g(e, (_a9 + 1).toString() + t[_a9], L));
      }

      return o.join("");
    }) : z.map(function (t) {
      return g(e, t, L);
    }), i && console.log(I), "highcharts" == A ? o.update({
      xAxis: {
        categories: I
      }
    }, !1) : "highcharts_old" == A && o.xAxis[0].setCategories(I, !1);
    var O = [];

    if ("azerite_traits_stacking" == l) {
      var _e6 = L.simulated_steps[0].replace("1_", "");

      O.push("3_" + _e6), O.push("2_" + _e6), O.push("1_" + _e6);
    } else O = "soulbinds" == l && "soulbinds" === e.chart_mode ? void 0 : L.simulated_steps;

    if (i && console.log("simulated_steps: " + O), O) {
      var _t4 = {};

      for (var _o9 in L.data) {
        if (L.data.hasOwnProperty(_o9)) {
          var _a10 = L.data[_o9];
          _t4[_o9] = {};
          var _i7 = M;
          "conduits" === l ? _i7 = L.data.baseline[L.covenant_mapping[_o9]] : "soulbinds" === l && "nodes" === e.chart_mode && (_i7 = L.data.baseline[e.covenant]);

          for (var _l5 = O.length - 1; _l5 >= 0; _l5--) {
            var _r3 = O[_l5];

            var _n3 = _a10.hasOwnProperty(e.covenant) ? _a10[e.covenant] : _a10;

            Number.isInteger(_n3) ? (_t4[_o9][_r3] = _n3 - _i7, _i7 = _n3) : _n3.hasOwnProperty(_r3) ? (_t4[_o9][_r3] = _n3[_r3] - _i7, _i7 = _n3[_r3]) : _t4[_o9][_r3] = 0;
          }
        }
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = O[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _a11 = _step3.value;
          var _i8 = [];

          for (var _o10 = 0; _o10 < z.length; _o10++) {
            var _l6 = z[_o10];

            _i8.push(h(e, _t4[_l6][_a11], M));
          }

          var _r4 = _a11;
          ["azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(l) > -1 ? _r4 = _a11.split("_")[1] : "azerite_traits_stacking" === l && (_r4 = _a11.split("_")[0]), o.addSeries({
            data: _i8,
            name: _r4
          }, !1);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    } else if (["legendaries", "soulbind_nodes", "covenants"].includes(l)) {
      var S = [];

      for (var _t5 = 0; _t5 < z.length; _t5++) {
        var _o11 = z[_t5],
            _a12 = L.data[_o11] - M;

        S.push(h(e, _a12, M));
      }

      o.addSeries({
        data: S,
        name: "Data",
        showInLegend: !1
      }, !1);
    } else {
      S = [];

      for (var _t6 = 0; _t6 < z.length; _t6++) {
        var _o12 = z[_t6],
            _a13 = L.data[_o12];
        "soulbinds" === l && (_a13 = L.data[_o12][e.conduit_rank]), S.push(_a13);
      }

      o.addSeries({
        data: S,
        name: "DPS",
        showInLegend: !1
      }, !1);
    }

    ["trinkets", "azerite_items_chest", "azerite_items_head", "azerite_items_shoulders", "azerite_traits_itemlevel"].indexOf(l) > -1 ? o.legend.title.attr({
      text: "Itemlevel"
    }) : "races" === l ? o.legend.title.attr({
      text: ""
    }) : "azerite_traits_stacking" === l ? o.legend.title.attr({
      text: "Trait count"
    }) : "soulbinds" === l && "nodes" === e.chart_mode && o.legend.title.attr({
      text: "Conduit Rank"
    }), o.redraw(), "highcharts_old" == A && o.reflow(), t.style.height = 200 + 30 * z.length + "px", "highcharts" == A && o.setSize(t.style.width, t.style.height), "wowdb" == e.tooltip_engine && setTimeout(function () {
      !function (e) {
        i && console.log("readd_wowdb_tooltips");

        try {
          CurseTips["wowdb-tooltip"].watchElements(document.getElementById(e).getElementsByTagName("a"));
        } catch (e) {
          console.log("Setting wowdb (CurseTips) tooltips failed. Error: ", e);
        }
      }(t.id);
    }, 1);
  }

  function h(e, t, o) {
    return "absolute" === e.value_style ? t : "relative" === e.value_style ? Math.round(1e4 * t / o) / 100 : void console.error("Unknown value-style", e.value_style);
  }

  function u(e, t, o) {
    i && console.log("create_color");
    var a = [0, 255, 255],
        l = [255, 255, 0],
        r = [255, 0, 0],
        n = 0,
        s = 0;

    for (var _e7 = 0; _e7 < 3; _e7++) {
      n += Math.abs(r[_e7] - l[_e7]), s += Math.abs(l[_e7] - a[_e7]);
    }

    var d = t + (o - t) * (s / (s + n));

    if (e >= d) {
      var _t7 = (e - d) / (o - d);

      return [Math.floor(r[0] * _t7 + l[0] * (1 - _t7)), Math.floor(r[1] * _t7 + l[1] * (1 - _t7)), Math.floor(r[2] * _t7 + l[2] * (1 - _t7))];
    }

    {
      var _o13 = (e - t) / (d - t);

      return [Math.floor(l[0] * _o13 + a[0] * (1 - _o13)), Math.floor(l[1] * _o13 + a[1] * (1 - _o13)), Math.floor(l[2] * _o13 + a[2] * (1 - _o13))];
    }
  }

  function g(e, t, o) {
    if (i && (console.log("get_category_name"), console.log(t)), "wowhead" != e.tooltip_engine && "wowdb" != e.tooltip_engine) try {
      return o.translations[t][n[e.language]];
    } catch (a) {
      return o.languages[t][n[e.language]];
    }
    if (["races"].includes(e.data_type)) try {
      return o.translations[t][n[e.language]];
    } catch (a) {
      return o.languages[t][n[e.language]];
    }

    if (["soulbinds"].includes(e.data_type) && "soulbinds" === e.chart_mode) {
      var _a14 = '<a href="#' + t + '">';

      return _a14 += o.translations[t][n[e.language]], _a14 += "</a>";
    }

    if ("wowhead" == e.tooltip_engine) {
      var _a15 = document.createElement("a");

      if (_a15.href = "https://" + ("en" === e.language ? "www" : e.language) + ".wowhead.com/", o.hasOwnProperty("item_ids") && o.item_ids.hasOwnProperty(t)) {
        if (_a15.href += "item=" + o.item_ids[t] + "/" + p(t), o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
          _a15.href += "?azerite-powers=" + o.class_id;

          for (var _e9 = 0; _e9 < o.used_azerite_traits_per_item[t].length; _e9++) {
            var _l7 = o.used_azerite_traits_per_item[t][_e9];
            _a15.href += ":" + _l7.id;
          }
        }

        var _e8 = o.simulated_steps[o.simulated_steps.length - 1];
        "string" == typeof _e8 && _e8.indexOf("_") > -1 && (_e8 = _e8.split("_")[1]), _a15.href += "&ilvl=" + _e8;
      } else if (o.hasOwnProperty("spell_ids") && o.spell_ids.hasOwnProperty(t)) _a15.href += "spell=" + o.spell_ids[t] + "/" + p(t);else if ("talents" === e.data_type) {
        if ("0" === t[1]) return t[1];
        _a15.href += "spell=" + o.talent_data[t[0]][t[1]].spell_id;
      }

      if ("talents" === e.data_type) _a15.appendChild(document.createTextNode(t[1]));else try {
        _a15.appendChild(document.createTextNode(o.translations[t][n[e.language]]));
      } catch (l) {
        try {
          _a15.appendChild(document.createTextNode(o.languages[t][n[e.language]]));
        } catch (e) {
          _a15.appendChild(document.createTextNode(t));
        }
      }
      return _a15.outerHTML;
    }

    if ("wowdb" == e.tooltip_engine) {
      var _a16 = document.createElement("a");

      _a16.href = "http://www.wowdb.com/";

      try {
        _a16.href += "items/" + o.item_ids[t];
      } catch (e) {
        i && (console.log(e), console.log("We're probably looking at a spell."));
      }

      if (_a16.href.indexOf("items") > -1) {
        var _e10 = o.simulated_steps[o.simulated_steps.length - 1];

        if ("string" == typeof _e10 && _e10.indexOf("_") > -1 && (_e10 = _e10.split("_")[1]), _a16.href += "?itemLevel=" + _e10, o.hasOwnProperty("class_id") && o.hasOwnProperty("used_azerite_traits_per_item")) {
          _a16.href += "&azerite=", _a16.href += o.class_id + ":0";

          for (var _e11 = 0; _e11 < o.used_azerite_traits_per_item[t].length; _e11++) {
            var _l9 = o.used_azerite_traits_per_item[t][_e11];
            _a16.href += ":" + _l9.id;
          }
        }
      }

      try {
        _a16.href += "spells/" + o.spell_ids[t];
      } catch (e) {
        i && (console.log(e), console.log("We're probably looking at an item."));
      }

      _a16.dataset.tooltipHref = _a16.href;

      var _l8 = void 0;

      try {
        _l8 = document.createTextNode(o.translations[t][n[e.language]]);
      } catch (a) {
        try {
          _l8 = document.createTextNode(o.languages[t][n[e.language]]);
        } catch (e) {
          _l8 = t;
        }
      }

      return _a16.appendChild(document.createTextNode(_l8)), _a16.outerHTML;
    }
  }

  function p(e) {
    return e.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }

  function _(r) {
    if (i && console.log("update_chart_style"), "highcharts" == r.chart_engine || "highcharts_old" == r.chart_engine) {
      if ("secondary_distributions" === r.data_type) return {
        chart: {
          renderTo: "scatter_plot_chart",
          type: "scatter3d",
          backgroundColor: null,
          animation: !1,
          height: 800,
          width: 800,
          options3d: {
            enabled: !0,
            alpha: 10,
            beta: 30,
            depth: 800,
            fitToPlot: !1
          }
        },
        legend: {
          enabled: !0,
          backgroundColor: r.background_color,
          borderColor: r.font_color,
          borderWidth: 1,
          align: "right",
          verticalAlign: "middle",
          layout: "vertical",
          itemStyle: {
            color: r.font_color
          },
          itemHoverStyle: {
            color: r.font_color
          }
        },
        plotOptions: {
          series: {
            dataLabels: {
              allowOverlap: !0,
              style: {
                color: r.font_color,
                fontSize: r.font_size,
                fontWeight: "400",
                textOutline: ""
              }
            },
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            }
          }
        },
        series: [],
        title: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color
          }
        },
        subtitle: {
          text: "",
          useHTML: !0,
          style: {
            color: r.font_color,
            fontSize: r.font_size
          }
        },
        tooltip: {
          headerFormat: "",
          pointFormatter: function pointFormatter() {
            return '<table class="">                <thead>                  <tr>                    <th scope="col"></th>                    <th scope="col">Absolute</th>                    <th scope="col">Relative</th>                  </tr>                </thead>                <tbody>                  <tr>                    <th scope="row">DPS</th>                    <td>' + Intl.NumberFormat().format(this.dps) + "</td>                    <td>" + Math.round(this.dps / this.dps_max * 1e4) / 100 + '%</td>                  </tr>                  <tr>                    <th scope="row">Crit</th>                    <td>' + Intl.NumberFormat().format(this.stat_crit) + "</td>                    <td>" + this.name.split("_")[0] + '%</td>                  </tr>                  <tr>                    <th scope="row">Haste</th>                    <td>' + Intl.NumberFormat().format(this.stat_haste) + "</td>                    <td>" + this.name.split("_")[1] + '%</td>                  </tr>                  <tr>                    <th scope="row">Mastery</th>                    <td>' + Intl.NumberFormat().format(this.stat_mastery) + "</td>                    <td>" + this.name.split("_")[2] + '%</td>                  </tr>                  <tr>                    <th scope="row">Versatility</th>                    <td>' + Intl.NumberFormat().format(this.stat_vers) + "</td>                    <td>" + this.name.split("_")[3] + "%</td>                  </tr>                </tbody>              </table>";
          },
          useHTML: !0,
          borderColor: r.background_color
        },
        xAxis: {
          min: 0,
          max: 80,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        yAxis: {
          min: -10,
          max: 70,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        },
        zAxis: {
          min: 10,
          max: 90,
          tickInterval: 20,
          startOnTick: !0,
          endOnTick: !0,
          title: "",
          labels: {
            enabled: !1
          },
          reversed: !0,
          gridLineWidth: 1,
          gridLineColor: r.axis_color
        }
      };
      var _i9 = r.background_color,
          _n4 = r.axis_color,
          _s3 = r.font_color,
          _d3 = "https://bloodmallet.com/";
      void 0 !== r.chart_id ? _d3 += "chart/" + r.chart_id : void 0 !== r.wow_class && void 0 !== r.wow_spec && (_d3 += "#" + r.wow_class + "_" + r.wow_spec);
      var _c3 = {
        chart: {
          type: "bar",
          backgroundColor: t,
          style: {
            fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"'
          }
        },
        colors: e,
        credits: {
          href: _d3,
          text: "bloodmallet",
          style: {
            fontSize: l
          }
        },
        legend: {
          align: "right",
          backgroundColor: t,
          borderColor: a,
          borderWidth: 1,
          floating: !1,
          itemMarginBottom: 3,
          itemMarginTop: 0,
          layout: "vertical",
          reversed: !0,
          shadow: !1,
          verticalAlign: "middle",
          x: 0,
          y: 0,
          itemStyle: {
            color: o
          },
          itemHoverStyle: {
            color: o
          },
          title: {
            text: " ",
            style: {
              color: o
            }
          },
          symbolRadius: 0
        },
        plotOptions: {
          series: {
            stacking: "normal",
            borderColor: t,
            events: {
              legendItemClick: function legendItemClick() {
                return !1;
              }
            },
            style: {
              textOutline: !1,
              fontSize: l
            }
          }
        },
        series: [],
        title: {
          text: "Loading data...",
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        subtitle: {
          text: '...from <a href="https://bloodmallet.com">bloodmallet</a>',
          useHTML: !0,
          style: {
            color: o,
            fontSize: l
          }
        },
        tooltip: {
          headerFormat: "<b>{point.x}</b>",
          shared: !0,
          backgroundColor: t,
          borderColor: a,
          style: {
            color: o,
            fontSize: l
          },
          useHTML: !0
        },
        xAxis: {
          categories: [],
          labels: {
            useHTML: !0,
            style: {
              color: o,
              fontSize: l
            }
          },
          gridLineWidth: 0,
          gridLineColor: a,
          lineColor: a,
          tickColor: a
        },
        yAxis: [{
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === r.value_style ? "Δ Damage per second" : "% Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }, {
          linkedTo: 0,
          opposite: !0,
          labels: {
            style: {
              color: a
            }
          },
          min: 0,
          stackLabels: {
            enabled: !0,
            formatter: function formatter() {
              return Intl.NumberFormat().format(this.total);
            },
            style: {
              color: o,
              textOutline: !1,
              fontSize: l,
              fontWeight: "normal"
            }
          },
          title: {
            text: "absolute" === r.value_style ? "Δ Damage per second" : "% Damage per second",
            style: {
              color: a
            }
          },
          gridLineWidth: 1,
          gridLineColor: a
        }]
      };
      return _c3.chart.backgroundColor = _i9, _c3.legend.backgroundColor = _i9, _c3.legend.borderColor = _n4, _c3.legend.itemStyle.color = _s3, _c3.legend.itemHoverStyle.color = _s3, _c3.title.style.color = _s3, _c3.subtitle.style.color = _s3, _c3.tooltip.formatter = function () {
        var e = document.createElement("div");
        e.style.margin = "-4px -7px -7px -7px", e.style.padding = "3px 3px 6px 3px", e.style.backgroundColor = "transparent" !== _i9 ? _i9 : t, "highcharts_old" === r.chart_engine && (e.style.margin = "-7px");
        var o = document.createElement("div");
        e.appendChild(o), o.style.marginLeft = "9px", o.style.marginRight = "9px", o.style.marginBottom = "6px", o.style.fontWeight = "700", o.innerHTML = this.x;
        var a = 0;

        for (var l = this.points.length - 1; l >= 0; l--) {
          if (a += this.points[l].y, 0 !== this.points[l].y) {
            var _t8 = document.createElement("div");

            e.appendChild(_t8);

            var _o14 = document.createElement("span");

            _t8.appendChild(_o14), _o14.style.marginLeft = "9px", _o14.style.borderLeft = "9px solid " + this.points[l].series.color, _o14.style.paddingLeft = "4px", Number.isInteger(this.points[l].series.name) && _o14.appendChild(document.createTextNode(this.points[l].series.name + ":")), _t8.appendChild(document.createTextNode("  " + Intl.NumberFormat().format(a) + ("relative" === r.value_style ? "%" : "")));
          }
        }

        return e.outerHTML;
      }, _c3.tooltip.backgroundColor = "transparent" !== _i9 ? _i9 : t, _c3.tooltip.borderColor = _n4, _c3.tooltip.style.color = _s3, _c3.xAxis.labels.style.color = _s3, _c3.xAxis.gridLineColor = _n4, _c3.xAxis.lineColor = _n4, _c3.xAxis.tickColor = _n4, _c3.yAxis[0].labels.style.color = _n4, _c3.yAxis[0].stackLabels.style.color = _s3, _c3.yAxis[0].gridLineColor = _n4, _c3.yAxis[0].lineColor = _n4, _c3.yAxis[0].tickColor = _n4, _c3.yAxis[0].title.style.color = _n4, _c3.yAxis[1].labels.style.color = _n4, _c3.yAxis[1].stackLabels.style.color = _s3, _c3.yAxis[1].gridLineColor = _n4, _c3.yAxis[1].lineColor = _n4, _c3.yAxis[1].tickColor = _n4, _c3.yAxis[1].title.style.color = _n4, _c3.credits.style.color = _s3, _c3;
    }
  }

  function m(e, t, o) {
    var a = document.createElement("div");
    a.innerHTML = e + ": ";
    var l = document.createElement("span");

    if (l.innerHTML = t + "%", l.classList += f(t >= 0 ? t : 3 - t), void 0 !== o) {
      l.title = "Talent combination: " + o, l.setAttribute("data-toggle", "tooltip"), l.setAttribute("data-placement", "bottom");

      var _e12 = document.createElement("span");

      _e12.classList += "priest-color", _e12.innerHTML = " (?)", l.appendChild(_e12);
    }

    return a.appendChild(l), a;
  }

  function f(e) {
    return i && console.log("get_value_color"), e < 5 ? "mage-color" : e > 10 && e <= 12 ? "druid-color" : e > 12 ? "death_knight-color" : "monk-color";
  }

  function y(e, t) {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = t.sorted_data_keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var _o15 = _step4.value;
        if (_o15[e.slice(0, 1) - 1] === e.slice(1, 2)) return _o15;
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return !1;
  }

  function b(e, t, o, a) {
    var l = '<a href="https://';
    return "en" === e.language || "EN" === e.language ? l += "www" : l += e.language.toLowerCase(), l += ".wowhead.com/spell=", l += a.talent_data[o.slice(0, 1)][o.slice(1, 2)].spell_id, l += '"', l += ">", l += w(t, a), l += "</a>";
  }

  function w(e, t) {
    i && console.log("get_translated_name " + e);
    var o = {
      "zh-hans": "cn_CN",
      en: "en_US",
      de: "de_DE",
      es: "es_ES",
      fr: "fr_FR",
      it: "it_IT",
      ko: "ko_KR",
      pt: "pt_BR",
      ru: "ru_RU"
    },
        a = "";

    try {
      a = t.translations[e][o[language]];
    } catch (t) {
      i && (console.log("No translation for ".concat(e, " found.")), console.log(t)), a = e;
    }

    return i && console.log("Translated name: " + a), a;
  }

  function x(e, t) {
    var o = e.slice(0, 1),
        a = e.slice(1, 2),
        l = 100,
        i = "";
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = t.sorted_data_keys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var _e13 = _step5.value;

        if (_e13[o - 1] === a) {
          var _a17 = t.data[_e13],
              _r5 = t.data[_e13.slice(0, o - 1) + "0" + _e13.slice(o, 8)];

          l > k(_r5, _a17) && (l = k(_r5, _a17), i = _e13);
        }
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    return [i, l];
  }

  function v(e, t) {
    var o = e.slice(0, 1),
        a = e.slice(1, 2),
        l = -100,
        i = "";
    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = t.sorted_data_keys[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var _e14 = _step6.value;

        if (_e14[o - 1] === a) {
          var _a18 = t.data[_e14],
              _r6 = t.data[_e14.slice(0, o - 1) + "0" + _e14.slice(o, 8)];

          l < k(_r6, _a18) && (l = k(_r6, _a18), i = _e14);
        }
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }

    return [i, l];
  }

  function C(e, t) {
    i && console.log("get_average_gain");
    var o = [];
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = t.sorted_data_keys[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var _a19 = _step7.value;
        _a19[e.slice(0, 1) - 1] === e.slice(1, 2) && o.push(_a19);
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
          _iterator7.return();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    var a = 0;

    for (var _i10 = 0; _i10 < o.length; _i10++) {
      var _l10 = _o16[_i10];
      var _o16 = t.data[_l10];
      a += k(t.data[_l10.slice(0, e.slice(0, 1) - 1) + "0" + _l10.slice(e.slice(0, 1), 8)], _o16);
    }

    return Math.round(a / o.length * 100) / 100;
  }

  function k(e, t) {
    return i && console.log("get_percentage_gain"), Math.round(100 * (100 * t / e - 100)) / 100;
  }

  this.init_charts = new function () {
    i && console.log("init_charts");
    var e = document.querySelectorAll("div.bloodmallet_chart"),
        l = [];

    for (var _t9 = 0; _t9 < e.length; _t9++) {
      var _o17 = e[_t9];
      if (l.indexOf(_o17.id) > -1) return void console.error("Multiple Elements use the same ID ('" + _o17.id + "'). Aborting bloodmallet_chart_import.js.");
      l.push(_o17.id);
    }

    for (var _l11 = 0; _l11 < e.length; _l11++) {
      var _r7 = void 0;

      try {
        _r7 = e[_l11].id;
      } catch (e) {
        return void console.error("Each .bloodmallet_chart needs an ID. Aborting bloodmallet_chart_import.js.");
      }

      var _n5 = document.getElementById(e[_l11].id);

      if (_n5) {
        var _e15 = {
          chart_id: void 0,
          wow_class: void 0,
          wow_spec: void 0,
          data_type: "trinkets",
          azerite_tier: "all",
          conduit_rank: "7",
          fight_style: "castingpatchwerk",
          chart_mode: "soulbinds",
          covenant: "Kyrian",
          axis_color: a,
          background_color: t,
          font_color: o,
          limit: 7,
          chart_engine: "highcharts",
          tooltip_engine: "wowhead",
          language: "en",
          value_style: "absolute",
          html_element: _n5
        };

        try {
          void 0 !== bloodmallet.style.axis_color && (_e15.axis_color = bloodmallet.style.axis_color), void 0 !== bloodmallet.style.background_color && (_e15.background_color = bloodmallet.style.background_color), void 0 !== bloodmallet.style.font_color && (_e15.font_color = bloodmallet.style.font_color), void 0 !== bloodmallet.settings.entries && (_e15.limit = bloodmallet.settings.entries), void 0 !== bloodmallet.settings.chart_engine && (_e15.chart_engine = bloodmallet.settings.chart_engine), void 0 !== bloodmallet.settings.tooltip_engine && (_e15.tooltip_engine = bloodmallet.settings.tooltip_engine), void 0 !== bloodmallet.settings.language && (_e15.language = bloodmallet.settings.language), void 0 !== bloodmallet.settings.value_style && (_e15.value_style = bloodmallet.settings.value_style);
        } catch (e) {
          i && console.log("Applying page wide settings failed or no page wide settings were found.");
        }

        _n5.getAttribute("data-entries") && (_e15.limit = _n5.getAttribute("data-entries")), _n5.getAttribute("data-fight-style") && (_e15.fight_style = _n5.getAttribute("data-fight-style")), _n5.getAttribute("data-type") && (_e15.data_type = _n5.getAttribute("data-type")), _n5.getAttribute("data-chart-mode") && (_e15.chart_mode = _n5.getAttribute("data-chart-mode")), _n5.getAttribute("data-covenant") && (_e15.covenant = _n5.getAttribute("data-covenant")), _n5.getAttribute("data-azerite-tier") && (_e15.azerite_tier = _n5.getAttribute("data-azerite-tier")), _n5.getAttribute("data-conduit-rank") && (_e15.conduit_rank = _n5.getAttribute("data-conduit-rank")), _n5.getAttribute("data-background-color") && (_e15.background_color = _n5.getAttribute("data-background-color")), _n5.getAttribute("data-font-color") && (_e15.font_color = _n5.getAttribute("data-font-color")), _n5.getAttribute("data-axis-color") && (_e15.axis_color = _n5.getAttribute("data-axis-color")), _n5.getAttribute("data-tooltip-engine") && (_e15.tooltip_engine = _n5.getAttribute("data-tooltip-engine")), _n5.getAttribute("data-chart-engine") && (_e15.chart_engine = _n5.getAttribute("data-chart-engine")), _n5.getAttribute("data-language") && (_e15.language = _n5.getAttribute("data-language")), _n5.getAttribute("data-value-style") && (_e15.value_style = _n5.getAttribute("data-value-style"));

        var _l12 = !0;

        _n5.getAttribute("data-chart-id") ? _e15.chart_id = _n5.getAttribute("data-chart-id") : (_n5.getAttribute("data-wow-class") || (console.error("Required 'data-chart-id' or 'data-wow-class' attribute wasn't found in " + _r7 + "."), _l12 = !1), _e15.wow_class = _n5.getAttribute("data-wow-class"), _n5.getAttribute("data-wow-spec") || (console.error("Required 'data-chart-id' or 'data-wow-spec' attribute wasn't found in " + _r7 + "."), _l12 = !1), _e15.wow_spec = _n5.getAttribute("data-wow-spec"));

        var _d4 = _(_e15),
            _h3 = !1;

        if ("highcharts" == _e15.chart_engine) try {
          _h3 = Highcharts.chart(_r7, _d4);
        } catch (e) {
          return console.log("When trying to create a highcharts chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        } else if ("highcharts_old" == _e15.chart_engine) try {
          var _e16 = _d4;
          _e16.chart.renderTo = _r7, _h3 = new Highcharts.Chart(_e16);
        } catch (e) {
          return console.log("When trying to create a highcharts_old chart the following error occured. Did you include the necessary Highcharts scripts?"), void console.log(e);
        }
        _l12 ? s(_e15) : _h3.setTitle({
          text: "Wrong chart setup"
        }, {
          text: "Missing 'data-chart-id', 'data-wow-class' or 'data-wow-spec'. See <a href=\"https://github.com/Bloodmallet/bloodmallet_web_frontend/wiki/How-to-import-charts\">wiki</a>"
        }), setTimeout(c, 1, _e15, _n5, _h3, 0);
      }
    }
  }();
}

document.addEventListener("DOMContentLoaded", function () {
  bloodmallet_chart_import();
});